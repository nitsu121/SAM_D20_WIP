
RTC_QUICK_START_COUNT_POLLED1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001dd8  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000018  20000000  00001dd8  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000058  20000018  00001df0  00010018  2**2
                  ALLOC
  3 .stack        00002000  20000070  00001e48  00010018  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00010018  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  00010040  2**0
                  CONTENTS, READONLY
  6 .debug_info   00017c85  00000000  00000000  0001009b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000230d  00000000  00000000  00027d20  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00006216  00000000  00000000  0002a02d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000003f0  00000000  00000000  00030243  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000718  00000000  00000000  00030633  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00011e84  00000000  00000000  00030d4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000874e  00000000  00000000  00042bcf  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0005f634  00000000  00000000  0004b31d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000a88  00000000  00000000  000aa954  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20002070 	.word	0x20002070
       4:	000019c5 	.word	0x000019c5
       8:	000019c1 	.word	0x000019c1
       c:	000019c1 	.word	0x000019c1
	...
      2c:	000019c1 	.word	0x000019c1
	...
      38:	000019c1 	.word	0x000019c1
      3c:	000019c1 	.word	0x000019c1
      40:	000019c1 	.word	0x000019c1
      44:	000019c1 	.word	0x000019c1
      48:	000019c1 	.word	0x000019c1
      4c:	000019c1 	.word	0x000019c1
      50:	000019c1 	.word	0x000019c1
      54:	000019c1 	.word	0x000019c1
      58:	000019c1 	.word	0x000019c1
      5c:	000019c1 	.word	0x000019c1
      60:	000019c1 	.word	0x000019c1
      64:	000019c1 	.word	0x000019c1
      68:	000019c1 	.word	0x000019c1
      6c:	000019c1 	.word	0x000019c1
      70:	000019c1 	.word	0x000019c1
      74:	000019c1 	.word	0x000019c1
      78:	000019c1 	.word	0x000019c1
      7c:	000019c1 	.word	0x000019c1
      80:	000019c1 	.word	0x000019c1
      84:	000019c1 	.word	0x000019c1
      88:	000019c1 	.word	0x000019c1
      8c:	000019c1 	.word	0x000019c1
      90:	000019c1 	.word	0x000019c1
      94:	000019c1 	.word	0x000019c1
      98:	000019c1 	.word	0x000019c1
      9c:	000019c1 	.word	0x000019c1
      a0:	000019c1 	.word	0x000019c1

000000a4 <__do_global_dtors_aux>:
      a4:	b510      	push	{r4, lr}
      a6:	4c06      	ldr	r4, [pc, #24]	; (c0 <__do_global_dtors_aux+0x1c>)
      a8:	7823      	ldrb	r3, [r4, #0]
      aa:	2b00      	cmp	r3, #0
      ac:	d107      	bne.n	be <__do_global_dtors_aux+0x1a>
      ae:	4b05      	ldr	r3, [pc, #20]	; (c4 <__do_global_dtors_aux+0x20>)
      b0:	2b00      	cmp	r3, #0
      b2:	d002      	beq.n	ba <__do_global_dtors_aux+0x16>
      b4:	4804      	ldr	r0, [pc, #16]	; (c8 <__do_global_dtors_aux+0x24>)
      b6:	e000      	b.n	ba <__do_global_dtors_aux+0x16>
      b8:	bf00      	nop
      ba:	2301      	movs	r3, #1
      bc:	7023      	strb	r3, [r4, #0]
      be:	bd10      	pop	{r4, pc}
      c0:	20000018 	.word	0x20000018
      c4:	00000000 	.word	0x00000000
      c8:	00001dd8 	.word	0x00001dd8

000000cc <frame_dummy>:
      cc:	b508      	push	{r3, lr}
      ce:	4b08      	ldr	r3, [pc, #32]	; (f0 <frame_dummy+0x24>)
      d0:	2b00      	cmp	r3, #0
      d2:	d003      	beq.n	dc <frame_dummy+0x10>
      d4:	4807      	ldr	r0, [pc, #28]	; (f4 <frame_dummy+0x28>)
      d6:	4908      	ldr	r1, [pc, #32]	; (f8 <frame_dummy+0x2c>)
      d8:	e000      	b.n	dc <frame_dummy+0x10>
      da:	bf00      	nop
      dc:	4807      	ldr	r0, [pc, #28]	; (fc <frame_dummy+0x30>)
      de:	6803      	ldr	r3, [r0, #0]
      e0:	2b00      	cmp	r3, #0
      e2:	d100      	bne.n	e6 <frame_dummy+0x1a>
      e4:	bd08      	pop	{r3, pc}
      e6:	4b06      	ldr	r3, [pc, #24]	; (100 <frame_dummy+0x34>)
      e8:	2b00      	cmp	r3, #0
      ea:	d0fb      	beq.n	e4 <frame_dummy+0x18>
      ec:	4798      	blx	r3
      ee:	e7f9      	b.n	e4 <frame_dummy+0x18>
      f0:	00000000 	.word	0x00000000
      f4:	00001dd8 	.word	0x00001dd8
      f8:	2000001c 	.word	0x2000001c
      fc:	00001dd8 	.word	0x00001dd8
     100:	00000000 	.word	0x00000000

00000104 <_sercom_get_sync_baud_val>:
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     104:	b510      	push	{r4, lr}
     106:	0849      	lsrs	r1, r1, #1
     108:	2440      	movs	r4, #64	; 0x40
	for (i = 63; i >= 0; i--) {
     10a:	4281      	cmp	r1, r0
     10c:	d30c      	bcc.n	128 <_sercom_get_sync_baud_val+0x24>
     10e:	2300      	movs	r3, #0
		bit_shift = (uint64_t)1 << i;
     110:	1a09      	subs	r1, r1, r0
     112:	3301      	adds	r3, #1
     114:	b29b      	uxth	r3, r3
     116:	4288      	cmp	r0, r1
     118:	d9fa      	bls.n	110 <_sercom_get_sync_baud_val+0xc>
     11a:	3b01      	subs	r3, #1
     11c:	b29b      	uxth	r3, r3
     11e:	2440      	movs	r4, #64	; 0x40
     120:	2bff      	cmp	r3, #255	; 0xff
     122:	d801      	bhi.n	128 <_sercom_get_sync_baud_val+0x24>
     124:	8013      	strh	r3, [r2, #0]
     126:	2400      	movs	r4, #0
     128:	1c20      	adds	r0, r4, #0
     12a:	bd10      	pop	{r4, pc}

0000012c <sercom_set_gclk_generator>:
     12c:	b510      	push	{r4, lr}

		r = r << 1;
     12e:	b082      	sub	sp, #8
     130:	1c04      	adds	r4, r0, #0
     132:	4b0e      	ldr	r3, [pc, #56]	; (16c <sercom_set_gclk_generator+0x40>)
     134:	781b      	ldrb	r3, [r3, #0]
     136:	2b00      	cmp	r3, #0
     138:	d001      	beq.n	13e <sercom_set_gclk_generator+0x12>
     13a:	2900      	cmp	r1, #0
     13c:	d00d      	beq.n	15a <sercom_set_gclk_generator+0x2e>

		if (n & bit_shift) {
     13e:	a901      	add	r1, sp, #4
     140:	700c      	strb	r4, [r1, #0]
     142:	200c      	movs	r0, #12
     144:	4b0a      	ldr	r3, [pc, #40]	; (170 <sercom_set_gclk_generator+0x44>)
     146:	4798      	blx	r3
     148:	200c      	movs	r0, #12
     14a:	4b0a      	ldr	r3, [pc, #40]	; (174 <sercom_set_gclk_generator+0x48>)
     14c:	4798      	blx	r3
			r |= 0x01;
     14e:	4b07      	ldr	r3, [pc, #28]	; (16c <sercom_set_gclk_generator+0x40>)
     150:	705c      	strb	r4, [r3, #1]
     152:	2201      	movs	r2, #1
     154:	701a      	strb	r2, [r3, #0]
     156:	2000      	movs	r0, #0
     158:	e006      	b.n	168 <sercom_set_gclk_generator+0x3c>
		}

		if (r >= d) {
     15a:	4b04      	ldr	r3, [pc, #16]	; (16c <sercom_set_gclk_generator+0x40>)
     15c:	785b      	ldrb	r3, [r3, #1]
     15e:	4283      	cmp	r3, r0
     160:	d001      	beq.n	166 <sercom_set_gclk_generator+0x3a>
     162:	201d      	movs	r0, #29
     164:	e000      	b.n	168 <sercom_set_gclk_generator+0x3c>
     166:	2000      	movs	r0, #0
			r = r - d;
     168:	b002      	add	sp, #8
     16a:	bd10      	pop	{r4, pc}
     16c:	20000034 	.word	0x20000034
			q |= bit_shift;
     170:	00001869 	.word	0x00001869
     174:	000017dd 	.word	0x000017dd

00000178 <_sercom_get_default_pad>:
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     178:	4b44      	ldr	r3, [pc, #272]	; (28c <_sercom_get_default_pad+0x114>)
     17a:	4298      	cmp	r0, r3
     17c:	d033      	beq.n	1e6 <_sercom_get_default_pad+0x6e>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
     17e:	d806      	bhi.n	18e <_sercom_get_default_pad+0x16>
     180:	4b43      	ldr	r3, [pc, #268]	; (290 <_sercom_get_default_pad+0x118>)
     182:	4298      	cmp	r0, r3
			baud_int = baud_int / BAUD_FP_MAX;
     184:	d00d      	beq.n	1a2 <_sercom_get_default_pad+0x2a>
			if(baud_int < BAUD_INT_MAX) {
     186:	4b43      	ldr	r3, [pc, #268]	; (294 <_sercom_get_default_pad+0x11c>)
     188:	4298      	cmp	r0, r3
     18a:	d01b      	beq.n	1c4 <_sercom_get_default_pad+0x4c>
     18c:	e06f      	b.n	26e <_sercom_get_default_pad+0xf6>
     18e:	4b42      	ldr	r3, [pc, #264]	; (298 <_sercom_get_default_pad+0x120>)
     190:	4298      	cmp	r0, r3
     192:	d04a      	beq.n	22a <_sercom_get_default_pad+0xb2>
     194:	4b41      	ldr	r3, [pc, #260]	; (29c <_sercom_get_default_pad+0x124>)
     196:	4298      	cmp	r0, r3
     198:	d058      	beq.n	24c <_sercom_get_default_pad+0xd4>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
     19a:	4b41      	ldr	r3, [pc, #260]	; (2a0 <_sercom_get_default_pad+0x128>)
     19c:	4298      	cmp	r0, r3
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     19e:	d166      	bne.n	26e <_sercom_get_default_pad+0xf6>
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
     1a0:	e032      	b.n	208 <_sercom_get_default_pad+0x90>
     1a2:	2901      	cmp	r1, #1
     1a4:	d006      	beq.n	1b4 <_sercom_get_default_pad+0x3c>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
		baud_calculated = baud_int | (baud_fp << 13);
     1a6:	2900      	cmp	r1, #0
     1a8:	d063      	beq.n	272 <_sercom_get_default_pad+0xfa>
	}

	*baudval = baud_calculated;
     1aa:	2902      	cmp	r1, #2
     1ac:	d006      	beq.n	1bc <_sercom_get_default_pad+0x44>
	return STATUS_OK;
     1ae:	2903      	cmp	r1, #3
}
     1b0:	d006      	beq.n	1c0 <_sercom_get_default_pad+0x48>
     1b2:	e001      	b.n	1b8 <_sercom_get_default_pad+0x40>
     1b4:	483b      	ldr	r0, [pc, #236]	; (2a4 <_sercom_get_default_pad+0x12c>)
     1b6:	e067      	b.n	288 <_sercom_get_default_pad+0x110>
     1b8:	2000      	movs	r0, #0
     1ba:	e065      	b.n	288 <_sercom_get_default_pad+0x110>
     1bc:	483a      	ldr	r0, [pc, #232]	; (2a8 <_sercom_get_default_pad+0x130>)
     1be:	e063      	b.n	288 <_sercom_get_default_pad+0x110>
     1c0:	483a      	ldr	r0, [pc, #232]	; (2ac <_sercom_get_default_pad+0x134>)
     1c2:	e061      	b.n	288 <_sercom_get_default_pad+0x110>
     1c4:	2901      	cmp	r1, #1
     1c6:	d006      	beq.n	1d6 <_sercom_get_default_pad+0x5e>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     1c8:	2900      	cmp	r1, #0
     1ca:	d054      	beq.n	276 <_sercom_get_default_pad+0xfe>
     1cc:	2902      	cmp	r1, #2
     1ce:	d006      	beq.n	1de <_sercom_get_default_pad+0x66>
     1d0:	2903      	cmp	r1, #3
     1d2:	d006      	beq.n	1e2 <_sercom_get_default_pad+0x6a>
     1d4:	e001      	b.n	1da <_sercom_get_default_pad+0x62>
     1d6:	4836      	ldr	r0, [pc, #216]	; (2b0 <_sercom_get_default_pad+0x138>)
     1d8:	e056      	b.n	288 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     1da:	2000      	movs	r0, #0
     1dc:	e054      	b.n	288 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     1de:	4835      	ldr	r0, [pc, #212]	; (2b4 <_sercom_get_default_pad+0x13c>)
     1e0:	e052      	b.n	288 <_sercom_get_default_pad+0x110>
     1e2:	4835      	ldr	r0, [pc, #212]	; (2b8 <_sercom_get_default_pad+0x140>)
     1e4:	e050      	b.n	288 <_sercom_get_default_pad+0x110>
     1e6:	2901      	cmp	r1, #1
     1e8:	d006      	beq.n	1f8 <_sercom_get_default_pad+0x80>
     1ea:	2900      	cmp	r1, #0
     1ec:	d045      	beq.n	27a <_sercom_get_default_pad+0x102>
     1ee:	2902      	cmp	r1, #2
     1f0:	d006      	beq.n	200 <_sercom_get_default_pad+0x88>
     1f2:	2903      	cmp	r1, #3
     1f4:	d006      	beq.n	204 <_sercom_get_default_pad+0x8c>
     1f6:	e001      	b.n	1fc <_sercom_get_default_pad+0x84>
     1f8:	4830      	ldr	r0, [pc, #192]	; (2bc <_sercom_get_default_pad+0x144>)
     1fa:	e045      	b.n	288 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     1fc:	2000      	movs	r0, #0
     1fe:	e043      	b.n	288 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     200:	482f      	ldr	r0, [pc, #188]	; (2c0 <_sercom_get_default_pad+0x148>)
     202:	e041      	b.n	288 <_sercom_get_default_pad+0x110>
     204:	482f      	ldr	r0, [pc, #188]	; (2c4 <_sercom_get_default_pad+0x14c>)
     206:	e03f      	b.n	288 <_sercom_get_default_pad+0x110>
     208:	2901      	cmp	r1, #1
     20a:	d006      	beq.n	21a <_sercom_get_default_pad+0xa2>
     20c:	2900      	cmp	r1, #0
     20e:	d036      	beq.n	27e <_sercom_get_default_pad+0x106>
     210:	2902      	cmp	r1, #2
     212:	d006      	beq.n	222 <_sercom_get_default_pad+0xaa>
     214:	2903      	cmp	r1, #3
     216:	d006      	beq.n	226 <_sercom_get_default_pad+0xae>
     218:	e001      	b.n	21e <_sercom_get_default_pad+0xa6>
     21a:	482b      	ldr	r0, [pc, #172]	; (2c8 <_sercom_get_default_pad+0x150>)
     21c:	e034      	b.n	288 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     21e:	2000      	movs	r0, #0
     220:	e032      	b.n	288 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     222:	482a      	ldr	r0, [pc, #168]	; (2cc <_sercom_get_default_pad+0x154>)
     224:	e030      	b.n	288 <_sercom_get_default_pad+0x110>
     226:	482a      	ldr	r0, [pc, #168]	; (2d0 <_sercom_get_default_pad+0x158>)
     228:	e02e      	b.n	288 <_sercom_get_default_pad+0x110>
     22a:	2901      	cmp	r1, #1
     22c:	d006      	beq.n	23c <_sercom_get_default_pad+0xc4>
     22e:	2900      	cmp	r1, #0
     230:	d027      	beq.n	282 <_sercom_get_default_pad+0x10a>
     232:	2902      	cmp	r1, #2
     234:	d006      	beq.n	244 <_sercom_get_default_pad+0xcc>
     236:	2903      	cmp	r1, #3
     238:	d006      	beq.n	248 <_sercom_get_default_pad+0xd0>
     23a:	e001      	b.n	240 <_sercom_get_default_pad+0xc8>
     23c:	4825      	ldr	r0, [pc, #148]	; (2d4 <_sercom_get_default_pad+0x15c>)
     23e:	e023      	b.n	288 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     240:	2000      	movs	r0, #0
     242:	e021      	b.n	288 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     244:	4824      	ldr	r0, [pc, #144]	; (2d8 <_sercom_get_default_pad+0x160>)
     246:	e01f      	b.n	288 <_sercom_get_default_pad+0x110>
     248:	4824      	ldr	r0, [pc, #144]	; (2dc <_sercom_get_default_pad+0x164>)
     24a:	e01d      	b.n	288 <_sercom_get_default_pad+0x110>
     24c:	2901      	cmp	r1, #1
     24e:	d006      	beq.n	25e <_sercom_get_default_pad+0xe6>
     250:	2900      	cmp	r1, #0
     252:	d018      	beq.n	286 <_sercom_get_default_pad+0x10e>
     254:	2902      	cmp	r1, #2
     256:	d006      	beq.n	266 <_sercom_get_default_pad+0xee>
     258:	2903      	cmp	r1, #3
     25a:	d006      	beq.n	26a <_sercom_get_default_pad+0xf2>
     25c:	e001      	b.n	262 <_sercom_get_default_pad+0xea>
     25e:	4820      	ldr	r0, [pc, #128]	; (2e0 <_sercom_get_default_pad+0x168>)
     260:	e012      	b.n	288 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     262:	2000      	movs	r0, #0
     264:	e010      	b.n	288 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     266:	481f      	ldr	r0, [pc, #124]	; (2e4 <_sercom_get_default_pad+0x16c>)
     268:	e00e      	b.n	288 <_sercom_get_default_pad+0x110>
     26a:	481f      	ldr	r0, [pc, #124]	; (2e8 <_sercom_get_default_pad+0x170>)
     26c:	e00c      	b.n	288 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     26e:	2000      	movs	r0, #0
     270:	e00a      	b.n	288 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     272:	481e      	ldr	r0, [pc, #120]	; (2ec <_sercom_get_default_pad+0x174>)
     274:	e008      	b.n	288 <_sercom_get_default_pad+0x110>
     276:	2003      	movs	r0, #3
     278:	e006      	b.n	288 <_sercom_get_default_pad+0x110>
     27a:	481d      	ldr	r0, [pc, #116]	; (2f0 <_sercom_get_default_pad+0x178>)
     27c:	e004      	b.n	288 <_sercom_get_default_pad+0x110>
     27e:	481d      	ldr	r0, [pc, #116]	; (2f4 <_sercom_get_default_pad+0x17c>)
     280:	e002      	b.n	288 <_sercom_get_default_pad+0x110>
     282:	481d      	ldr	r0, [pc, #116]	; (2f8 <_sercom_get_default_pad+0x180>)
     284:	e000      	b.n	288 <_sercom_get_default_pad+0x110>
     286:	481d      	ldr	r0, [pc, #116]	; (2fc <_sercom_get_default_pad+0x184>)
	}

	Assert(false);
	return 0;
}
     288:	4770      	bx	lr
     28a:	46c0      	nop			; (mov r8, r8)
     28c:	42001000 	.word	0x42001000
     290:	42000800 	.word	0x42000800
     294:	42000c00 	.word	0x42000c00
     298:	42001800 	.word	0x42001800
     29c:	42001c00 	.word	0x42001c00
     2a0:	42001400 	.word	0x42001400
     2a4:	00050003 	.word	0x00050003
     2a8:	00060003 	.word	0x00060003
     2ac:	00070003 	.word	0x00070003
     2b0:	00010003 	.word	0x00010003
     2b4:	001e0003 	.word	0x001e0003
     2b8:	001f0003 	.word	0x001f0003
     2bc:	00090003 	.word	0x00090003
     2c0:	000a0003 	.word	0x000a0003
     2c4:	000b0003 	.word	0x000b0003
     2c8:	00110003 	.word	0x00110003
     2cc:	00120003 	.word	0x00120003
     2d0:	00130003 	.word	0x00130003
     2d4:	000d0003 	.word	0x000d0003
     2d8:	000e0003 	.word	0x000e0003
     2dc:	000f0003 	.word	0x000f0003
     2e0:	00170003 	.word	0x00170003
     2e4:	00180003 	.word	0x00180003
     2e8:	00190003 	.word	0x00190003
     2ec:	00040003 	.word	0x00040003
     2f0:	00080003 	.word	0x00080003
     2f4:	00100003 	.word	0x00100003
     2f8:	000c0003 	.word	0x000c0003
     2fc:	00160003 	.word	0x00160003

00000300 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     300:	b530      	push	{r4, r5, lr}
     302:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     304:	4b0c      	ldr	r3, [pc, #48]	; (338 <_sercom_get_sercom_inst_index+0x38>)
     306:	466a      	mov	r2, sp
     308:	cb32      	ldmia	r3!, {r1, r4, r5}
     30a:	c232      	stmia	r2!, {r1, r4, r5}
     30c:	cb32      	ldmia	r3!, {r1, r4, r5}
     30e:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     310:	9b00      	ldr	r3, [sp, #0]
     312:	4283      	cmp	r3, r0
     314:	d006      	beq.n	324 <_sercom_get_sercom_inst_index+0x24>
     316:	2301      	movs	r3, #1
     318:	009a      	lsls	r2, r3, #2
     31a:	4669      	mov	r1, sp
     31c:	5852      	ldr	r2, [r2, r1]
     31e:	4282      	cmp	r2, r0
     320:	d103      	bne.n	32a <_sercom_get_sercom_inst_index+0x2a>
     322:	e000      	b.n	326 <_sercom_get_sercom_inst_index+0x26>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     324:	2300      	movs	r3, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
			return i;
     326:	b2d8      	uxtb	r0, r3
     328:	e003      	b.n	332 <_sercom_get_sercom_inst_index+0x32>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     32a:	3301      	adds	r3, #1
     32c:	2b06      	cmp	r3, #6
     32e:	d1f3      	bne.n	318 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     330:	2000      	movs	r0, #0
}
     332:	b007      	add	sp, #28
     334:	bd30      	pop	{r4, r5, pc}
     336:	46c0      	nop			; (mov r8, r8)
     338:	00001d58 	.word	0x00001d58

0000033c <DSPI_DRV_MasterTransferBlocking>:
#include "NRF24L01_DRIVER.h"


enum status_code DSPI_DRV_MasterTransferBlocking(struct spi_module *const module,
uint8_t *tx_data, uint8_t *rx_data, uint16_t length)
{
     33c:	b5f0      	push	{r4, r5, r6, r7, lr}
     33e:	b085      	sub	sp, #20
     340:	9001      	str	r0, [sp, #4]
     342:	1c0e      	adds	r6, r1, #0
     344:	9202      	str	r2, [sp, #8]
     346:	9303      	str	r3, [sp, #12]
	enum status_code ReturnFlag;
	spi_select_slave(&spi_master_instance, &slave, true);
     348:	4d0a      	ldr	r5, [pc, #40]	; (374 <DSPI_DRV_MasterTransferBlocking+0x38>)
     34a:	4c0b      	ldr	r4, [pc, #44]	; (378 <DSPI_DRV_MasterTransferBlocking+0x3c>)
     34c:	1c28      	adds	r0, r5, #0
     34e:	1c21      	adds	r1, r4, #0
     350:	2201      	movs	r2, #1
     352:	4f0a      	ldr	r7, [pc, #40]	; (37c <DSPI_DRV_MasterTransferBlocking+0x40>)
     354:	47b8      	blx	r7
	//enum status_code spi_transceive_buffer_wait(struct spi_module *const module, uint8_t *tx_data, uint8_t *rx_data, uint16_t length);
	ReturnFlag = spi_transceive_buffer_wait(module, tx_data, rx_data, length);
     356:	9801      	ldr	r0, [sp, #4]
     358:	1c31      	adds	r1, r6, #0
     35a:	9a02      	ldr	r2, [sp, #8]
     35c:	9b03      	ldr	r3, [sp, #12]
     35e:	4e08      	ldr	r6, [pc, #32]	; (380 <DSPI_DRV_MasterTransferBlocking+0x44>)
     360:	47b0      	blx	r6
     362:	1c06      	adds	r6, r0, #0
	spi_select_slave(&spi_master_instance, &slave, false);
     364:	1c28      	adds	r0, r5, #0
     366:	1c21      	adds	r1, r4, #0
     368:	2200      	movs	r2, #0
     36a:	47b8      	blx	r7
	return (ReturnFlag);
}
     36c:	1c30      	adds	r0, r6, #0
     36e:	b005      	add	sp, #20
     370:	bdf0      	pop	{r4, r5, r6, r7, pc}
     372:	46c0      	nop			; (mov r8, r8)
     374:	20000058 	.word	0x20000058
     378:	20000060 	.word	0x20000060
     37c:	00000ad5 	.word	0x00000ad5
     380:	00000dcd 	.word	0x00000dcd

00000384 <configure_spi_master>:


void configure_spi_master(void)
{
     384:	b510      	push	{r4, lr}
     386:	b08e      	sub	sp, #56	; 0x38
		const struct spi_slave_inst_config *const config)
{
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
     388:	4c24      	ldr	r4, [pc, #144]	; (41c <configure_spi_master+0x98>)
     38a:	2311      	movs	r3, #17
     38c:	7023      	strb	r3, [r4, #0]
	slave->address_enabled = config->address_enabled;
     38e:	2300      	movs	r3, #0
     390:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
     392:	70a3      	strb	r3, [r4, #2]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     394:	2201      	movs	r2, #1
     396:	4669      	mov	r1, sp
     398:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
     39a:	708b      	strb	r3, [r1, #2]
	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
     39c:	700a      	strb	r2, [r1, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
     39e:	2011      	movs	r0, #17
     3a0:	4b1f      	ldr	r3, [pc, #124]	; (420 <configure_spi_master+0x9c>)
     3a2:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
     3a4:	7823      	ldrb	r3, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     3a6:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     3a8:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     3aa:	2900      	cmp	r1, #0
     3ac:	d104      	bne.n	3b8 <configure_spi_master+0x34>
		return &(ports[port_index]->Group[group_index]);
     3ae:	095a      	lsrs	r2, r3, #5
     3b0:	01d2      	lsls	r2, r2, #7
     3b2:	491c      	ldr	r1, [pc, #112]	; (424 <configure_spi_master+0xa0>)
     3b4:	468c      	mov	ip, r1
     3b6:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     3b8:	211f      	movs	r1, #31
     3ba:	400b      	ands	r3, r1
     3bc:	391e      	subs	r1, #30
     3be:	1c08      	adds	r0, r1, #0
     3c0:	4098      	lsls	r0, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     3c2:	6190      	str	r0, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
     3c4:	aa01      	add	r2, sp, #4
     3c6:	7011      	strb	r1, [r2, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
     3c8:	2300      	movs	r3, #0
     3ca:	6053      	str	r3, [r2, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
     3cc:	6093      	str	r3, [r2, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
     3ce:	7413      	strb	r3, [r2, #16]
	config->run_in_standby   = false;
     3d0:	7453      	strb	r3, [r2, #17]
	config->receiver_enable  = true;
     3d2:	7491      	strb	r1, [r2, #18]
	config->select_slave_low_detect_enable= true;
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
#  endif
	config->generator_source = GCLK_GENERATOR_0;
     3d4:	311f      	adds	r1, #31
     3d6:	5453      	strb	r3, [r2, r1]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
     3d8:	9307      	str	r3, [sp, #28]
     3da:	9308      	str	r3, [sp, #32]

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
     3dc:	4b12      	ldr	r3, [pc, #72]	; (428 <configure_spi_master+0xa4>)
     3de:	6153      	str	r3, [r2, #20]
	slave_dev_config.ss_pin = SLAVE_SELECT_PIN;
	spi_attach_slave(&slave, &slave_dev_config);
	/* Configure, initialize and enable SERCOM SPI module */
	spi_get_config_defaults(&config_spi_master);
	//config_spi_master.mux_setting = EXT1_SPI_SERCOM_MUX_SETTING;
	config_spi_master.mux_setting = EXT2_SPI_SERCOM_MUX_SETTING;
     3e0:	2380      	movs	r3, #128	; 0x80
     3e2:	025b      	lsls	r3, r3, #9
     3e4:	60d3      	str	r3, [r2, #12]
	/* Configure pad 0 for data in */
	//config_spi_master.pinmux_pad0 = EXT1_SPI_SERCOM_PINMUX_PAD0;
	config_spi_master.pinmux_pad0 = EXT2_SPI_SERCOM_PINMUX_PAD0;
     3e6:	4b11      	ldr	r3, [pc, #68]	; (42c <configure_spi_master+0xa8>)
     3e8:	6253      	str	r3, [r2, #36]	; 0x24
	/* Configure pad 1 as unused */
	//config_spi_master.pinmux_pad1 = PINMUX_UNUSED;
	config_spi_master.pinmux_pad1 = PINMUX_UNUSED;
     3ea:	2301      	movs	r3, #1
     3ec:	425b      	negs	r3, r3
     3ee:	6293      	str	r3, [r2, #40]	; 0x28
	/* Configure pad 2 for data out */
	//config_spi_master.pinmux_pad2 = EXT1_SPI_SERCOM_PINMUX_PAD2;
	config_spi_master.pinmux_pad2 = EXT2_SPI_SERCOM_PINMUX_PAD2;
     3f0:	4b0f      	ldr	r3, [pc, #60]	; (430 <configure_spi_master+0xac>)
     3f2:	62d3      	str	r3, [r2, #44]	; 0x2c
	/* Configure pad 3 for SCK */
	//config_spi_master.pinmux_pad3 = EXT1_SPI_SERCOM_PINMUX_PAD3;
	config_spi_master.pinmux_pad3 = EXT2_SPI_SERCOM_PINMUX_PAD3;
     3f4:	4b0f      	ldr	r3, [pc, #60]	; (434 <configure_spi_master+0xb0>)
     3f6:	6313      	str	r3, [r2, #48]	; 0x30
	//spi_init(&spi_master_instance, EXT1_SPI_MODULE, &config_spi_master);
	spi_init(&spi_master_instance, EXT2_SPI_MODULE, &config_spi_master);
     3f8:	4c0f      	ldr	r4, [pc, #60]	; (438 <configure_spi_master+0xb4>)
     3fa:	1c20      	adds	r0, r4, #0
     3fc:	490f      	ldr	r1, [pc, #60]	; (43c <configure_spi_master+0xb8>)
     3fe:	4b10      	ldr	r3, [pc, #64]	; (440 <configure_spi_master+0xbc>)
     400:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     402:	6822      	ldr	r2, [r4, #0]
#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
     404:	8a13      	ldrh	r3, [r2, #16]
     406:	0bdb      	lsrs	r3, r3, #15
     408:	03db      	lsls	r3, r3, #15

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
     40a:	b29b      	uxth	r3, r3
     40c:	2b00      	cmp	r3, #0
     40e:	d1f9      	bne.n	404 <configure_spi_master+0x80>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
     410:	6811      	ldr	r1, [r2, #0]
     412:	3302      	adds	r3, #2
     414:	430b      	orrs	r3, r1
     416:	6013      	str	r3, [r2, #0]
	spi_enable(&spi_master_instance);
}
     418:	b00e      	add	sp, #56	; 0x38
     41a:	bd10      	pop	{r4, pc}
     41c:	20000060 	.word	0x20000060
     420:	0000111d 	.word	0x0000111d
     424:	41004400 	.word	0x41004400
     428:	000186a0 	.word	0x000186a0
     42c:	00100002 	.word	0x00100002
     430:	00120002 	.word	0x00120002
     434:	00130002 	.word	0x00130002
     438:	20000058 	.word	0x20000058
     43c:	42000c00 	.word	0x42000c00
     440:	000007e1 	.word	0x000007e1

00000444 <Read_Register>:

	return(ReturnFlag);
}

unsigned char Read_Register(unsigned char RegisterNumber, unsigned char * RecieveArray, unsigned char NumOfBytesToRead)
{
     444:	b570      	push	{r4, r5, r6, lr}
     446:	b09a      	sub	sp, #104	; 0x68
     448:	1c0d      	adds	r5, r1, #0
     44a:	1c14      	adds	r4, r2, #0
	unsigned char ReturnFlag = 0;
	unsigned char TempSendArray[50];
	unsigned char TempReadArray[50];
	unsigned char Counter = 0;
	TempSendArray[0] = RegisterNumber;
     44c:	a90d      	add	r1, sp, #52	; 0x34
     44e:	7008      	strb	r0, [r1, #0]

	//DSPI_DRV_MasterTransferBlocking(FSL_DSPICOM1, NULL, &Send[0], Read, 5, 10000);
	//DSPI_DRV_MasterTransferBlocking(&spi_master_instance, TempSendArray, TempReadArray, NumOfBytesToRead + 1);
	DSPI_DRV_MasterTransferBlocking(&spi_master_instance, TempSendArray, TempReadArray, NumOfBytesToRead + 1);
     450:	1c53      	adds	r3, r2, #1
     452:	480a      	ldr	r0, [pc, #40]	; (47c <Read_Register+0x38>)
     454:	466a      	mov	r2, sp
     456:	4e0a      	ldr	r6, [pc, #40]	; (480 <Read_Register+0x3c>)
     458:	47b0      	blx	r6
	ReturnFlag = TempReadArray[0];
     45a:	466b      	mov	r3, sp
     45c:	7818      	ldrb	r0, [r3, #0]

	while(NumOfBytesToRead > Counter)
     45e:	2c00      	cmp	r4, #0
     460:	d00a      	beq.n	478 <Read_Register+0x34>
     462:	1e61      	subs	r1, r4, #1
     464:	b2c9      	uxtb	r1, r1
     466:	3101      	adds	r1, #1
     468:	2300      	movs	r3, #0
     46a:	1c1a      	adds	r2, r3, #0
     46c:	446a      	add	r2, sp
	{
		RecieveArray[Counter] = TempReadArray[Counter + 1];
     46e:	7852      	ldrb	r2, [r2, #1]
     470:	54ea      	strb	r2, [r5, r3]
     472:	3301      	adds	r3, #1
	//DSPI_DRV_MasterTransferBlocking(FSL_DSPICOM1, NULL, &Send[0], Read, 5, 10000);
	//DSPI_DRV_MasterTransferBlocking(&spi_master_instance, TempSendArray, TempReadArray, NumOfBytesToRead + 1);
	DSPI_DRV_MasterTransferBlocking(&spi_master_instance, TempSendArray, TempReadArray, NumOfBytesToRead + 1);
	ReturnFlag = TempReadArray[0];

	while(NumOfBytesToRead > Counter)
     474:	428b      	cmp	r3, r1
     476:	d1f8      	bne.n	46a <Read_Register+0x26>
		RecieveArray[Counter] = TempReadArray[Counter + 1];
		Counter++;
	}

	return (ReturnFlag);
}
     478:	b01a      	add	sp, #104	; 0x68
     47a:	bd70      	pop	{r4, r5, r6, pc}
     47c:	20000058 	.word	0x20000058
     480:	0000033d 	.word	0x0000033d

00000484 <Write_Register>:

unsigned char Write_Register(unsigned char RegisterNumber, unsigned char * SendArray, unsigned char * RecievedArray, unsigned char NumOfBytesToRead)
{
     484:	b570      	push	{r4, r5, r6, lr}
     486:	b09a      	sub	sp, #104	; 0x68
     488:	1c16      	adds	r6, r2, #0
	unsigned char ReturnFlag = 0;
	unsigned char TempSendArray[50];
	unsigned char TempReadArray[50];
	unsigned char Counter = 0;
	TempSendArray[0] = RegisterNumber + 0x20;
     48a:	3020      	adds	r0, #32
     48c:	aa0d      	add	r2, sp, #52	; 0x34
     48e:	7010      	strb	r0, [r2, #0]

	while(NumOfBytesToRead > Counter)
     490:	2b00      	cmp	r3, #0
     492:	d01d      	beq.n	4d0 <Write_Register+0x4c>
     494:	1e5c      	subs	r4, r3, #1
     496:	b2e4      	uxtb	r4, r4
     498:	3401      	adds	r4, #1
     49a:	2200      	movs	r2, #0
     49c:	a80d      	add	r0, sp, #52	; 0x34
     49e:	1880      	adds	r0, r0, r2
	{
		TempSendArray[Counter + 1] = SendArray[Counter];
     4a0:	5c8d      	ldrb	r5, [r1, r2]
     4a2:	7045      	strb	r5, [r0, #1]
     4a4:	3201      	adds	r2, #1
	unsigned char TempSendArray[50];
	unsigned char TempReadArray[50];
	unsigned char Counter = 0;
	TempSendArray[0] = RegisterNumber + 0x20;

	while(NumOfBytesToRead > Counter)
     4a6:	42a2      	cmp	r2, r4
     4a8:	d1f8      	bne.n	49c <Write_Register+0x18>
     4aa:	e007      	b.n	4bc <Write_Register+0x38>
     4ac:	1c1a      	adds	r2, r3, #0
     4ae:	446a      	add	r2, sp

	Counter = 0;

	while(NumOfBytesToRead > Counter)
	{
		RecievedArray[Counter] = TempReadArray[Counter + 1];
     4b0:	7852      	ldrb	r2, [r2, #1]
     4b2:	54f2      	strb	r2, [r6, r3]
     4b4:	3301      	adds	r3, #1
	DSPI_DRV_MasterTransferBlocking(&spi_master_instance, TempSendArray, TempReadArray, NumOfBytesToRead + 1);
	ReturnFlag = TempReadArray[0];

	Counter = 0;

	while(NumOfBytesToRead > Counter)
     4b6:	429c      	cmp	r4, r3
     4b8:	d1f8      	bne.n	4ac <Write_Register+0x28>
     4ba:	e011      	b.n	4e0 <Write_Register+0x5c>
	
	//enum status_code DSPI_DRV_MasterTransferBlocking(struct spi_module *const module,
	//												 uint8_t *tx_data, uint8_t *rx_data, uint16_t length)
	//DSPI_DRV_MasterTransferBlocking(&spi_master_instance, TempSendArray, TempReadArray, NumOfBytesToRead + 1);
	//DSPI_DRV_MasterTransferBlocking(FSL_DSPICOM1, NULL, &Send[0], Read, 5, 10000);
	DSPI_DRV_MasterTransferBlocking(&spi_master_instance, TempSendArray, TempReadArray, NumOfBytesToRead + 1);
     4bc:	3301      	adds	r3, #1
     4be:	4809      	ldr	r0, [pc, #36]	; (4e4 <Write_Register+0x60>)
     4c0:	a90d      	add	r1, sp, #52	; 0x34
     4c2:	466a      	mov	r2, sp
     4c4:	4d08      	ldr	r5, [pc, #32]	; (4e8 <Write_Register+0x64>)
     4c6:	47a8      	blx	r5
	ReturnFlag = TempReadArray[0];
     4c8:	466b      	mov	r3, sp
     4ca:	7818      	ldrb	r0, [r3, #0]
     4cc:	2300      	movs	r3, #0
     4ce:	e7ed      	b.n	4ac <Write_Register+0x28>
	
	//enum status_code DSPI_DRV_MasterTransferBlocking(struct spi_module *const module,
	//												 uint8_t *tx_data, uint8_t *rx_data, uint16_t length)
	//DSPI_DRV_MasterTransferBlocking(&spi_master_instance, TempSendArray, TempReadArray, NumOfBytesToRead + 1);
	//DSPI_DRV_MasterTransferBlocking(FSL_DSPICOM1, NULL, &Send[0], Read, 5, 10000);
	DSPI_DRV_MasterTransferBlocking(&spi_master_instance, TempSendArray, TempReadArray, NumOfBytesToRead + 1);
     4d0:	4804      	ldr	r0, [pc, #16]	; (4e4 <Write_Register+0x60>)
     4d2:	a90d      	add	r1, sp, #52	; 0x34
     4d4:	466a      	mov	r2, sp
     4d6:	2301      	movs	r3, #1
     4d8:	4c03      	ldr	r4, [pc, #12]	; (4e8 <Write_Register+0x64>)
     4da:	47a0      	blx	r4
	ReturnFlag = TempReadArray[0];
     4dc:	466b      	mov	r3, sp
     4de:	7818      	ldrb	r0, [r3, #0]
		RecievedArray[Counter] = TempReadArray[Counter + 1];
		Counter++;
	}

	return (ReturnFlag);
}
     4e0:	b01a      	add	sp, #104	; 0x68
     4e2:	bd70      	pop	{r4, r5, r6, pc}
     4e4:	20000058 	.word	0x20000058
     4e8:	0000033d 	.word	0x0000033d

000004ec <Write_Reg_Varified>:
	}
}


unsigned char Write_Reg_Varified(unsigned char RegisterNumber, unsigned char * SendArray, unsigned char NumOfBytesToRead)
{
     4ec:	b5f0      	push	{r4, r5, r6, r7, lr}
     4ee:	4657      	mov	r7, sl
     4f0:	b480      	push	{r7}
     4f2:	b086      	sub	sp, #24
	unsigned char ReturnFlag = 0;
	unsigned char TempValue = 0;
     4f4:	2400      	movs	r4, #0
     4f6:	230f      	movs	r3, #15
     4f8:	ad02      	add	r5, sp, #8
     4fa:	46ac      	mov	ip, r5
     4fc:	4463      	add	r3, ip
     4fe:	701c      	strb	r4, [r3, #0]
	unsigned char ReadArray[10];

	while(!(SendArray[0] == TempValue))
     500:	780b      	ldrb	r3, [r1, #0]
     502:	2b00      	cmp	r3, #0
     504:	d01d      	beq.n	542 <Write_Reg_Varified+0x56>
     506:	9201      	str	r2, [sp, #4]
     508:	1c0d      	adds	r5, r1, #0
     50a:	9000      	str	r0, [sp, #0]
	{
		Write_Register(RegisterNumber, SendArray, ReadArray, NumOfBytesToRead);
     50c:	4b0f      	ldr	r3, [pc, #60]	; (54c <Write_Reg_Varified+0x60>)
     50e:	469a      	mov	sl, r3
		//Delay_ms(10);
		(*Delay_ms)(100);
     510:	4f0f      	ldr	r7, [pc, #60]	; (550 <Write_Reg_Varified+0x64>)
		Read_Register(RegisterNumber, &TempValue, NumOfBytesToRead);
     512:	4e10      	ldr	r6, [pc, #64]	; (554 <Write_Reg_Varified+0x68>)
	unsigned char TempValue = 0;
	unsigned char ReadArray[10];

	while(!(SendArray[0] == TempValue))
	{
		Write_Register(RegisterNumber, SendArray, ReadArray, NumOfBytesToRead);
     514:	9800      	ldr	r0, [sp, #0]
     516:	1c29      	adds	r1, r5, #0
     518:	aa03      	add	r2, sp, #12
     51a:	9b01      	ldr	r3, [sp, #4]
     51c:	47d0      	blx	sl
		//Delay_ms(10);
		(*Delay_ms)(100);
     51e:	2064      	movs	r0, #100	; 0x64
     520:	683b      	ldr	r3, [r7, #0]
     522:	4798      	blx	r3
		Read_Register(RegisterNumber, &TempValue, NumOfBytesToRead);
     524:	240f      	movs	r4, #15
     526:	ab02      	add	r3, sp, #8
     528:	469c      	mov	ip, r3
     52a:	4464      	add	r4, ip
     52c:	9800      	ldr	r0, [sp, #0]
     52e:	1c21      	adds	r1, r4, #0
     530:	9a01      	ldr	r2, [sp, #4]
     532:	47b0      	blx	r6
		//Delay_ms(10);
		(*Delay_ms)(100);
     534:	2064      	movs	r0, #100	; 0x64
     536:	683b      	ldr	r3, [r7, #0]
     538:	4798      	blx	r3
{
	unsigned char ReturnFlag = 0;
	unsigned char TempValue = 0;
	unsigned char ReadArray[10];

	while(!(SendArray[0] == TempValue))
     53a:	782a      	ldrb	r2, [r5, #0]
     53c:	7823      	ldrb	r3, [r4, #0]
     53e:	429a      	cmp	r2, r3
     540:	d1e8      	bne.n	514 <Write_Reg_Varified+0x28>
		//Delay_ms(10);
		(*Delay_ms)(100);
	}

	return(ReturnFlag);
}
     542:	2000      	movs	r0, #0
     544:	b006      	add	sp, #24
     546:	bc04      	pop	{r2}
     548:	4692      	mov	sl, r2
     54a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     54c:	00000485 	.word	0x00000485
     550:	20000054 	.word	0x20000054
     554:	00000445 	.word	0x00000445

00000558 <Read_Status>:

	return (ReturnFlag);
}

unsigned char Read_Status()
{
     558:	b510      	push	{r4, lr}
     55a:	b082      	sub	sp, #8
	unsigned char ReturnFlag = 0;
	unsigned char ReadArray[2] = {0, 0};
     55c:	ac01      	add	r4, sp, #4
     55e:	2300      	movs	r3, #0
     560:	7023      	strb	r3, [r4, #0]
     562:	7063      	strb	r3, [r4, #1]
	//unsigned char Read_Register(unsigned char RegisterNumber, unsigned char * RecieveArray, unsigned char NumOfBytesToRead)
	Read_Register(0x07, ReadArray, 1);
     564:	2007      	movs	r0, #7
     566:	1c21      	adds	r1, r4, #0
     568:	2201      	movs	r2, #1
     56a:	4b02      	ldr	r3, [pc, #8]	; (574 <Read_Status+0x1c>)
     56c:	4798      	blx	r3
	ReturnFlag = ReadArray[0];
     56e:	7820      	ldrb	r0, [r4, #0]
	return (ReturnFlag);
}
     570:	b002      	add	sp, #8
     572:	bd10      	pop	{r4, pc}
     574:	00000445 	.word	0x00000445

00000578 <Clear_NRF_Int_Flags>:
	spi_enable(&spi_master_instance);
}


void Clear_NRF_Int_Flags(void)
{
     578:	b510      	push	{r4, lr}
     57a:	b082      	sub	sp, #8
	unsigned char SendArray[2] = {0, 0};
     57c:	ac01      	add	r4, sp, #4
     57e:	2300      	movs	r3, #0
     580:	7023      	strb	r3, [r4, #0]
     582:	7063      	strb	r3, [r4, #1]
	unsigned char ReadArray[2];
	unsigned char TempStatus = 0;
	TempStatus = Read_Status();
     584:	4b06      	ldr	r3, [pc, #24]	; (5a0 <Clear_NRF_Int_Flags+0x28>)
     586:	4798      	blx	r3
	SendArray[0] = TempStatus & 0xF0;
     588:	230f      	movs	r3, #15
     58a:	4398      	bics	r0, r3
     58c:	7020      	strb	r0, [r4, #0]
	Write_Register(7, SendArray, ReadArray, 1); //
     58e:	2007      	movs	r0, #7
     590:	1c21      	adds	r1, r4, #0
     592:	466a      	mov	r2, sp
     594:	3b0e      	subs	r3, #14
     596:	4c03      	ldr	r4, [pc, #12]	; (5a4 <Clear_NRF_Int_Flags+0x2c>)
     598:	47a0      	blx	r4
}
     59a:	b002      	add	sp, #8
     59c:	bd10      	pop	{r4, pc}
     59e:	46c0      	nop			; (mov r8, r8)
     5a0:	00000559 	.word	0x00000559
     5a4:	00000485 	.word	0x00000485

000005a8 <Flush_Tx>:

	return (ReturnFlag);
}

unsigned char Flush_Tx()
{
     5a8:	b530      	push	{r4, r5, lr}
     5aa:	b083      	sub	sp, #12
	unsigned char ReturnFlag = 0;
	unsigned char ReadArray[2] = {0, 0};
     5ac:	ac01      	add	r4, sp, #4
     5ae:	2300      	movs	r3, #0
     5b0:	7023      	strb	r3, [r4, #0]
     5b2:	7063      	strb	r3, [r4, #1]
	unsigned char SendArray[2] = {FLUSH_TX, 0};
     5b4:	22e1      	movs	r2, #225	; 0xe1
     5b6:	4669      	mov	r1, sp
     5b8:	700a      	strb	r2, [r1, #0]
     5ba:	704b      	strb	r3, [r1, #1]
	//DSPI_DRV_MasterTransferBlocking(&spi_master_instance, TempSendArray, TempReadArray, NumOfBytesToRead + 1);
	DSPI_DRV_MasterTransferBlocking(&spi_master_instance, SendArray, ReadArray, 1);
     5bc:	4803      	ldr	r0, [pc, #12]	; (5cc <Flush_Tx+0x24>)
     5be:	1c22      	adds	r2, r4, #0
     5c0:	3301      	adds	r3, #1
     5c2:	4d03      	ldr	r5, [pc, #12]	; (5d0 <Flush_Tx+0x28>)
     5c4:	47a8      	blx	r5
	ReturnFlag = ReadArray[0];
     5c6:	7820      	ldrb	r0, [r4, #0]
	return (ReturnFlag);
}
     5c8:	b003      	add	sp, #12
     5ca:	bd30      	pop	{r4, r5, pc}
     5cc:	20000058 	.word	0x20000058
     5d0:	0000033d 	.word	0x0000033d

000005d4 <Flush_Rx>:

unsigned char Flush_Rx()
{
     5d4:	b530      	push	{r4, r5, lr}
     5d6:	b083      	sub	sp, #12
	unsigned char ReturnFlag = 0;
	unsigned char ReadArray[2] = {0, 0};
     5d8:	ac01      	add	r4, sp, #4
     5da:	2300      	movs	r3, #0
     5dc:	7023      	strb	r3, [r4, #0]
     5de:	7063      	strb	r3, [r4, #1]
	unsigned char SendArray[2] = {FLUSH_RX, 0};
     5e0:	22e2      	movs	r2, #226	; 0xe2
     5e2:	4669      	mov	r1, sp
     5e4:	700a      	strb	r2, [r1, #0]
     5e6:	704b      	strb	r3, [r1, #1]
	//DSPI_DRV_MasterTransferBlocking(&spi_master_instance, TempSendArray, TempReadArray, NumOfBytesToRead + 1);
	DSPI_DRV_MasterTransferBlocking(&spi_master_instance, SendArray, ReadArray, 1);
     5e8:	4803      	ldr	r0, [pc, #12]	; (5f8 <Flush_Rx+0x24>)
     5ea:	1c22      	adds	r2, r4, #0
     5ec:	3301      	adds	r3, #1
     5ee:	4d03      	ldr	r5, [pc, #12]	; (5fc <Flush_Rx+0x28>)
     5f0:	47a8      	blx	r5
	ReturnFlag = ReadArray[0];
     5f2:	7820      	ldrb	r0, [r4, #0]
	return (ReturnFlag);
}
     5f4:	b003      	add	sp, #12
     5f6:	bd30      	pop	{r4, r5, pc}
     5f8:	20000058 	.word	0x20000058
     5fc:	0000033d 	.word	0x0000033d

00000600 <Set_NRF24L_Tx_Mode>:

	CE_ON;
}

void Set_NRF24L_Tx_Mode()
{
     600:	b510      	push	{r4, lr}
     602:	b084      	sub	sp, #16
	} else {
		port_base->OUTCLR.reg = pin_mask;
     604:	2280      	movs	r2, #128	; 0x80
     606:	0352      	lsls	r2, r2, #13
     608:	4b0f      	ldr	r3, [pc, #60]	; (648 <Set_NRF24L_Tx_Mode+0x48>)
     60a:	615a      	str	r2, [r3, #20]
	CE_OFF;
	//Delay_ms(100);
	(*Delay_ms)(100);
     60c:	4b0f      	ldr	r3, [pc, #60]	; (64c <Set_NRF24L_Tx_Mode+0x4c>)
     60e:	681b      	ldr	r3, [r3, #0]
     610:	2064      	movs	r0, #100	; 0x64
     612:	4798      	blx	r3
	unsigned char SendArray[10] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
     614:	ac01      	add	r4, sp, #4
     616:	2300      	movs	r3, #0
     618:	7023      	strb	r3, [r4, #0]
     61a:	7063      	strb	r3, [r4, #1]
     61c:	70a3      	strb	r3, [r4, #2]
     61e:	70e3      	strb	r3, [r4, #3]
     620:	7123      	strb	r3, [r4, #4]
     622:	7163      	strb	r3, [r4, #5]
     624:	71a3      	strb	r3, [r4, #6]
     626:	71e3      	strb	r3, [r4, #7]
     628:	7223      	strb	r3, [r4, #8]
     62a:	7263      	strb	r3, [r4, #9]

	Flush_Tx();
     62c:	4b08      	ldr	r3, [pc, #32]	; (650 <Set_NRF24L_Tx_Mode+0x50>)
     62e:	4798      	blx	r3
	Flush_Rx();
     630:	4b08      	ldr	r3, [pc, #32]	; (654 <Set_NRF24L_Tx_Mode+0x54>)
     632:	4798      	blx	r3

	SendArray[0] = 0x0E;
     634:	230e      	movs	r3, #14
     636:	7023      	strb	r3, [r4, #0]
	Write_Reg_Varified(0x00, SendArray, 1);
     638:	2000      	movs	r0, #0
     63a:	1c21      	adds	r1, r4, #0
     63c:	2201      	movs	r2, #1
     63e:	4b06      	ldr	r3, [pc, #24]	; (658 <Set_NRF24L_Tx_Mode+0x58>)
     640:	4798      	blx	r3
}
     642:	b004      	add	sp, #16
     644:	bd10      	pop	{r4, pc}
     646:	46c0      	nop			; (mov r8, r8)
     648:	41004400 	.word	0x41004400
     64c:	20000054 	.word	0x20000054
     650:	000005a9 	.word	0x000005a9
     654:	000005d5 	.word	0x000005d5
     658:	000004ed 	.word	0x000004ed

0000065c <Init_NRF24L_Reciever>:
	Write_Reg_Varified(0x00, SendArray, 1);
}


void Init_NRF24L_Reciever()
{
     65c:	b5f0      	push	{r4, r5, r6, r7, lr}
     65e:	465f      	mov	r7, fp
     660:	4656      	mov	r6, sl
     662:	464d      	mov	r5, r9
     664:	4644      	mov	r4, r8
     666:	b4f0      	push	{r4, r5, r6, r7}
     668:	b087      	sub	sp, #28
     66a:	2280      	movs	r2, #128	; 0x80
     66c:	0352      	lsls	r2, r2, #13
     66e:	4b34      	ldr	r3, [pc, #208]	; (740 <Init_NRF24L_Reciever+0xe4>)
     670:	615a      	str	r2, [r3, #20]

	//unsigned char TempValue = 0;

	CE_OFF;
	//Delay_ms(100);
	(*Delay_ms)(100);
     672:	4b34      	ldr	r3, [pc, #208]	; (744 <Init_NRF24L_Reciever+0xe8>)
     674:	681b      	ldr	r3, [r3, #0]
     676:	2064      	movs	r0, #100	; 0x64
     678:	4798      	blx	r3
	//Write_Register(unsigned char RegisterNumber, unsigned char * SendArray, unsigned char * RecievedArray, unsigned char NumOfBytesToRead)
	unsigned char SendArray[10] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
     67a:	ac03      	add	r4, sp, #12
     67c:	2500      	movs	r5, #0
     67e:	7065      	strb	r5, [r4, #1]
     680:	70a5      	strb	r5, [r4, #2]
     682:	70e5      	strb	r5, [r4, #3]
     684:	7125      	strb	r5, [r4, #4]
     686:	7165      	strb	r5, [r4, #5]
     688:	71a5      	strb	r5, [r4, #6]
     68a:	71e5      	strb	r5, [r4, #7]
     68c:	7225      	strb	r5, [r4, #8]
     68e:	7265      	strb	r5, [r4, #9]
	unsigned char ReadArray[10];


	SendArray[0] = 0x26; //TX not-power-up 2_byte_CRC EnableCRC
     690:	2326      	movs	r3, #38	; 0x26
     692:	7023      	strb	r3, [r4, #0]
	//
	//unsigned char Write_Reg_Varified(unsigned char RegisterNumber, unsigned char * SendArray, unsigned char NumOfBytesToRead)
	Write_Reg_Varified(6, SendArray, 1);
     694:	2006      	movs	r0, #6
     696:	1c21      	adds	r1, r4, #0
     698:	2201      	movs	r2, #1
     69a:	4e2b      	ldr	r6, [pc, #172]	; (748 <Init_NRF24L_Reciever+0xec>)
     69c:	47b0      	blx	r6

	SendArray[0] = 0x05;
     69e:	2305      	movs	r3, #5
     6a0:	7023      	strb	r3, [r4, #0]
	Write_Reg_Varified(0x11, SendArray, 1);
     6a2:	2011      	movs	r0, #17
     6a4:	1c21      	adds	r1, r4, #0
     6a6:	2201      	movs	r2, #1
     6a8:	47b0      	blx	r6

	SendArray[0] = 0x00;
     6aa:	7025      	strb	r5, [r4, #0]
	Write_Reg_Varified(0x05, SendArray, 1);
     6ac:	2005      	movs	r0, #5
     6ae:	1c21      	adds	r1, r4, #0
     6b0:	2201      	movs	r2, #1
     6b2:	47b0      	blx	r6

	SendArray[0] = 0x11;
     6b4:	2311      	movs	r3, #17
     6b6:	469b      	mov	fp, r3
     6b8:	7023      	strb	r3, [r4, #0]
	SendArray[1] = 0x22;
     6ba:	2322      	movs	r3, #34	; 0x22
     6bc:	469a      	mov	sl, r3
     6be:	7063      	strb	r3, [r4, #1]
	SendArray[2] = 0x33;
     6c0:	2333      	movs	r3, #51	; 0x33
     6c2:	4699      	mov	r9, r3
     6c4:	70a3      	strb	r3, [r4, #2]
	SendArray[3] = 0x44;
     6c6:	2344      	movs	r3, #68	; 0x44
     6c8:	4698      	mov	r8, r3
     6ca:	70e3      	strb	r3, [r4, #3]
	SendArray[4] = 0x55;
     6cc:	2755      	movs	r7, #85	; 0x55
     6ce:	7127      	strb	r7, [r4, #4]
	Write_Register(0x0A, SendArray, ReadArray, 5);
     6d0:	200a      	movs	r0, #10
     6d2:	1c21      	adds	r1, r4, #0
     6d4:	466a      	mov	r2, sp
     6d6:	2305      	movs	r3, #5
     6d8:	4d1c      	ldr	r5, [pc, #112]	; (74c <Init_NRF24L_Reciever+0xf0>)
     6da:	47a8      	blx	r5
	//Write_Reg_Varified(0x0A, SendArray, 5);

	SendArray[0] = 0x11;
     6dc:	465b      	mov	r3, fp
     6de:	7023      	strb	r3, [r4, #0]
	SendArray[1] = 0x22;
     6e0:	4653      	mov	r3, sl
     6e2:	7063      	strb	r3, [r4, #1]
	SendArray[2] = 0x33;
     6e4:	464b      	mov	r3, r9
     6e6:	70a3      	strb	r3, [r4, #2]
	SendArray[3] = 0x44;
     6e8:	4643      	mov	r3, r8
     6ea:	70e3      	strb	r3, [r4, #3]
	SendArray[4] = 0x55;
     6ec:	7127      	strb	r7, [r4, #4]
	Write_Register(0x10, SendArray, ReadArray, 5);
     6ee:	2010      	movs	r0, #16
     6f0:	1c21      	adds	r1, r4, #0
     6f2:	466a      	mov	r2, sp
     6f4:	2305      	movs	r3, #5
     6f6:	47a8      	blx	r5
	//Write_Reg_Varified(0x10, SendArray, 5);

	SendArray[0] = 0x01;
     6f8:	2501      	movs	r5, #1
     6fa:	7025      	strb	r5, [r4, #0]
	Write_Reg_Varified(0x02, SendArray, 1);
     6fc:	2002      	movs	r0, #2
     6fe:	1c21      	adds	r1, r4, #0
     700:	2201      	movs	r2, #1
     702:	47b0      	blx	r6

	Clear_NRF_Int_Flags();
     704:	4b12      	ldr	r3, [pc, #72]	; (750 <Init_NRF24L_Reciever+0xf4>)
     706:	4798      	blx	r3

	SendArray[0] = 0x01;
     708:	7025      	strb	r5, [r4, #0]
	Write_Reg_Varified(0x01, SendArray, 1);
     70a:	2001      	movs	r0, #1
     70c:	1c21      	adds	r1, r4, #0
     70e:	2201      	movs	r2, #1
     710:	47b0      	blx	r6

	SendArray[0] = 0x2F;
     712:	232f      	movs	r3, #47	; 0x2f
     714:	7023      	strb	r3, [r4, #0]
	Write_Reg_Varified(0x04, SendArray, 1);
     716:	2004      	movs	r0, #4
     718:	1c21      	adds	r1, r4, #0
     71a:	2201      	movs	r2, #1
     71c:	47b0      	blx	r6

	Flush_Tx();
     71e:	4b0d      	ldr	r3, [pc, #52]	; (754 <Init_NRF24L_Reciever+0xf8>)
     720:	4798      	blx	r3
	Flush_Rx();
     722:	4b0d      	ldr	r3, [pc, #52]	; (758 <Init_NRF24L_Reciever+0xfc>)
     724:	4798      	blx	r3

	SendArray[0] = 0x0F;
     726:	230f      	movs	r3, #15
     728:	7023      	strb	r3, [r4, #0]
	Write_Reg_Varified(0x00, SendArray, 1);
     72a:	2000      	movs	r0, #0
     72c:	1c21      	adds	r1, r4, #0
     72e:	2201      	movs	r2, #1
     730:	47b0      	blx	r6
}
     732:	b007      	add	sp, #28
     734:	bc3c      	pop	{r2, r3, r4, r5}
     736:	4690      	mov	r8, r2
     738:	4699      	mov	r9, r3
     73a:	46a2      	mov	sl, r4
     73c:	46ab      	mov	fp, r5
     73e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     740:	41004400 	.word	0x41004400
     744:	20000054 	.word	0x20000054
     748:	000004ed 	.word	0x000004ed
     74c:	00000485 	.word	0x00000485
     750:	00000579 	.word	0x00000579
     754:	000005a9 	.word	0x000005a9
     758:	000005d5 	.word	0x000005d5

0000075c <SendNewPayload>:

	return (ReturnFlag);
}

unsigned char SendNewPayload(unsigned char * PayloadArrayToSend, unsigned char NumberOfBytesToSend)
{
     75c:	b570      	push	{r4, r5, r6, lr}
     75e:	b0a0      	sub	sp, #128	; 0x80
     760:	1c05      	adds	r5, r0, #0
     762:	1c0e      	adds	r6, r1, #0
	unsigned char TempReadArray[50];
	unsigned char SendArray[10];
	unsigned char ReadArray[10];
	unsigned char Counter = 0;

	SendArray[0] = 0x0E; //TX not-power-up 2_byte_CRC EnableCRC
     764:	a903      	add	r1, sp, #12
     766:	230e      	movs	r3, #14
     768:	700b      	strb	r3, [r1, #0]
	Write_Register(0, SendArray, ReadArray, 1); // power up rf mod.
     76a:	2000      	movs	r0, #0
     76c:	466a      	mov	r2, sp
     76e:	3b0d      	subs	r3, #13
     770:	4c14      	ldr	r4, [pc, #80]	; (7c4 <SendNewPayload+0x68>)
     772:	47a0      	blx	r4
	Flush_Tx();
     774:	4b14      	ldr	r3, [pc, #80]	; (7c8 <SendNewPayload+0x6c>)
     776:	4798      	blx	r3
	Flush_Rx();
     778:	4b14      	ldr	r3, [pc, #80]	; (7cc <SendNewPayload+0x70>)
     77a:	4798      	blx	r3
	TempSendArray[0] = W_TX_PAYLOAD;
     77c:	22a0      	movs	r2, #160	; 0xa0
     77e:	ab13      	add	r3, sp, #76	; 0x4c
     780:	701a      	strb	r2, [r3, #0]

	while(NumberOfBytesToSend > Counter)
     782:	2e00      	cmp	r6, #0
     784:	d00a      	beq.n	79c <SendNewPayload+0x40>
     786:	1e74      	subs	r4, r6, #1
     788:	b2e4      	uxtb	r4, r4
     78a:	3401      	adds	r4, #1
     78c:	2200      	movs	r2, #0
     78e:	ab13      	add	r3, sp, #76	; 0x4c
     790:	1899      	adds	r1, r3, r2
	{
		TempSendArray[Counter + 1] = PayloadArrayToSend[Counter];
     792:	5ca8      	ldrb	r0, [r5, r2]
     794:	7048      	strb	r0, [r1, #1]
     796:	3201      	adds	r2, #1
	Write_Register(0, SendArray, ReadArray, 1); // power up rf mod.
	Flush_Tx();
	Flush_Rx();
	TempSendArray[0] = W_TX_PAYLOAD;

	while(NumberOfBytesToSend > Counter)
     798:	42a2      	cmp	r2, r4
     79a:	d1f8      	bne.n	78e <SendNewPayload+0x32>
		TempSendArray[Counter + 1] = PayloadArrayToSend[Counter];
		Counter++;
	}
	
	//DSPI_DRV_MasterTransferBlocking(&spi_master_instance, TempSendArray, TempReadArray, NumOfBytesToRead + 1);
	DSPI_DRV_MasterTransferBlocking(&spi_master_instance, TempSendArray, TempReadArray, NumberOfBytesToSend + 1);
     79c:	ac06      	add	r4, sp, #24
     79e:	1c73      	adds	r3, r6, #1
     7a0:	480b      	ldr	r0, [pc, #44]	; (7d0 <SendNewPayload+0x74>)
     7a2:	a913      	add	r1, sp, #76	; 0x4c
     7a4:	1c22      	adds	r2, r4, #0
     7a6:	4d0b      	ldr	r5, [pc, #44]	; (7d4 <SendNewPayload+0x78>)
     7a8:	47a8      	blx	r5
	ReturnFlag = TempReadArray[0];
     7aa:	7826      	ldrb	r6, [r4, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     7ac:	4c0a      	ldr	r4, [pc, #40]	; (7d8 <SendNewPayload+0x7c>)
     7ae:	2580      	movs	r5, #128	; 0x80
     7b0:	036d      	lsls	r5, r5, #13
     7b2:	61a5      	str	r5, [r4, #24]

	CE_ON;
	//Delay_ms(1);
	(*Delay_ms)(1);
     7b4:	4b09      	ldr	r3, [pc, #36]	; (7dc <SendNewPayload+0x80>)
     7b6:	681b      	ldr	r3, [r3, #0]
     7b8:	2001      	movs	r0, #1
     7ba:	4798      	blx	r3
	} else {
		port_base->OUTCLR.reg = pin_mask;
     7bc:	6165      	str	r5, [r4, #20]
	CE_OFF;

	return (ReturnFlag);
}
     7be:	1c30      	adds	r0, r6, #0
     7c0:	b020      	add	sp, #128	; 0x80
     7c2:	bd70      	pop	{r4, r5, r6, pc}
     7c4:	00000485 	.word	0x00000485
     7c8:	000005a9 	.word	0x000005a9
     7cc:	000005d5 	.word	0x000005d5
     7d0:	20000058 	.word	0x20000058
     7d4:	0000033d 	.word	0x0000033d
     7d8:	41004400 	.word	0x41004400
     7dc:	20000054 	.word	0x20000054

000007e0 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
     7e0:	b5f0      	push	{r4, r5, r6, r7, lr}
     7e2:	465f      	mov	r7, fp
     7e4:	4656      	mov	r6, sl
     7e6:	464d      	mov	r5, r9
     7e8:	4644      	mov	r4, r8
     7ea:	b4f0      	push	{r4, r5, r6, r7}
     7ec:	b089      	sub	sp, #36	; 0x24
     7ee:	4680      	mov	r8, r0
     7f0:	1c0d      	adds	r5, r1, #0
     7f2:	1c14      	adds	r4, r2, #0
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
     7f4:	1c03      	adds	r3, r0, #0
     7f6:	6019      	str	r1, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
     7f8:	680b      	ldr	r3, [r1, #0]
     7fa:	079b      	lsls	r3, r3, #30
     7fc:	d400      	bmi.n	800 <spi_init+0x20>
     7fe:	e09c      	b.n	93a <spi_init+0x15a>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
	Sercom *const hw = module->hw;

	uint32_t pad_pinmuxes[] = {
     800:	6a53      	ldr	r3, [r2, #36]	; 0x24
     802:	9303      	str	r3, [sp, #12]
     804:	6a93      	ldr	r3, [r2, #40]	; 0x28
     806:	9304      	str	r3, [sp, #16]
     808:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
     80a:	9305      	str	r3, [sp, #20]
     80c:	6b13      	ldr	r3, [r2, #48]	; 0x30
     80e:	9306      	str	r3, [sp, #24]
     810:	2700      	movs	r7, #0
 */
static inline uint8_t system_pinmux_pin_get_mux_position(
		const uint8_t gpio_pin)
{
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_index = (gpio_pin % 32);
     812:	231f      	movs	r3, #31
     814:	4699      	mov	r9, r3
     816:	b2f9      	uxtb	r1, r7
     818:	00bb      	lsls	r3, r7, #2
		config->pinmux_pad2, config->pinmux_pad3
	};

	/* Compare the current SERCOM pins against the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
     81a:	aa03      	add	r2, sp, #12
     81c:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
     81e:	2800      	cmp	r0, #0
     820:	d102      	bne.n	828 <spi_init+0x48>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     822:	1c28      	adds	r0, r5, #0
     824:	4ba0      	ldr	r3, [pc, #640]	; (aa8 <spi_init+0x2c8>)
     826:	4798      	blx	r3
		}

		if (current_pinmux == PINMUX_UNUSED) {
     828:	1c43      	adds	r3, r0, #1
     82a:	d028      	beq.n	87e <spi_init+0x9e>
			continue;
		}

		if ((current_pinmux & 0xFFFF) !=
     82c:	0401      	lsls	r1, r0, #16
     82e:	0c0b      	lsrs	r3, r1, #16
     830:	469b      	mov	fp, r3
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
     832:	0c00      	lsrs	r0, r0, #16
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     834:	b2c6      	uxtb	r6, r0
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     836:	2300      	movs	r3, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     838:	0602      	lsls	r2, r0, #24
     83a:	d404      	bmi.n	846 <spi_init+0x66>
		return &(ports[port_index]->Group[group_index]);
     83c:	0973      	lsrs	r3, r6, #5
     83e:	01db      	lsls	r3, r3, #7
     840:	4a9a      	ldr	r2, [pc, #616]	; (aac <spi_init+0x2cc>)
     842:	4694      	mov	ip, r2
     844:	4463      	add	r3, ip
 */
static inline uint8_t system_pinmux_pin_get_mux_position(
		const uint8_t gpio_pin)
{
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_index = (gpio_pin % 32);
     846:	464a      	mov	r2, r9
     848:	4032      	ands	r2, r6

	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
     84a:	1898      	adds	r0, r3, r2
     84c:	3040      	adds	r0, #64	; 0x40
     84e:	7800      	ldrb	r0, [r0, #0]
     850:	4682      	mov	sl, r0
		return SYSTEM_PINMUX_GPIO;
     852:	2080      	movs	r0, #128	; 0x80
		const uint8_t gpio_pin)
{
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_index = (gpio_pin % 32);

	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
     854:	4651      	mov	r1, sl
     856:	07c9      	lsls	r1, r1, #31
     858:	d50a      	bpl.n	870 <spi_init+0x90>
		return SYSTEM_PINMUX_GPIO;
	}

	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
     85a:	0852      	lsrs	r2, r2, #1
     85c:	189b      	adds	r3, r3, r2
     85e:	3330      	adds	r3, #48	; 0x30
     860:	7818      	ldrb	r0, [r3, #0]
     862:	b2c0      	uxtb	r0, r0

	if (pin_index & 1) {
     864:	07f3      	lsls	r3, r6, #31
     866:	d501      	bpl.n	86c <spi_init+0x8c>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
     868:	0900      	lsrs	r0, r0, #4
     86a:	e001      	b.n	870 <spi_init+0x90>
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
     86c:	230f      	movs	r3, #15
     86e:	4018      	ands	r0, r3

		if (current_pinmux == PINMUX_UNUSED) {
			continue;
		}

		if ((current_pinmux & 0xFFFF) !=
     870:	4583      	cmp	fp, r0
     872:	d004      	beq.n	87e <spi_init+0x9e>
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
			module->hw = NULL;
     874:	2300      	movs	r3, #0
     876:	4642      	mov	r2, r8
     878:	6013      	str	r3, [r2, #0]
			return STATUS_ERR_DENIED;
     87a:	201c      	movs	r0, #28
     87c:	e10c      	b.n	a98 <spi_init+0x2b8>
     87e:	3701      	adds	r7, #1
		config->pinmux_pad0, config->pinmux_pad1,
		config->pinmux_pad2, config->pinmux_pad3
	};

	/* Compare the current SERCOM pins against the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     880:	2f04      	cmp	r7, #4
     882:	d1c8      	bne.n	816 <spi_init+0x36>
	}

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to read BAUD register */
	uint16_t baud;
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
     884:	200c      	movs	r0, #12
     886:	4b8a      	ldr	r3, [pc, #552]	; (ab0 <spi_init+0x2d0>)
     888:	4798      	blx	r3
     88a:	1c01      	adds	r1, r0, #0
	uint32_t addr = 0;
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and compare it */
	if (config->mode == SPI_MODE_MASTER) {
     88c:	7822      	ldrb	r2, [r4, #0]
	/* Value to read BAUD register */
	uint16_t baud;
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
#  endif
	/* Value to read CTRLA, CTRLB and ADDR register */
	uint32_t ctrla = 0;
     88e:	2700      	movs	r7, #0
	uint32_t addr = 0;
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and compare it */
	if (config->mode == SPI_MODE_MASTER) {
     890:	2a01      	cmp	r2, #1
     892:	d111      	bne.n	8b8 <spi_init+0xd8>
		enum status_code error_code = _sercom_get_sync_baud_val(
     894:	6960      	ldr	r0, [r4, #20]
     896:	aa02      	add	r2, sp, #8
     898:	4b86      	ldr	r3, [pc, #536]	; (ab4 <spi_init+0x2d4>)
     89a:	4798      	blx	r3
     89c:	1c03      	adds	r3, r0, #0
				config->mode_specific.master.baudrate,
				external_clock, &baud);

		if (error_code != STATUS_OK) {
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
     89e:	2017      	movs	r0, #23
	if (config->mode == SPI_MODE_MASTER) {
		enum status_code error_code = _sercom_get_sync_baud_val(
				config->mode_specific.master.baudrate,
				external_clock, &baud);

		if (error_code != STATUS_OK) {
     8a0:	2b00      	cmp	r3, #0
     8a2:	d000      	beq.n	8a6 <spi_init+0xc6>
     8a4:	e0f8      	b.n	a98 <spi_init+0x2b8>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
		}

		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
     8a6:	7aab      	ldrb	r3, [r5, #10]
     8a8:	b2db      	uxtb	r3, r3
     8aa:	aa02      	add	r2, sp, #8
     8ac:	7812      	ldrb	r2, [r2, #0]
			return STATUS_ERR_DENIED;
     8ae:	3005      	adds	r0, #5
		if (error_code != STATUS_OK) {
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
		}

		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
     8b0:	429a      	cmp	r2, r3
     8b2:	d000      	beq.n	8b6 <spi_init+0xd6>
     8b4:	e0f0      	b.n	a98 <spi_init+0x2b8>
			return STATUS_ERR_DENIED;
		}

		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
     8b6:	370c      	adds	r7, #12
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
     8b8:	7826      	ldrb	r6, [r4, #0]
     8ba:	2e00      	cmp	r6, #0
     8bc:	d115      	bne.n	8ea <spi_init+0x10a>

		/* Set frame format */
		ctrla |= config->mode_specific.slave.frame_format;
     8be:	6963      	ldr	r3, [r4, #20]
     8c0:	469c      	mov	ip, r3

		/* Set address mode */
		ctrlb |= config->mode_specific.slave.address_mode;
     8c2:	8b22      	ldrh	r2, [r4, #24]

		/* Set address and address mask*/
		addr |= (config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
		if (spi_module->CTRLA.reg != addr) {
     8c4:	682b      	ldr	r3, [r5, #0]
		/* Set address mode */
		ctrlb |= config->mode_specific.slave.address_mode;

		/* Set address and address mask*/
		addr |= (config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
     8c6:	7ee1      	ldrb	r1, [r4, #27]
     8c8:	0409      	lsls	r1, r1, #16

		/* Set address mode */
		ctrlb |= config->mode_specific.slave.address_mode;

		/* Set address and address mask*/
		addr |= (config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
     8ca:	7ea0      	ldrb	r0, [r4, #26]
     8cc:	4301      	orrs	r1, r0
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
		if (spi_module->CTRLA.reg != addr) {
			return STATUS_ERR_DENIED;
     8ce:	201c      	movs	r0, #28
		ctrlb |= config->mode_specific.slave.address_mode;

		/* Set address and address mask*/
		addr |= (config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
		if (spi_module->CTRLA.reg != addr) {
     8d0:	4299      	cmp	r1, r3
     8d2:	d000      	beq.n	8d6 <spi_init+0xf6>
     8d4:	e0e0      	b.n	a98 <spi_init+0x2b8>
			return STATUS_ERR_DENIED;
		}

		if (config->mode_specific.slave.preload_enable) {
     8d6:	7f23      	ldrb	r3, [r4, #28]
     8d8:	2b00      	cmp	r3, #0
     8da:	d001      	beq.n	8e0 <spi_init+0x100>
			/* Enable pre-loading of shift register */
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
     8dc:	2340      	movs	r3, #64	; 0x40
     8de:	431a      	orrs	r2, r3
     8e0:	2308      	movs	r3, #8
     8e2:	4661      	mov	r1, ip
     8e4:	4319      	orrs	r1, r3
		}
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x2);
     8e6:	430f      	orrs	r7, r1
     8e8:	e000      	b.n	8ec <spi_init+0x10c>
	uint16_t baud;
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
#  endif
	/* Value to read CTRLA, CTRLB and ADDR register */
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
     8ea:	2200      	movs	r2, #0
     8ec:	68a3      	ldr	r3, [r4, #8]
     8ee:	6861      	ldr	r1, [r4, #4]
     8f0:	430b      	orrs	r3, r1
     8f2:	68e1      	ldr	r1, [r4, #12]
     8f4:	430b      	orrs	r3, r1

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;

	/* Set MUX setting */
	ctrla |= config->mux_setting;
     8f6:	433b      	orrs	r3, r7

	/* Set SPI character size */
	ctrlb |= config->character_size;
     8f8:	7c21      	ldrb	r1, [r4, #16]
     8fa:	430a      	orrs	r2, r1

	if (config->run_in_standby) {
     8fc:	7c61      	ldrb	r1, [r4, #17]
     8fe:	2900      	cmp	r1, #0
     900:	d001      	beq.n	906 <spi_init+0x126>
		/* Enable in sleep mode */
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
     902:	2180      	movs	r1, #128	; 0x80
     904:	430b      	orrs	r3, r1
	}

	if (config->receiver_enable) {
     906:	7ca1      	ldrb	r1, [r4, #18]
     908:	2900      	cmp	r1, #0
     90a:	d002      	beq.n	912 <spi_init+0x132>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
     90c:	2180      	movs	r1, #128	; 0x80
     90e:	0289      	lsls	r1, r1, #10
     910:	430a      	orrs	r2, r1
#  endif

	ctrla |= SERCOM_SPI_CTRLA_ENABLE;

	/* Check that same config is set */
	if (spi_module->CTRLA.reg == ctrla &&
     912:	6828      	ldr	r0, [r5, #0]
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
	}
#  endif

	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
     914:	2102      	movs	r1, #2
     916:	430b      	orrs	r3, r1

	/* Check that same config is set */
	if (spi_module->CTRLA.reg == ctrla &&
     918:	4283      	cmp	r3, r0
     91a:	d109      	bne.n	930 <spi_init+0x150>
			spi_module->CTRLB.reg == ctrlb) {
     91c:	686b      	ldr	r3, [r5, #4]
#  endif

	ctrla |= SERCOM_SPI_CTRLA_ENABLE;

	/* Check that same config is set */
	if (spi_module->CTRLA.reg == ctrla &&
     91e:	4293      	cmp	r3, r2
     920:	d106      	bne.n	930 <spi_init+0x150>
			spi_module->CTRLB.reg == ctrlb) {
		module->mode           = config->mode;
     922:	4643      	mov	r3, r8
     924:	715e      	strb	r6, [r3, #5]
		module->character_size = config->character_size;
     926:	7c23      	ldrb	r3, [r4, #16]
     928:	4642      	mov	r2, r8
     92a:	7193      	strb	r3, [r2, #6]
		return STATUS_OK;
     92c:	2000      	movs	r0, #0
     92e:	e0b3      	b.n	a98 <spi_init+0x2b8>
	}

	/* Not same config, wipe module pointer and return */
	module->hw = NULL;
     930:	2300      	movs	r3, #0
     932:	4642      	mov	r2, r8
     934:	6013      	str	r3, [r2, #0]

	return STATUS_ERR_DENIED;
     936:	201c      	movs	r0, #28
     938:	e0ae      	b.n	a98 <spi_init+0x2b8>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     93a:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
     93c:	2005      	movs	r0, #5
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     93e:	07db      	lsls	r3, r3, #31
     940:	d500      	bpl.n	944 <spi_init+0x164>
     942:	e0a9      	b.n	a98 <spi_init+0x2b8>
		return STATUS_BUSY;
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     944:	1c08      	adds	r0, r1, #0
     946:	4b5c      	ldr	r3, [pc, #368]	; (ab8 <spi_init+0x2d8>)
     948:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     94a:	495c      	ldr	r1, [pc, #368]	; (abc <spi_init+0x2dc>)
     94c:	6a0a      	ldr	r2, [r1, #32]
	}
#elif (SAMC20)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     94e:	1c86      	adds	r6, r0, #2
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     950:	2301      	movs	r3, #1
     952:	40b3      	lsls	r3, r6
     954:	4313      	orrs	r3, r2
     956:	620b      	str	r3, [r1, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     958:	a907      	add	r1, sp, #28
     95a:	2720      	movs	r7, #32
     95c:	5de3      	ldrb	r3, [r4, r7]
     95e:	700b      	strb	r3, [r1, #0]
#elif (SAMC20)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     960:	300d      	adds	r0, #13

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     962:	b2c6      	uxtb	r6, r0
     964:	1c30      	adds	r0, r6, #0
     966:	4b56      	ldr	r3, [pc, #344]	; (ac0 <spi_init+0x2e0>)
     968:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     96a:	1c30      	adds	r0, r6, #0
     96c:	4b55      	ldr	r3, [pc, #340]	; (ac4 <spi_init+0x2e4>)
     96e:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     970:	5de0      	ldrb	r0, [r4, r7]
     972:	2100      	movs	r1, #0
     974:	4b54      	ldr	r3, [pc, #336]	; (ac8 <spi_init+0x2e8>)
     976:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
     978:	7823      	ldrb	r3, [r4, #0]
     97a:	2b01      	cmp	r3, #1
     97c:	d103      	bne.n	986 <spi_init+0x1a6>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
     97e:	682a      	ldr	r2, [r5, #0]
     980:	330b      	adds	r3, #11
     982:	4313      	orrs	r3, r2
     984:	602b      	str	r3, [r5, #0]
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
     986:	7823      	ldrb	r3, [r4, #0]
     988:	2b00      	cmp	r3, #0
     98a:	d103      	bne.n	994 <spi_init+0x1b4>
		/* Set the SERCOM in SPI slave mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
     98c:	682a      	ldr	r2, [r5, #0]
     98e:	3308      	adds	r3, #8
     990:	4313      	orrs	r3, r2
     992:	602b      	str	r3, [r5, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     994:	4643      	mov	r3, r8
     996:	681e      	ldr	r6, [r3, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     998:	ab02      	add	r3, sp, #8
     99a:	2280      	movs	r2, #128	; 0x80
     99c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     99e:	2200      	movs	r2, #0
     9a0:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     9a2:	2101      	movs	r1, #1
     9a4:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
     9a6:	70da      	strb	r2, [r3, #3]
	Sercom *const hw = module->hw;

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
     9a8:	7823      	ldrb	r3, [r4, #0]
     9aa:	2b00      	cmp	r3, #0
     9ac:	d101      	bne.n	9b2 <spi_init+0x1d2>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     9ae:	ab02      	add	r3, sp, #8
     9b0:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
     9b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
     9b4:	9303      	str	r3, [sp, #12]
     9b6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     9b8:	9304      	str	r3, [sp, #16]
     9ba:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     9bc:	9305      	str	r3, [sp, #20]
     9be:	6b23      	ldr	r3, [r4, #48]	; 0x30
     9c0:	9306      	str	r3, [sp, #24]
     9c2:	2700      	movs	r7, #0
		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
		}

		if (current_pinmux != PINMUX_UNUSED) {
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     9c4:	ad02      	add	r5, sp, #8
     9c6:	b2f9      	uxtb	r1, r7
     9c8:	00bb      	lsls	r3, r7, #2
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
     9ca:	aa03      	add	r2, sp, #12
     9cc:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
     9ce:	2800      	cmp	r0, #0
     9d0:	d102      	bne.n	9d8 <spi_init+0x1f8>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     9d2:	1c30      	adds	r0, r6, #0
     9d4:	4b34      	ldr	r3, [pc, #208]	; (aa8 <spi_init+0x2c8>)
     9d6:	4798      	blx	r3
		}

		if (current_pinmux != PINMUX_UNUSED) {
     9d8:	1c43      	adds	r3, r0, #1
     9da:	d005      	beq.n	9e8 <spi_init+0x208>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     9dc:	7028      	strb	r0, [r5, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     9de:	0c00      	lsrs	r0, r0, #16
     9e0:	b2c0      	uxtb	r0, r0
     9e2:	1c29      	adds	r1, r5, #0
     9e4:	4b39      	ldr	r3, [pc, #228]	; (acc <spi_init+0x2ec>)
     9e6:	4798      	blx	r3
     9e8:	3701      	adds	r7, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     9ea:	2f04      	cmp	r7, #4
     9ec:	d1eb      	bne.n	9c6 <spi_init+0x1e6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
		}
	}

	module->mode             = config->mode;
     9ee:	7823      	ldrb	r3, [r4, #0]
     9f0:	4642      	mov	r2, r8
     9f2:	7153      	strb	r3, [r2, #5]
	module->character_size   = config->character_size;
     9f4:	7c23      	ldrb	r3, [r4, #16]
     9f6:	7193      	strb	r3, [r2, #6]
	module->receiver_enabled = config->receiver_enable;
     9f8:	7ca3      	ldrb	r3, [r4, #18]
     9fa:	71d3      	strb	r3, [r2, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
     9fc:	2200      	movs	r2, #0
     9fe:	466b      	mov	r3, sp
     a00:	80da      	strh	r2, [r3, #6]
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
     a02:	7823      	ldrb	r3, [r4, #0]
     a04:	2b01      	cmp	r3, #1
     a06:	d115      	bne.n	a34 <spi_init+0x254>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     a08:	4643      	mov	r3, r8
     a0a:	6818      	ldr	r0, [r3, #0]
     a0c:	4b2a      	ldr	r3, [pc, #168]	; (ab8 <spi_init+0x2d8>)
     a0e:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     a10:	300d      	adds	r0, #13
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
     a12:	b2c0      	uxtb	r0, r0
     a14:	4b26      	ldr	r3, [pc, #152]	; (ab0 <spi_init+0x2d0>)
     a16:	4798      	blx	r3
     a18:	1c01      	adds	r1, r0, #0

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
     a1a:	6960      	ldr	r0, [r4, #20]
     a1c:	466b      	mov	r3, sp
     a1e:	1d9a      	adds	r2, r3, #6
     a20:	4b24      	ldr	r3, [pc, #144]	; (ab4 <spi_init+0x2d4>)
     a22:	4798      	blx	r3
     a24:	1c03      	adds	r3, r0, #0
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
     a26:	2017      	movs	r0, #23
		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
     a28:	2b00      	cmp	r3, #0
     a2a:	d135      	bne.n	a98 <spi_init+0x2b8>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
		}

		spi_module->BAUD.reg = (uint8_t)baud;
     a2c:	466b      	mov	r3, sp
     a2e:	3306      	adds	r3, #6
     a30:	781b      	ldrb	r3, [r3, #0]
     a32:	72b3      	strb	r3, [r6, #10]
	}
# endif
# if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
     a34:	7823      	ldrb	r3, [r4, #0]
     a36:	2b00      	cmp	r3, #0
     a38:	d10e      	bne.n	a58 <spi_init+0x278>
		/* Set frame format */
		ctrla = config->mode_specific.slave.frame_format;
     a3a:	6961      	ldr	r1, [r4, #20]

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;
     a3c:	8b22      	ldrh	r2, [r4, #24]

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
     a3e:	6970      	ldr	r0, [r6, #20]
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
     a40:	7ee3      	ldrb	r3, [r4, #27]
     a42:	041b      	lsls	r3, r3, #16
		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
     a44:	7ea5      	ldrb	r5, [r4, #26]
     a46:	432b      	orrs	r3, r5

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
     a48:	4303      	orrs	r3, r0
     a4a:	6173      	str	r3, [r6, #20]
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);

		if (config->mode_specific.slave.preload_enable) {
     a4c:	7f23      	ldrb	r3, [r4, #28]
     a4e:	2b00      	cmp	r3, #0
     a50:	d004      	beq.n	a5c <spi_init+0x27c>
			/* Enable pre-loading of shift register */
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
     a52:	2340      	movs	r3, #64	; 0x40
     a54:	431a      	orrs	r2, r3
     a56:	e001      	b.n	a5c <spi_init+0x27c>
	uint16_t baud = 0;
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
     a58:	2200      	movs	r2, #0
#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
     a5a:	2100      	movs	r1, #0
     a5c:	68a3      	ldr	r3, [r4, #8]
     a5e:	6860      	ldr	r0, [r4, #4]
     a60:	4303      	orrs	r3, r0
     a62:	68e0      	ldr	r0, [r4, #12]
     a64:	4303      	orrs	r3, r0

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;

	/* Set MUX setting */
	ctrla |= config->mux_setting;
     a66:	430b      	orrs	r3, r1

	/* Set SPI character size */
	ctrlb |= config->character_size;
     a68:	7c21      	ldrb	r1, [r4, #16]
     a6a:	430a      	orrs	r2, r1

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     a6c:	7c61      	ldrb	r1, [r4, #17]
     a6e:	2900      	cmp	r1, #0
     a70:	d103      	bne.n	a7a <spi_init+0x29a>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     a72:	4917      	ldr	r1, [pc, #92]	; (ad0 <spi_init+0x2f0>)
     a74:	7889      	ldrb	r1, [r1, #2]
     a76:	0789      	lsls	r1, r1, #30
     a78:	d501      	bpl.n	a7e <spi_init+0x29e>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
     a7a:	2180      	movs	r1, #128	; 0x80
     a7c:	430b      	orrs	r3, r1
	}

	if (config->receiver_enable) {
     a7e:	7ca1      	ldrb	r1, [r4, #18]
     a80:	2900      	cmp	r1, #0
     a82:	d002      	beq.n	a8a <spi_init+0x2aa>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
     a84:	2180      	movs	r1, #128	; 0x80
     a86:	0289      	lsls	r1, r1, #10
     a88:	430a      	orrs	r2, r1
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
     a8a:	6831      	ldr	r1, [r6, #0]
     a8c:	430b      	orrs	r3, r1
     a8e:	6033      	str	r3, [r6, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
     a90:	6873      	ldr	r3, [r6, #4]
     a92:	431a      	orrs	r2, r3
     a94:	6072      	str	r2, [r6, #4]

	return STATUS_OK;
     a96:	2000      	movs	r0, #0
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
     a98:	b009      	add	sp, #36	; 0x24
     a9a:	bc3c      	pop	{r2, r3, r4, r5}
     a9c:	4690      	mov	r8, r2
     a9e:	4699      	mov	r9, r3
     aa0:	46a2      	mov	sl, r4
     aa2:	46ab      	mov	fp, r5
     aa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
     aa6:	46c0      	nop			; (mov r8, r8)
     aa8:	00000179 	.word	0x00000179
     aac:	41004400 	.word	0x41004400
     ab0:	00001885 	.word	0x00001885
     ab4:	00000105 	.word	0x00000105
     ab8:	00000301 	.word	0x00000301
     abc:	40000400 	.word	0x40000400
     ac0:	00001869 	.word	0x00001869
     ac4:	000017dd 	.word	0x000017dd
     ac8:	0000012d 	.word	0x0000012d
     acc:	00001961 	.word	0x00001961
     ad0:	41002000 	.word	0x41002000

00000ad4 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
     ad4:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
     ad6:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
     ad8:	2315      	movs	r3, #21
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
     ada:	2c01      	cmp	r4, #1
     adc:	d16c      	bne.n	bb8 <spi_select_slave+0xe4>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
#  endif
	{
		if (select) {
     ade:	2a00      	cmp	r2, #0
     ae0:	d05a      	beq.n	b98 <spi_select_slave+0xc4>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
     ae2:	784b      	ldrb	r3, [r1, #1]
     ae4:	2b00      	cmp	r3, #0
     ae6:	d046      	beq.n	b76 <spi_select_slave+0xa2>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     ae8:	6803      	ldr	r3, [r0, #0]
     aea:	7b9b      	ldrb	r3, [r3, #14]
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
     aec:	07db      	lsls	r3, r3, #31
     aee:	d410      	bmi.n	b12 <spi_select_slave+0x3e>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
     af0:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     af2:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     af4:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     af6:	2900      	cmp	r1, #0
     af8:	d104      	bne.n	b04 <spi_select_slave+0x30>
		return &(ports[port_index]->Group[group_index]);
     afa:	095a      	lsrs	r2, r3, #5
     afc:	01d2      	lsls	r2, r2, #7
     afe:	492f      	ldr	r1, [pc, #188]	; (bbc <spi_select_slave+0xe8>)
     b00:	468c      	mov	ip, r1
     b02:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     b04:	211f      	movs	r1, #31
     b06:	400b      	ands	r3, r1
     b08:	391e      	subs	r1, #30
     b0a:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     b0c:	6191      	str	r1, [r2, #24]
					return STATUS_BUSY;
     b0e:	2305      	movs	r3, #5
     b10:	e052      	b.n	bb8 <spi_select_slave+0xe4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
     b12:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     b14:	09dc      	lsrs	r4, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     b16:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     b18:	2c00      	cmp	r4, #0
     b1a:	d104      	bne.n	b26 <spi_select_slave+0x52>
		return &(ports[port_index]->Group[group_index]);
     b1c:	095a      	lsrs	r2, r3, #5
     b1e:	01d2      	lsls	r2, r2, #7
     b20:	4c26      	ldr	r4, [pc, #152]	; (bbc <spi_select_slave+0xe8>)
     b22:	46a4      	mov	ip, r4
     b24:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     b26:	241f      	movs	r4, #31
     b28:	4023      	ands	r3, r4
     b2a:	3c1e      	subs	r4, #30
     b2c:	409c      	lsls	r4, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     b2e:	6154      	str	r4, [r2, #20]

				/* Write address to slave */
				spi_write(module, slave->address);
     b30:	788a      	ldrb	r2, [r1, #2]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     b32:	6803      	ldr	r3, [r0, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     b34:	7b99      	ldrb	r1, [r3, #14]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     b36:	07c9      	lsls	r1, r1, #31
     b38:	d500      	bpl.n	b3c <spi_select_slave+0x68>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     b3a:	831a      	strh	r2, [r3, #24]

				if (!(module->receiver_enabled)) {
     b3c:	79c2      	ldrb	r2, [r0, #7]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
     b3e:	2300      	movs	r3, #0
				port_pin_set_output_level(slave->ss_pin, false);

				/* Write address to slave */
				spi_write(module, slave->address);

				if (!(module->receiver_enabled)) {
     b40:	2a00      	cmp	r2, #0
     b42:	d139      	bne.n	bb8 <spi_select_slave+0xe4>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     b44:	6802      	ldr	r2, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     b46:	2104      	movs	r1, #4
     b48:	7b93      	ldrb	r3, [r2, #14]
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
     b4a:	420b      	tst	r3, r1
     b4c:	d0fc      	beq.n	b48 <spi_select_slave+0x74>
     b4e:	7b91      	ldrb	r1, [r2, #14]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
     b50:	2300      	movs	r3, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
     b52:	0749      	lsls	r1, r1, #29
     b54:	d530      	bpl.n	bb8 <spi_select_slave+0xe4>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     b56:	8a13      	ldrh	r3, [r2, #16]
     b58:	075b      	lsls	r3, r3, #29
     b5a:	d503      	bpl.n	b64 <spi_select_slave+0x90>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
     b5c:	8a11      	ldrh	r1, [r2, #16]
     b5e:	2304      	movs	r3, #4
     b60:	430b      	orrs	r3, r1
     b62:	8213      	strh	r3, [r2, #16]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     b64:	7983      	ldrb	r3, [r0, #6]
     b66:	2b01      	cmp	r3, #1
     b68:	d102      	bne.n	b70 <spi_select_slave+0x9c>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     b6a:	8b13      	ldrh	r3, [r2, #24]
     b6c:	2300      	movs	r3, #0
     b6e:	e023      	b.n	bb8 <spi_select_slave+0xe4>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     b70:	8b13      	ldrh	r3, [r2, #24]
     b72:	2300      	movs	r3, #0
     b74:	e020      	b.n	bb8 <spi_select_slave+0xe4>
					uint16_t flush = 0;
					spi_read(module, &flush);
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
     b76:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     b78:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     b7a:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     b7c:	2900      	cmp	r1, #0
     b7e:	d104      	bne.n	b8a <spi_select_slave+0xb6>
		return &(ports[port_index]->Group[group_index]);
     b80:	095a      	lsrs	r2, r3, #5
     b82:	01d2      	lsls	r2, r2, #7
     b84:	490d      	ldr	r1, [pc, #52]	; (bbc <spi_select_slave+0xe8>)
     b86:	468c      	mov	ip, r1
     b88:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     b8a:	211f      	movs	r1, #31
     b8c:	400b      	ands	r3, r1
     b8e:	391e      	subs	r1, #30
     b90:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     b92:	6151      	str	r1, [r2, #20]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
     b94:	2300      	movs	r3, #0
     b96:	e00f      	b.n	bb8 <spi_select_slave+0xe4>
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
     b98:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     b9a:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     b9c:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     b9e:	2900      	cmp	r1, #0
     ba0:	d104      	bne.n	bac <spi_select_slave+0xd8>
		return &(ports[port_index]->Group[group_index]);
     ba2:	095a      	lsrs	r2, r3, #5
     ba4:	01d2      	lsls	r2, r2, #7
     ba6:	4905      	ldr	r1, [pc, #20]	; (bbc <spi_select_slave+0xe8>)
     ba8:	468c      	mov	ip, r1
     baa:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     bac:	211f      	movs	r1, #31
     bae:	400b      	ands	r3, r1
     bb0:	391e      	subs	r1, #30
     bb2:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     bb4:	6191      	str	r1, [r2, #24]
		}
	}
	return STATUS_OK;
     bb6:	2300      	movs	r3, #0
}
     bb8:	1c18      	adds	r0, r3, #0
     bba:	bd10      	pop	{r4, pc}
     bbc:	41004400 	.word	0x41004400

00000bc0 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
     bc0:	b5f0      	push	{r4, r5, r6, r7, lr}
     bc2:	465f      	mov	r7, fp
     bc4:	4656      	mov	r6, sl
     bc6:	464d      	mov	r5, r9
     bc8:	4644      	mov	r4, r8
     bca:	b4f0      	push	{r4, r5, r6, r7}
     bcc:	b083      	sub	sp, #12
		return STATUS_BUSY;
	}
#  endif

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     bce:	2317      	movs	r3, #23
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
	}
#  endif

	if (length == 0) {
     bd0:	2a00      	cmp	r2, #0
     bd2:	d100      	bne.n	bd6 <spi_write_buffer_wait+0x16>
     bd4:	e0ec      	b.n	db0 <spi_write_buffer_wait+0x1f0>
		return STATUS_ERR_INVALID_ARG;
	}

#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
     bd6:	7943      	ldrb	r3, [r0, #5]
     bd8:	2b00      	cmp	r3, #0
     bda:	d105      	bne.n	be8 <spi_write_buffer_wait+0x28>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     bdc:	6803      	ldr	r3, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     bde:	7b9c      	ldrb	r4, [r3, #14]
     be0:	07a4      	lsls	r4, r4, #30
     be2:	d501      	bpl.n	be8 <spi_write_buffer_wait+0x28>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     be4:	2402      	movs	r4, #2
     be6:	739c      	strb	r4, [r3, #14]
#  if CONF_SPI_SLAVE_ENABLE == true
			/* Start timeout period for slave */
			if (module->mode == SPI_MODE_SLAVE) {
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
					if (spi_is_ready_to_write(module)) {
						data_to_send = tx_data[tx_pos++];
     be8:	4693      	mov	fp, r2
     bea:	2400      	movs	r4, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     bec:	2301      	movs	r3, #1
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     bee:	2502      	movs	r5, #2
     bf0:	46ac      	mov	ip, r5
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     bf2:	3502      	adds	r5, #2
     bf4:	46a9      	mov	r9, r5
     bf6:	e08e      	b.n	d16 <spi_write_buffer_wait+0x156>

	/* Write block */
	while (length--) {
#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
     bf8:	7945      	ldrb	r5, [r0, #5]
     bfa:	2d00      	cmp	r5, #0
     bfc:	d117      	bne.n	c2e <spi_write_buffer_wait+0x6e>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     bfe:	6807      	ldr	r7, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     c00:	7bbd      	ldrb	r5, [r7, #14]
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
				if (spi_is_ready_to_write(module)) {
     c02:	421d      	tst	r5, r3
     c04:	d106      	bne.n	c14 <spi_write_buffer_wait+0x54>
     c06:	4d6e      	ldr	r5, [pc, #440]	; (dc0 <spi_write_buffer_wait+0x200>)
     c08:	7bbe      	ldrb	r6, [r7, #14]
     c0a:	421e      	tst	r6, r3
     c0c:	d102      	bne.n	c14 <spi_write_buffer_wait+0x54>
     c0e:	3d01      	subs	r5, #1
	/* Write block */
	while (length--) {
#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
     c10:	2d00      	cmp	r5, #0
     c12:	d1f9      	bne.n	c08 <spi_write_buffer_wait+0x48>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     c14:	6806      	ldr	r6, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     c16:	7bb5      	ldrb	r5, [r6, #14]
				if (spi_is_ready_to_write(module)) {
					break;
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
     c18:	4667      	mov	r7, ip
     c1a:	423d      	tst	r5, r7
     c1c:	d003      	beq.n	c26 <spi_write_buffer_wait+0x66>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     c1e:	2302      	movs	r3, #2
     c20:	73b3      	strb	r3, [r6, #14]
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
				_spi_clear_tx_complete_flag(module);
				return STATUS_ABORTED;
     c22:	3302      	adds	r3, #2
     c24:	e0c4      	b.n	db0 <spi_write_buffer_wait+0x1f0>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     c26:	7bb5      	ldrb	r5, [r6, #14]
			}

			if (!spi_is_ready_to_write(module)) {
     c28:	421d      	tst	r5, r3
     c2a:	d100      	bne.n	c2e <spi_write_buffer_wait+0x6e>
     c2c:	e0b7      	b.n	d9e <spi_write_buffer_wait+0x1de>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     c2e:	6806      	ldr	r6, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     c30:	7bb5      	ldrb	r5, [r6, #14]
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
     c32:	421d      	tst	r5, r3
     c34:	d0fc      	beq.n	c30 <spi_write_buffer_wait+0x70>
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
     c36:	1c65      	adds	r5, r4, #1
     c38:	b2ad      	uxth	r5, r5
     c3a:	46a8      	mov	r8, r5
     c3c:	5d0d      	ldrb	r5, [r1, r4]

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     c3e:	7987      	ldrb	r7, [r0, #6]
     c40:	2f01      	cmp	r7, #1
     c42:	d002      	beq.n	c4a <spi_write_buffer_wait+0x8a>
		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
     c44:	b2ad      	uxth	r5, r5
     c46:	4644      	mov	r4, r8
     c48:	e005      	b.n	c56 <spi_write_buffer_wait+0x96>

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
			data_to_send |= (tx_data[tx_pos++] << 8);
     c4a:	3402      	adds	r4, #2
     c4c:	b2a4      	uxth	r4, r4
     c4e:	4647      	mov	r7, r8
     c50:	5dcf      	ldrb	r7, [r1, r7]
     c52:	023f      	lsls	r7, r7, #8
     c54:	433d      	orrs	r5, r7
     c56:	7bb7      	ldrb	r7, [r6, #14]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     c58:	421f      	tst	r7, r3
     c5a:	d002      	beq.n	c62 <spi_write_buffer_wait+0xa2>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     c5c:	05ed      	lsls	r5, r5, #23
     c5e:	0ded      	lsrs	r5, r5, #23
     c60:	8335      	strh	r5, [r6, #24]
     c62:	1e55      	subs	r5, r2, #1
     c64:	b2ad      	uxth	r5, r5
		}

		/* Write the data to send */
		spi_write(module, data_to_send);

		if (module->receiver_enabled) {
     c66:	79c6      	ldrb	r6, [r0, #7]
     c68:	2e00      	cmp	r6, #0
     c6a:	d057      	beq.n	d1c <spi_write_buffer_wait+0x15c>
#  if CONF_SPI_SLAVE_ENABLE == true
			/* Start timeout period for slave */
			if (module->mode == SPI_MODE_SLAVE) {
     c6c:	7945      	ldrb	r5, [r0, #5]
     c6e:	2d00      	cmp	r5, #0
     c70:	d137      	bne.n	ce2 <spi_write_buffer_wait+0x122>
     c72:	4f54      	ldr	r7, [pc, #336]	; (dc4 <spi_write_buffer_wait+0x204>)
     c74:	9101      	str	r1, [sp, #4]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     c76:	6805      	ldr	r5, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     c78:	7bae      	ldrb	r6, [r5, #14]
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
					if (spi_is_ready_to_write(module)) {
     c7a:	421e      	tst	r6, r3
     c7c:	d01c      	beq.n	cb8 <spi_write_buffer_wait+0xf8>
						data_to_send = tx_data[tx_pos++];
     c7e:	1c66      	adds	r6, r4, #1
     c80:	b2b1      	uxth	r1, r6
     c82:	4688      	mov	r8, r1
     c84:	9901      	ldr	r1, [sp, #4]
     c86:	5d09      	ldrb	r1, [r1, r4]
     c88:	9100      	str	r1, [sp, #0]
						/* If 9-bit data, get next byte to send from the buffer */
						if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     c8a:	7981      	ldrb	r1, [r0, #6]
     c8c:	2901      	cmp	r1, #1
     c8e:	d003      	beq.n	c98 <spi_write_buffer_wait+0xd8>
#  if CONF_SPI_SLAVE_ENABLE == true
			/* Start timeout period for slave */
			if (module->mode == SPI_MODE_SLAVE) {
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
					if (spi_is_ready_to_write(module)) {
						data_to_send = tx_data[tx_pos++];
     c90:	4669      	mov	r1, sp
     c92:	880e      	ldrh	r6, [r1, #0]
     c94:	4644      	mov	r4, r8
     c96:	e007      	b.n	ca8 <spi_write_buffer_wait+0xe8>
						/* If 9-bit data, get next byte to send from the buffer */
						if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
							data_to_send |= (tx_data[tx_pos++] << 8);
     c98:	3402      	adds	r4, #2
     c9a:	b2a4      	uxth	r4, r4
     c9c:	4641      	mov	r1, r8
     c9e:	9e01      	ldr	r6, [sp, #4]
     ca0:	5c71      	ldrb	r1, [r6, r1]
     ca2:	0209      	lsls	r1, r1, #8
     ca4:	9e00      	ldr	r6, [sp, #0]
     ca6:	430e      	orrs	r6, r1
     ca8:	7ba9      	ldrb	r1, [r5, #14]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     caa:	4219      	tst	r1, r3
     cac:	d002      	beq.n	cb4 <spi_write_buffer_wait+0xf4>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     cae:	05f6      	lsls	r6, r6, #23
     cb0:	0df6      	lsrs	r6, r6, #23
     cb2:	832e      	strh	r6, [r5, #24]
						}

						/* Write the data to send */
						spi_write(module, data_to_send);
						length--;
     cb4:	3a01      	subs	r2, #1
     cb6:	b292      	uxth	r2, r2
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     cb8:	6806      	ldr	r6, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     cba:	7bb5      	ldrb	r5, [r6, #14]
					}
					if (spi_is_ready_to_read(module)) {
     cbc:	4649      	mov	r1, r9
     cbe:	420d      	tst	r5, r1
     cc0:	d102      	bne.n	cc8 <spi_write_buffer_wait+0x108>
     cc2:	3f01      	subs	r7, #1

		if (module->receiver_enabled) {
#  if CONF_SPI_SLAVE_ENABLE == true
			/* Start timeout period for slave */
			if (module->mode == SPI_MODE_SLAVE) {
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
     cc4:	2f00      	cmp	r7, #0
     cc6:	d1d6      	bne.n	c76 <spi_write_buffer_wait+0xb6>
     cc8:	9901      	ldr	r1, [sp, #4]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     cca:	7bb5      	ldrb	r5, [r6, #14]
						break;
					}
				}

				/* Check if master has ended the transaction */
				if (spi_is_write_complete(module)) {
     ccc:	4667      	mov	r7, ip
     cce:	423d      	tst	r5, r7
     cd0:	d003      	beq.n	cda <spi_write_buffer_wait+0x11a>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     cd2:	2302      	movs	r3, #2
     cd4:	73b3      	strb	r3, [r6, #14]
				}

				/* Check if master has ended the transaction */
				if (spi_is_write_complete(module)) {
					_spi_clear_tx_complete_flag(module);
					return STATUS_ABORTED;
     cd6:	3302      	adds	r3, #2
     cd8:	e06a      	b.n	db0 <spi_write_buffer_wait+0x1f0>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     cda:	7bb5      	ldrb	r5, [r6, #14]
				}

				if (!spi_is_ready_to_read(module)) {
     cdc:	464e      	mov	r6, r9
     cde:	4235      	tst	r5, r6
     ce0:	d05f      	beq.n	da2 <spi_write_buffer_wait+0x1e2>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     ce2:	6806      	ldr	r6, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     ce4:	7bb5      	ldrb	r5, [r6, #14]
					return STATUS_ERR_TIMEOUT;
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
     ce6:	464f      	mov	r7, r9
     ce8:	423d      	tst	r5, r7
     cea:	d0fb      	beq.n	ce4 <spi_write_buffer_wait+0x124>
     cec:	7bb5      	ldrb	r5, [r6, #14]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
     cee:	423d      	tst	r5, r7
     cf0:	d00d      	beq.n	d0e <spi_write_buffer_wait+0x14e>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     cf2:	8a35      	ldrh	r5, [r6, #16]
     cf4:	423d      	tst	r5, r7
     cf6:	d004      	beq.n	d02 <spi_write_buffer_wait+0x142>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
     cf8:	8a35      	ldrh	r5, [r6, #16]
     cfa:	2704      	movs	r7, #4
     cfc:	433d      	orrs	r5, r7
     cfe:	b2ad      	uxth	r5, r5
     d00:	8235      	strh	r5, [r6, #16]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     d02:	7985      	ldrb	r5, [r0, #6]
     d04:	2d01      	cmp	r5, #1
     d06:	d101      	bne.n	d0c <spi_write_buffer_wait+0x14c>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     d08:	8b35      	ldrh	r5, [r6, #24]
     d0a:	e000      	b.n	d0e <spi_write_buffer_wait+0x14e>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     d0c:	8b35      	ldrh	r5, [r6, #24]
			}

			/* Flush read buffer */
			uint16_t flush;
			spi_read(module, &flush);
			flush_length--;
     d0e:	465d      	mov	r5, fp
     d10:	3d01      	subs	r5, #1
     d12:	b2ad      	uxth	r5, r5
     d14:	46ab      	mov	fp, r5
     d16:	3a01      	subs	r2, #1
     d18:	b292      	uxth	r2, r2
     d1a:	e000      	b.n	d1e <spi_write_buffer_wait+0x15e>
		}

		/* Write the data to send */
		spi_write(module, data_to_send);

		if (module->receiver_enabled) {
     d1c:	1c2a      	adds	r2, r5, #0

	uint16_t tx_pos = 0;
	uint16_t flush_length = length;

	/* Write block */
	while (length--) {
     d1e:	4d2a      	ldr	r5, [pc, #168]	; (dc8 <spi_write_buffer_wait+0x208>)
     d20:	42aa      	cmp	r2, r5
     d22:	d000      	beq.n	d26 <spi_write_buffer_wait+0x166>
     d24:	e768      	b.n	bf8 <spi_write_buffer_wait+0x38>
     d26:	465a      	mov	r2, fp
			flush_length--;
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
     d28:	7943      	ldrb	r3, [r0, #5]
     d2a:	2b01      	cmp	r3, #1
     d2c:	d106      	bne.n	d3c <spi_write_buffer_wait+0x17c>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     d2e:	6801      	ldr	r1, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     d30:	2202      	movs	r2, #2
     d32:	7b8b      	ldrb	r3, [r1, #14]
		/* Wait for last byte to be transferred */
		while (!spi_is_write_complete(module)) {
     d34:	4213      	tst	r3, r2
     d36:	d0fc      	beq.n	d32 <spi_write_buffer_wait+0x172>
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
     d38:	2300      	movs	r3, #0
     d3a:	e039      	b.n	db0 <spi_write_buffer_wait+0x1f0>
		}
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
     d3c:	2b00      	cmp	r3, #0
     d3e:	d132      	bne.n	da6 <spi_write_buffer_wait+0x1e6>
		if (module->receiver_enabled) {
     d40:	79c1      	ldrb	r1, [r0, #7]
     d42:	2900      	cmp	r1, #0
     d44:	d034      	beq.n	db0 <spi_write_buffer_wait+0x1f0>
			while (flush_length) {
     d46:	2a00      	cmp	r2, #0
     d48:	d11f      	bne.n	d8a <spi_write_buffer_wait+0x1ca>
     d4a:	e031      	b.n	db0 <spi_write_buffer_wait+0x1f0>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     d4c:	7ba2      	ldrb	r2, [r4, #14]
				/* Start timeout period for slave */
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
					if (spi_is_ready_to_read(module)) {
     d4e:	420a      	tst	r2, r1
     d50:	d102      	bne.n	d58 <spi_write_buffer_wait+0x198>
     d52:	3b01      	subs	r3, #1
#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
		if (module->receiver_enabled) {
			while (flush_length) {
				/* Start timeout period for slave */
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
     d54:	2b00      	cmp	r3, #0
     d56:	d1f9      	bne.n	d4c <spi_write_buffer_wait+0x18c>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     d58:	6803      	ldr	r3, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     d5a:	7b9a      	ldrb	r2, [r3, #14]
					if (spi_is_ready_to_read(module)) {
						break;
					}
				}
				if (!spi_is_ready_to_read(module)) {
     d5c:	420a      	tst	r2, r1
     d5e:	d024      	beq.n	daa <spi_write_buffer_wait+0x1ea>
     d60:	7b9a      	ldrb	r2, [r3, #14]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
     d62:	420a      	tst	r2, r1
     d64:	d00c      	beq.n	d80 <spi_write_buffer_wait+0x1c0>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     d66:	8a1a      	ldrh	r2, [r3, #16]
     d68:	420a      	tst	r2, r1
     d6a:	d003      	beq.n	d74 <spi_write_buffer_wait+0x1b4>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
     d6c:	8a1a      	ldrh	r2, [r3, #16]
     d6e:	4332      	orrs	r2, r6
     d70:	b292      	uxth	r2, r2
     d72:	821a      	strh	r2, [r3, #16]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     d74:	7982      	ldrb	r2, [r0, #6]
     d76:	2a01      	cmp	r2, #1
     d78:	d101      	bne.n	d7e <spi_write_buffer_wait+0x1be>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     d7a:	8b1b      	ldrh	r3, [r3, #24]
     d7c:	e000      	b.n	d80 <spi_write_buffer_wait+0x1c0>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     d7e:	8b1b      	ldrh	r3, [r3, #24]
					return STATUS_ERR_TIMEOUT;
				}
				/* Flush read buffer */
				uint16_t flush;
				spi_read(module, &flush);
				flush_length--;
     d80:	3f01      	subs	r7, #1
     d82:	b2bf      	uxth	r7, r7
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
		if (module->receiver_enabled) {
			while (flush_length) {
     d84:	2f00      	cmp	r7, #0
     d86:	d104      	bne.n	d92 <spi_write_buffer_wait+0x1d2>
     d88:	e011      	b.n	dae <spi_write_buffer_wait+0x1ee>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     d8a:	2104      	movs	r1, #4
				/* Start timeout period for slave */
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
					if (spi_is_ready_to_read(module)) {
     d8c:	4d0c      	ldr	r5, [pc, #48]	; (dc0 <spi_write_buffer_wait+0x200>)

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
     d8e:	2604      	movs	r6, #4
     d90:	465f      	mov	r7, fp
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     d92:	6804      	ldr	r4, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     d94:	7ba3      	ldrb	r3, [r4, #14]
     d96:	420b      	tst	r3, r1
     d98:	d1de      	bne.n	d58 <spi_write_buffer_wait+0x198>
     d9a:	1c2b      	adds	r3, r5, #0
     d9c:	e7d6      	b.n	d4c <spi_write_buffer_wait+0x18c>
				return STATUS_ABORTED;
			}

			if (!spi_is_ready_to_write(module)) {
				/* Not ready to write data within timeout period */
				return STATUS_ERR_TIMEOUT;
     d9e:	2312      	movs	r3, #18
     da0:	e006      	b.n	db0 <spi_write_buffer_wait+0x1f0>
					return STATUS_ABORTED;
				}

				if (!spi_is_ready_to_read(module)) {
					/* Not ready to read data within timeout period */
					return STATUS_ERR_TIMEOUT;
     da2:	2312      	movs	r3, #18
     da4:	e004      	b.n	db0 <spi_write_buffer_wait+0x1f0>
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
     da6:	2300      	movs	r3, #0
     da8:	e002      	b.n	db0 <spi_write_buffer_wait+0x1f0>
						break;
					}
				}
				if (!spi_is_ready_to_read(module)) {
					/* Not ready to read data within timeout period */
					return STATUS_ERR_TIMEOUT;
     daa:	2312      	movs	r3, #18
     dac:	e000      	b.n	db0 <spi_write_buffer_wait+0x1f0>
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
     dae:	2300      	movs	r3, #0
}
     db0:	1c18      	adds	r0, r3, #0
     db2:	b003      	add	sp, #12
     db4:	bc3c      	pop	{r2, r3, r4, r5}
     db6:	4690      	mov	r8, r2
     db8:	4699      	mov	r9, r3
     dba:	46a2      	mov	sl, r4
     dbc:	46ab      	mov	fp, r5
     dbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
     dc0:	00002710 	.word	0x00002710
     dc4:	00002711 	.word	0x00002711
     dc8:	0000ffff 	.word	0x0000ffff

00000dcc <spi_transceive_buffer_wait>:
enum status_code spi_transceive_buffer_wait(
		struct spi_module *const module,
		uint8_t *tx_data,
		uint8_t *rx_data,
		uint16_t length)
{
     dcc:	b5f0      	push	{r4, r5, r6, r7, lr}
     dce:	465f      	mov	r7, fp
     dd0:	4656      	mov	r6, sl
     dd2:	464d      	mov	r5, r9
     dd4:	4644      	mov	r4, r8
     dd6:	b4f0      	push	{r4, r5, r6, r7}
     dd8:	b085      	sub	sp, #20
     dda:	4689      	mov	r9, r1
     ddc:	9203      	str	r2, [sp, #12]
     dde:	469a      	mov	sl, r3
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     de0:	2617      	movs	r6, #23
		return STATUS_BUSY;
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
     de2:	2b00      	cmp	r3, #0
     de4:	d100      	bne.n	de8 <spi_transceive_buffer_wait+0x1c>
     de6:	e138      	b.n	105a <spi_transceive_buffer_wait+0x28e>
		return STATUS_ERR_INVALID_ARG;
	}

	if (!(module->receiver_enabled)) {
     de8:	79c3      	ldrb	r3, [r0, #7]
		return STATUS_ERR_DENIED;
     dea:	3605      	adds	r6, #5
	/* Sanity check arguments */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
	}

	if (!(module->receiver_enabled)) {
     dec:	2b00      	cmp	r3, #0
     dee:	d100      	bne.n	df2 <spi_transceive_buffer_wait+0x26>
     df0:	e133      	b.n	105a <spi_transceive_buffer_wait+0x28e>
		return STATUS_ERR_DENIED;
	}

#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
     df2:	7943      	ldrb	r3, [r0, #5]
     df4:	2b00      	cmp	r3, #0
     df6:	d105      	bne.n	e04 <spi_transceive_buffer_wait+0x38>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     df8:	6803      	ldr	r3, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     dfa:	7b9a      	ldrb	r2, [r3, #14]
     dfc:	0792      	lsls	r2, r2, #30
     dfe:	d501      	bpl.n	e04 <spi_transceive_buffer_wait+0x38>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     e00:	2202      	movs	r2, #2
     e02:	739a      	strb	r2, [r3, #14]
	uint16_t tx_pos = 0;
	uint16_t rx_pos = 0;
	uint16_t rx_length = length;

	/* Send and receive buffer */
	while (length--) {
     e04:	4653      	mov	r3, sl
     e06:	1e5f      	subs	r7, r3, #1
     e08:	b2bf      	uxth	r7, r7
     e0a:	2300      	movs	r3, #0
     e0c:	469b      	mov	fp, r3
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     e0e:	2201      	movs	r2, #1
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     e10:	2104      	movs	r1, #4
#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
     e12:	7944      	ldrb	r4, [r0, #5]
     e14:	2c00      	cmp	r4, #0
     e16:	d117      	bne.n	e48 <spi_transceive_buffer_wait+0x7c>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     e18:	6806      	ldr	r6, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     e1a:	7bb4      	ldrb	r4, [r6, #14]
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
				if (spi_is_ready_to_write(module)) {
     e1c:	4214      	tst	r4, r2
     e1e:	d106      	bne.n	e2e <spi_transceive_buffer_wait+0x62>
     e20:	4c92      	ldr	r4, [pc, #584]	; (106c <spi_transceive_buffer_wait+0x2a0>)
     e22:	7bb5      	ldrb	r5, [r6, #14]
     e24:	4215      	tst	r5, r2
     e26:	d102      	bne.n	e2e <spi_transceive_buffer_wait+0x62>
     e28:	3c01      	subs	r4, #1
	/* Send and receive buffer */
	while (length--) {
#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
     e2a:	2c00      	cmp	r4, #0
     e2c:	d1f9      	bne.n	e22 <spi_transceive_buffer_wait+0x56>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     e2e:	6804      	ldr	r4, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     e30:	7ba5      	ldrb	r5, [r4, #14]
				if (spi_is_ready_to_write(module)) {
					break;
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
     e32:	2602      	movs	r6, #2
     e34:	4235      	tst	r5, r6
     e36:	d003      	beq.n	e40 <spi_transceive_buffer_wait+0x74>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     e38:	2302      	movs	r3, #2
     e3a:	73a3      	strb	r3, [r4, #14]
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
				_spi_clear_tx_complete_flag(module);
				return STATUS_ABORTED;
     e3c:	3602      	adds	r6, #2
     e3e:	e10c      	b.n	105a <spi_transceive_buffer_wait+0x28e>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     e40:	7ba4      	ldrb	r4, [r4, #14]
			}

			if (!spi_is_ready_to_write(module)) {
     e42:	4214      	tst	r4, r2
     e44:	d100      	bne.n	e48 <spi_transceive_buffer_wait+0x7c>
     e46:	e0f8      	b.n	103a <spi_transceive_buffer_wait+0x26e>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     e48:	6805      	ldr	r5, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     e4a:	7bac      	ldrb	r4, [r5, #14]
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
     e4c:	4214      	tst	r4, r2
     e4e:	d0fc      	beq.n	e4a <spi_transceive_buffer_wait+0x7e>
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
     e50:	1c5e      	adds	r6, r3, #1
     e52:	b2b6      	uxth	r6, r6
     e54:	464c      	mov	r4, r9
     e56:	5ce4      	ldrb	r4, [r4, r3]
     e58:	46a0      	mov	r8, r4

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     e5a:	7984      	ldrb	r4, [r0, #6]
     e5c:	2c01      	cmp	r4, #1
     e5e:	d005      	beq.n	e6c <spi_transceive_buffer_wait+0xa0>
		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
     e60:	4643      	mov	r3, r8
     e62:	466c      	mov	r4, sp
     e64:	80a3      	strh	r3, [r4, #4]
     e66:	88a4      	ldrh	r4, [r4, #4]
     e68:	1c33      	adds	r3, r6, #0
     e6a:	e006      	b.n	e7a <spi_transceive_buffer_wait+0xae>

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
			data_to_send |= (tx_data[tx_pos++] << 8);
     e6c:	3302      	adds	r3, #2
     e6e:	b29b      	uxth	r3, r3
     e70:	464c      	mov	r4, r9
     e72:	5da6      	ldrb	r6, [r4, r6]
     e74:	0236      	lsls	r6, r6, #8
     e76:	4644      	mov	r4, r8
     e78:	4334      	orrs	r4, r6
     e7a:	7bae      	ldrb	r6, [r5, #14]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     e7c:	4216      	tst	r6, r2
     e7e:	d100      	bne.n	e82 <spi_transceive_buffer_wait+0xb6>
     e80:	e0e5      	b.n	104e <spi_transceive_buffer_wait+0x282>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     e82:	05e4      	lsls	r4, r4, #23
     e84:	0de4      	lsrs	r4, r4, #23
     e86:	832c      	strh	r4, [r5, #24]
     e88:	e0e1      	b.n	104e <spi_transceive_buffer_wait+0x282>
		/* Write the data to send */
		spi_write(module, data_to_send);

#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
     e8a:	4d79      	ldr	r5, [pc, #484]	; (1070 <spi_transceive_buffer_wait+0x2a4>)
     e8c:	9701      	str	r7, [sp, #4]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     e8e:	6804      	ldr	r4, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     e90:	7ba6      	ldrb	r6, [r4, #14]
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
				if (spi_is_ready_to_write(module)) {
     e92:	4216      	tst	r6, r2
     e94:	d01e      	beq.n	ed4 <spi_transceive_buffer_wait+0x108>
					data_to_send = tx_data[tx_pos++];
     e96:	1c5e      	adds	r6, r3, #1
     e98:	b2b6      	uxth	r6, r6
     e9a:	46b4      	mov	ip, r6
     e9c:	464e      	mov	r6, r9
     e9e:	5cf6      	ldrb	r6, [r6, r3]
     ea0:	9602      	str	r6, [sp, #8]
					/* If 9-bit data, get next byte to send from the buffer */
					if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     ea2:	7987      	ldrb	r7, [r0, #6]
     ea4:	2f01      	cmp	r7, #1
     ea6:	d002      	beq.n	eae <spi_transceive_buffer_wait+0xe2>
#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
				if (spi_is_ready_to_write(module)) {
					data_to_send = tx_data[tx_pos++];
     ea8:	b2b6      	uxth	r6, r6
     eaa:	4663      	mov	r3, ip
     eac:	e008      	b.n	ec0 <spi_transceive_buffer_wait+0xf4>
					/* If 9-bit data, get next byte to send from the buffer */
					if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
						data_to_send |= (tx_data[tx_pos++] << 8);
     eae:	3302      	adds	r3, #2
     eb0:	b29b      	uxth	r3, r3
     eb2:	464f      	mov	r7, r9
     eb4:	4666      	mov	r6, ip
     eb6:	5dbe      	ldrb	r6, [r7, r6]
     eb8:	0236      	lsls	r6, r6, #8
     eba:	9f02      	ldr	r7, [sp, #8]
     ebc:	4337      	orrs	r7, r6
     ebe:	1c3e      	adds	r6, r7, #0
     ec0:	7ba7      	ldrb	r7, [r4, #14]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     ec2:	4217      	tst	r7, r2
     ec4:	d002      	beq.n	ecc <spi_transceive_buffer_wait+0x100>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     ec6:	05f6      	lsls	r6, r6, #23
     ec8:	0df6      	lsrs	r6, r6, #23
     eca:	8326      	strh	r6, [r4, #24]
					}

					/* Write the data to send */
					spi_write(module, data_to_send);
					length--;
     ecc:	9f01      	ldr	r7, [sp, #4]
     ece:	3f01      	subs	r7, #1
     ed0:	b2bc      	uxth	r4, r7
     ed2:	9401      	str	r4, [sp, #4]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     ed4:	6804      	ldr	r4, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     ed6:	7ba6      	ldrb	r6, [r4, #14]
				}
				if (spi_is_ready_to_read(module)) {
     ed8:	420e      	tst	r6, r1
     eda:	d102      	bne.n	ee2 <spi_transceive_buffer_wait+0x116>
     edc:	3d01      	subs	r5, #1
		spi_write(module, data_to_send);

#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
     ede:	2d00      	cmp	r5, #0
     ee0:	d1d5      	bne.n	e8e <spi_transceive_buffer_wait+0xc2>
     ee2:	9f01      	ldr	r7, [sp, #4]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     ee4:	7ba5      	ldrb	r5, [r4, #14]
				if (spi_is_ready_to_read(module)) {
					break;
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
     ee6:	2602      	movs	r6, #2
     ee8:	4235      	tst	r5, r6
     eea:	d003      	beq.n	ef4 <spi_transceive_buffer_wait+0x128>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     eec:	2302      	movs	r3, #2
     eee:	73a3      	strb	r3, [r4, #14]
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
				_spi_clear_tx_complete_flag(module);
				return STATUS_ABORTED;
     ef0:	3602      	adds	r6, #2
     ef2:	e0b2      	b.n	105a <spi_transceive_buffer_wait+0x28e>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     ef4:	7ba4      	ldrb	r4, [r4, #14]
			}

			if (!spi_is_ready_to_read(module)) {
     ef6:	420c      	tst	r4, r1
     ef8:	d100      	bne.n	efc <spi_transceive_buffer_wait+0x130>
     efa:	e0a0      	b.n	103e <spi_transceive_buffer_wait+0x272>
     efc:	1c3e      	adds	r6, r7, #0
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     efe:	6805      	ldr	r5, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     f00:	7bac      	ldrb	r4, [r5, #14]
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
     f02:	420c      	tst	r4, r1
     f04:	d0fc      	beq.n	f00 <spi_transceive_buffer_wait+0x134>
		}

		enum status_code retval;
		uint16_t received_data = 0;
		rx_length--;
     f06:	4654      	mov	r4, sl
     f08:	3c01      	subs	r4, #1
     f0a:	b2a4      	uxth	r4, r4
     f0c:	46a2      	mov	sl, r4
     f0e:	7bac      	ldrb	r4, [r5, #14]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
     f10:	420c      	tst	r4, r1
     f12:	d017      	beq.n	f44 <spi_transceive_buffer_wait+0x178>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     f14:	8a2f      	ldrh	r7, [r5, #16]
		/* No data has been received, return */
		return STATUS_ERR_IO;
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
     f16:	2400      	movs	r4, #0

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     f18:	420f      	tst	r7, r1
     f1a:	d005      	beq.n	f28 <spi_transceive_buffer_wait+0x15c>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
     f1c:	8a2c      	ldrh	r4, [r5, #16]
     f1e:	2704      	movs	r7, #4
     f20:	433c      	orrs	r4, r7
     f22:	b2a4      	uxth	r4, r4
     f24:	822c      	strh	r4, [r5, #16]
	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
     f26:	241e      	movs	r4, #30
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     f28:	7987      	ldrb	r7, [r0, #6]
     f2a:	2f01      	cmp	r7, #1
     f2c:	d103      	bne.n	f36 <spi_transceive_buffer_wait+0x16a>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     f2e:	8b2d      	ldrh	r5, [r5, #24]
     f30:	05ed      	lsls	r5, r5, #23
     f32:	0ded      	lsrs	r5, r5, #23
     f34:	e002      	b.n	f3c <spi_transceive_buffer_wait+0x170>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     f36:	8b2f      	ldrh	r7, [r5, #24]
     f38:	25ff      	movs	r5, #255	; 0xff
     f3a:	403d      	ands	r5, r7

		retval = spi_read(module, &received_data);

		if (retval != STATUS_OK) {
     f3c:	2c00      	cmp	r4, #0
     f3e:	d003      	beq.n	f48 <spi_transceive_buffer_wait+0x17c>
     f40:	1c26      	adds	r6, r4, #0
     f42:	e08a      	b.n	105a <spi_transceive_buffer_wait+0x28e>
	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
		/* No data has been received, return */
		return STATUS_ERR_IO;
     f44:	2610      	movs	r6, #16
			/* Overflow, abort */
			return retval;
     f46:	e088      	b.n	105a <spi_transceive_buffer_wait+0x28e>
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
     f48:	465c      	mov	r4, fp
     f4a:	3401      	adds	r4, #1
     f4c:	b2a4      	uxth	r4, r4
     f4e:	46a4      	mov	ip, r4
     f50:	9f03      	ldr	r7, [sp, #12]
     f52:	465c      	mov	r4, fp
     f54:	553d      	strb	r5, [r7, r4]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     f56:	7987      	ldrb	r7, [r0, #6]
     f58:	2f01      	cmp	r7, #1
     f5a:	d108      	bne.n	f6e <spi_transceive_buffer_wait+0x1a2>
			rx_data[rx_pos++] = (received_data >> 8);
     f5c:	465f      	mov	r7, fp
     f5e:	3702      	adds	r7, #2
     f60:	b2bc      	uxth	r4, r7
     f62:	46a3      	mov	fp, r4
     f64:	0a2d      	lsrs	r5, r5, #8
     f66:	9c03      	ldr	r4, [sp, #12]
     f68:	4667      	mov	r7, ip
     f6a:	55e5      	strb	r5, [r4, r7]
     f6c:	e000      	b.n	f70 <spi_transceive_buffer_wait+0x1a4>
			/* Overflow, abort */
			return retval;
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
     f6e:	46e3      	mov	fp, ip
	uint16_t tx_pos = 0;
	uint16_t rx_pos = 0;
	uint16_t rx_length = length;

	/* Send and receive buffer */
	while (length--) {
     f70:	1e77      	subs	r7, r6, #1
     f72:	b2bf      	uxth	r7, r7
     f74:	2e00      	cmp	r6, #0
     f76:	d000      	beq.n	f7a <spi_transceive_buffer_wait+0x1ae>
     f78:	e74b      	b.n	e12 <spi_transceive_buffer_wait+0x46>
		while (!spi_is_ready_to_read(module)) {
		}

		enum status_code retval;
		uint16_t received_data = 0;
		rx_length--;
     f7a:	4652      	mov	r2, sl
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
     f7c:	7943      	ldrb	r3, [r0, #5]
     f7e:	2b01      	cmp	r3, #1
     f80:	d106      	bne.n	f90 <spi_transceive_buffer_wait+0x1c4>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     f82:	6801      	ldr	r1, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     f84:	2202      	movs	r2, #2
     f86:	7b8b      	ldrb	r3, [r1, #14]
		/* Wait for last byte to be transferred */
		while (!spi_is_write_complete(module)) {
     f88:	4213      	tst	r3, r2
     f8a:	d0fc      	beq.n	f86 <spi_transceive_buffer_wait+0x1ba>
				rx_data[rx_pos++] = (received_data >> 8);
			}
		}
	}
#  endif
	return STATUS_OK;
     f8c:	2600      	movs	r6, #0
     f8e:	e064      	b.n	105a <spi_transceive_buffer_wait+0x28e>
		}
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
     f90:	2b00      	cmp	r3, #0
     f92:	d156      	bne.n	1042 <spi_transceive_buffer_wait+0x276>
				rx_data[rx_pos++] = (received_data >> 8);
			}
		}
	}
#  endif
	return STATUS_OK;
     f94:	2600      	movs	r6, #0
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
		while (rx_length) {
     f96:	2a00      	cmp	r2, #0
     f98:	d05f      	beq.n	105a <spi_transceive_buffer_wait+0x28e>
     f9a:	e03e      	b.n	101a <spi_transceive_buffer_wait+0x24e>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     f9c:	7bb5      	ldrb	r5, [r6, #14]
			/* Start timeout period for slave */
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
				if (spi_is_ready_to_read(module)) {
     f9e:	423d      	tst	r5, r7
     fa0:	d102      	bne.n	fa8 <spi_transceive_buffer_wait+0x1dc>
     fa2:	3b01      	subs	r3, #1

#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
		while (rx_length) {
			/* Start timeout period for slave */
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
     fa4:	2b00      	cmp	r3, #0
     fa6:	d1f9      	bne.n	f9c <spi_transceive_buffer_wait+0x1d0>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     fa8:	4663      	mov	r3, ip
     faa:	681b      	ldr	r3, [r3, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     fac:	7b9d      	ldrb	r5, [r3, #14]
				if (spi_is_ready_to_read(module)) {
					break;
				}
			}
			if (!spi_is_ready_to_read(module)) {
     fae:	423d      	tst	r5, r7
     fb0:	d049      	beq.n	1046 <spi_transceive_buffer_wait+0x27a>
				/* Not ready to read data within timeout period */
				return STATUS_ERR_TIMEOUT;
			}
			enum status_code retval;
			uint16_t received_data = 0;
			rx_length--;
     fb2:	3801      	subs	r0, #1
     fb4:	b280      	uxth	r0, r0
     fb6:	7b9d      	ldrb	r5, [r3, #14]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
     fb8:	423d      	tst	r5, r7
     fba:	d016      	beq.n	fea <spi_transceive_buffer_wait+0x21e>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     fbc:	8a1d      	ldrh	r5, [r3, #16]
		/* No data has been received, return */
		return STATUS_ERR_IO;
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
     fbe:	2600      	movs	r6, #0

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     fc0:	423d      	tst	r5, r7
     fc2:	d005      	beq.n	fd0 <spi_transceive_buffer_wait+0x204>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
     fc4:	8a1d      	ldrh	r5, [r3, #16]
     fc6:	4649      	mov	r1, r9
     fc8:	430d      	orrs	r5, r1
     fca:	b2ad      	uxth	r5, r5
     fcc:	821d      	strh	r5, [r3, #16]
	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
     fce:	361e      	adds	r6, #30
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     fd0:	4661      	mov	r1, ip
     fd2:	798d      	ldrb	r5, [r1, #6]
     fd4:	2d01      	cmp	r5, #1
     fd6:	d103      	bne.n	fe0 <spi_transceive_buffer_wait+0x214>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     fd8:	8b1d      	ldrh	r5, [r3, #24]
     fda:	05ed      	lsls	r5, r5, #23
     fdc:	0ded      	lsrs	r5, r5, #23
     fde:	e001      	b.n	fe4 <spi_transceive_buffer_wait+0x218>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     fe0:	8b1d      	ldrh	r5, [r3, #24]
     fe2:	4025      	ands	r5, r4

			retval = spi_read(module, &received_data);

			if (retval != STATUS_OK) {
     fe4:	2e00      	cmp	r6, #0
     fe6:	d002      	beq.n	fee <spi_transceive_buffer_wait+0x222>
     fe8:	e037      	b.n	105a <spi_transceive_buffer_wait+0x28e>
	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
		/* No data has been received, return */
		return STATUS_ERR_IO;
     fea:	2610      	movs	r6, #16
				/* Overflow, abort */
				return retval;
     fec:	e035      	b.n	105a <spi_transceive_buffer_wait+0x28e>
			}
			/* Read value will be at least 8-bits long */
			rx_data[rx_pos++] = received_data;
     fee:	465b      	mov	r3, fp
     ff0:	3301      	adds	r3, #1
     ff2:	b29b      	uxth	r3, r3
     ff4:	4646      	mov	r6, r8
     ff6:	4659      	mov	r1, fp
     ff8:	5475      	strb	r5, [r6, r1]

			/* If 9-bit data, write next received byte to the buffer */
			if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     ffa:	4661      	mov	r1, ip
     ffc:	798e      	ldrb	r6, [r1, #6]
     ffe:	2e01      	cmp	r6, #1
    1000:	d107      	bne.n	1012 <spi_transceive_buffer_wait+0x246>
				rx_data[rx_pos++] = (received_data >> 8);
    1002:	465e      	mov	r6, fp
    1004:	3602      	adds	r6, #2
    1006:	b2b1      	uxth	r1, r6
    1008:	468b      	mov	fp, r1
    100a:	0a2d      	lsrs	r5, r5, #8
    100c:	4641      	mov	r1, r8
    100e:	54cd      	strb	r5, [r1, r3]
    1010:	e000      	b.n	1014 <spi_transceive_buffer_wait+0x248>
			if (retval != STATUS_OK) {
				/* Overflow, abort */
				return retval;
			}
			/* Read value will be at least 8-bits long */
			rx_data[rx_pos++] = received_data;
    1012:	469b      	mov	fp, r3
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
		while (rx_length) {
    1014:	2800      	cmp	r0, #0
    1016:	d109      	bne.n	102c <spi_transceive_buffer_wait+0x260>
    1018:	e017      	b.n	104a <spi_transceive_buffer_wait+0x27e>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    101a:	2704      	movs	r7, #4
			/* Start timeout period for slave */
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
				if (spi_is_ready_to_read(module)) {
    101c:	4a13      	ldr	r2, [pc, #76]	; (106c <spi_transceive_buffer_wait+0x2a0>)

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    101e:	2304      	movs	r3, #4
    1020:	4699      	mov	r9, r3

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    1022:	24ff      	movs	r4, #255	; 0xff
    1024:	4684      	mov	ip, r0
    1026:	9b03      	ldr	r3, [sp, #12]
    1028:	4698      	mov	r8, r3
    102a:	4650      	mov	r0, sl
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    102c:	4663      	mov	r3, ip
    102e:	681e      	ldr	r6, [r3, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1030:	7bb3      	ldrb	r3, [r6, #14]
    1032:	423b      	tst	r3, r7
    1034:	d1b8      	bne.n	fa8 <spi_transceive_buffer_wait+0x1dc>
    1036:	1c13      	adds	r3, r2, #0
    1038:	e7b0      	b.n	f9c <spi_transceive_buffer_wait+0x1d0>
				return STATUS_ABORTED;
			}

			if (!spi_is_ready_to_write(module)) {
				/* Not ready to write data within timeout period */
				return STATUS_ERR_TIMEOUT;
    103a:	2612      	movs	r6, #18
    103c:	e00d      	b.n	105a <spi_transceive_buffer_wait+0x28e>
				return STATUS_ABORTED;
			}

			if (!spi_is_ready_to_read(module)) {
				/* Not ready to read data within timeout period */
				return STATUS_ERR_TIMEOUT;
    103e:	2612      	movs	r6, #18
    1040:	e00b      	b.n	105a <spi_transceive_buffer_wait+0x28e>
				rx_data[rx_pos++] = (received_data >> 8);
			}
		}
	}
#  endif
	return STATUS_OK;
    1042:	2600      	movs	r6, #0
    1044:	e009      	b.n	105a <spi_transceive_buffer_wait+0x28e>
					break;
				}
			}
			if (!spi_is_ready_to_read(module)) {
				/* Not ready to read data within timeout period */
				return STATUS_ERR_TIMEOUT;
    1046:	2612      	movs	r6, #18
    1048:	e007      	b.n	105a <spi_transceive_buffer_wait+0x28e>
				rx_data[rx_pos++] = (received_data >> 8);
			}
		}
	}
#  endif
	return STATUS_OK;
    104a:	2600      	movs	r6, #0
    104c:	e005      	b.n	105a <spi_transceive_buffer_wait+0x28e>
		/* Write the data to send */
		spi_write(module, data_to_send);

#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
    104e:	7944      	ldrb	r4, [r0, #5]
    1050:	1c3e      	adds	r6, r7, #0
    1052:	2c00      	cmp	r4, #0
    1054:	d000      	beq.n	1058 <spi_transceive_buffer_wait+0x28c>
    1056:	e752      	b.n	efe <spi_transceive_buffer_wait+0x132>
    1058:	e717      	b.n	e8a <spi_transceive_buffer_wait+0xbe>
			}
		}
	}
#  endif
	return STATUS_OK;
}
    105a:	1c30      	adds	r0, r6, #0
    105c:	b005      	add	sp, #20
    105e:	bc3c      	pop	{r2, r3, r4, r5}
    1060:	4690      	mov	r8, r2
    1062:	4699      	mov	r9, r3
    1064:	46a2      	mov	sl, r4
    1066:	46ab      	mov	fp, r5
    1068:	bdf0      	pop	{r4, r5, r6, r7, pc}
    106a:	46c0      	nop			; (mov r8, r8)
    106c:	00002710 	.word	0x00002710
    1070:	00002711 	.word	0x00002711

00001074 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    1074:	4b0c      	ldr	r3, [pc, #48]	; (10a8 <cpu_irq_enter_critical+0x34>)
    1076:	681b      	ldr	r3, [r3, #0]
    1078:	2b00      	cmp	r3, #0
    107a:	d110      	bne.n	109e <cpu_irq_enter_critical+0x2a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    107c:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    1080:	2b00      	cmp	r3, #0
    1082:	d109      	bne.n	1098 <cpu_irq_enter_critical+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    1084:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    1086:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    108a:	2200      	movs	r2, #0
    108c:	4b07      	ldr	r3, [pc, #28]	; (10ac <cpu_irq_enter_critical+0x38>)
    108e:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    1090:	3201      	adds	r2, #1
    1092:	4b07      	ldr	r3, [pc, #28]	; (10b0 <cpu_irq_enter_critical+0x3c>)
    1094:	701a      	strb	r2, [r3, #0]
    1096:	e002      	b.n	109e <cpu_irq_enter_critical+0x2a>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    1098:	2200      	movs	r2, #0
    109a:	4b05      	ldr	r3, [pc, #20]	; (10b0 <cpu_irq_enter_critical+0x3c>)
    109c:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    109e:	4a02      	ldr	r2, [pc, #8]	; (10a8 <cpu_irq_enter_critical+0x34>)
    10a0:	6813      	ldr	r3, [r2, #0]
    10a2:	3301      	adds	r3, #1
    10a4:	6013      	str	r3, [r2, #0]
}
    10a6:	4770      	bx	lr
    10a8:	20000038 	.word	0x20000038
    10ac:	20000000 	.word	0x20000000
    10b0:	2000003c 	.word	0x2000003c

000010b4 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    10b4:	4b08      	ldr	r3, [pc, #32]	; (10d8 <cpu_irq_leave_critical+0x24>)
    10b6:	681a      	ldr	r2, [r3, #0]
    10b8:	3a01      	subs	r2, #1
    10ba:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    10bc:	681b      	ldr	r3, [r3, #0]
    10be:	2b00      	cmp	r3, #0
    10c0:	d109      	bne.n	10d6 <cpu_irq_leave_critical+0x22>
    10c2:	4b06      	ldr	r3, [pc, #24]	; (10dc <cpu_irq_leave_critical+0x28>)
    10c4:	781b      	ldrb	r3, [r3, #0]
    10c6:	2b00      	cmp	r3, #0
    10c8:	d005      	beq.n	10d6 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    10ca:	2201      	movs	r2, #1
    10cc:	4b04      	ldr	r3, [pc, #16]	; (10e0 <cpu_irq_leave_critical+0x2c>)
    10ce:	701a      	strb	r2, [r3, #0]
    10d0:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    10d4:	b662      	cpsie	i
	}
}
    10d6:	4770      	bx	lr
    10d8:	20000038 	.word	0x20000038
    10dc:	2000003c 	.word	0x2000003c
    10e0:	20000000 	.word	0x20000000

000010e4 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    10e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    10e6:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    10e8:	ac01      	add	r4, sp, #4
    10ea:	2501      	movs	r5, #1
    10ec:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    10ee:	2700      	movs	r7, #0
    10f0:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    10f2:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    10f4:	200e      	movs	r0, #14
    10f6:	1c21      	adds	r1, r4, #0
    10f8:	4e06      	ldr	r6, [pc, #24]	; (1114 <system_board_init+0x30>)
    10fa:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    10fc:	2280      	movs	r2, #128	; 0x80
    10fe:	01d2      	lsls	r2, r2, #7
    1100:	4b05      	ldr	r3, [pc, #20]	; (1118 <system_board_init+0x34>)
    1102:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    1104:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    1106:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    1108:	200f      	movs	r0, #15
    110a:	1c21      	adds	r1, r4, #0
    110c:	47b0      	blx	r6

	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
	
#endif
}
    110e:	b003      	add	sp, #12
    1110:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1112:	46c0      	nop			; (mov r8, r8)
    1114:	0000111d 	.word	0x0000111d
    1118:	41004400 	.word	0x41004400

0000111c <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    111c:	b500      	push	{lr}
    111e:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1120:	ab01      	add	r3, sp, #4
    1122:	2280      	movs	r2, #128	; 0x80
    1124:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    1126:	780a      	ldrb	r2, [r1, #0]
    1128:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    112a:	784a      	ldrb	r2, [r1, #1]
    112c:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    112e:	788a      	ldrb	r2, [r1, #2]
    1130:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    1132:	1c19      	adds	r1, r3, #0
    1134:	4b01      	ldr	r3, [pc, #4]	; (113c <port_pin_set_config+0x20>)
    1136:	4798      	blx	r3
}
    1138:	b003      	add	sp, #12
    113a:	bd00      	pop	{pc}
    113c:	00001961 	.word	0x00001961

00001140 <rtc_count_is_syncing>:
{
 	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    1140:	6803      	ldr	r3, [r0, #0]

        if (rtc_module->MODE0.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    1142:	7a98      	ldrb	r0, [r3, #10]
    1144:	09c0      	lsrs	r0, r0, #7
                return true;
        }

        return false;
}
    1146:	4770      	bx	lr

00001148 <rtc_count_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_enable(struct rtc_module *const module)
{
    1148:	b570      	push	{r4, r5, r6, lr}
    114a:	1c04      	adds	r4, r0, #0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    114c:	6806      	ldr	r6, [r0, #0]

#if RTC_COUNT_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_count_is_syncing(module)) {
    114e:	4d05      	ldr	r5, [pc, #20]	; (1164 <rtc_count_enable+0x1c>)
    1150:	1c20      	adds	r0, r4, #0
    1152:	47a8      	blx	r5
    1154:	2800      	cmp	r0, #0
    1156:	d1fb      	bne.n	1150 <rtc_count_enable+0x8>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_ENABLE;
    1158:	8832      	ldrh	r2, [r6, #0]
    115a:	2302      	movs	r3, #2
    115c:	4313      	orrs	r3, r2
    115e:	8033      	strh	r3, [r6, #0]
}
    1160:	bd70      	pop	{r4, r5, r6, pc}
    1162:	46c0      	nop			; (mov r8, r8)
    1164:	00001141 	.word	0x00001141

00001168 <rtc_count_disable>:
 * Disables the RTC module.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_disable(struct rtc_module *const module)
{
    1168:	b570      	push	{r4, r5, r6, lr}
    116a:	1c04      	adds	r4, r0, #0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    116c:	6806      	ldr	r6, [r0, #0]

#if RTC_COUNT_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_count_is_syncing(module)) {
    116e:	4d05      	ldr	r5, [pc, #20]	; (1184 <rtc_count_disable+0x1c>)
    1170:	1c20      	adds	r0, r4, #0
    1172:	47a8      	blx	r5
    1174:	2800      	cmp	r0, #0
    1176:	d1fb      	bne.n	1170 <rtc_count_disable+0x8>
		/* Wait for synchronization */
	}

	/* Disable RTC module. */
	rtc_module->MODE0.CTRL.reg &= ~RTC_MODE0_CTRL_ENABLE;
    1178:	8833      	ldrh	r3, [r6, #0]
    117a:	2202      	movs	r2, #2
    117c:	4393      	bics	r3, r2
    117e:	8033      	strh	r3, [r6, #0]
}
    1180:	bd70      	pop	{r4, r5, r6, pc}
    1182:	46c0      	nop			; (mov r8, r8)
    1184:	00001141 	.word	0x00001141

00001188 <rtc_count_reset>:
 * Resets the RTC to hardware defaults.
 *
 * \param[in,out]  module  Pointer to the software instance struct
 */
void rtc_count_reset(struct rtc_module *const module)
{
    1188:	b570      	push	{r4, r5, r6, lr}
    118a:	1c04      	adds	r4, r0, #0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    118c:	6806      	ldr	r6, [r0, #0]

	/* Disable module before reset. */
	rtc_count_disable(module);
    118e:	4b06      	ldr	r3, [pc, #24]	; (11a8 <rtc_count_reset+0x20>)
    1190:	4798      	blx	r3
#if RTC_COUNT_ASYNC == true
	module->registered_callback = 0;
	module->enabled_callback    = 0;
#endif

	while (rtc_count_is_syncing(module)) {
    1192:	4d06      	ldr	r5, [pc, #24]	; (11ac <rtc_count_reset+0x24>)
    1194:	1c20      	adds	r0, r4, #0
    1196:	47a8      	blx	r5
    1198:	2800      	cmp	r0, #0
    119a:	d1fb      	bne.n	1194 <rtc_count_reset+0xc>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_SWRST;
    119c:	8832      	ldrh	r2, [r6, #0]
    119e:	2301      	movs	r3, #1
    11a0:	4313      	orrs	r3, r2
    11a2:	8033      	strh	r3, [r6, #0]
}
    11a4:	bd70      	pop	{r4, r5, r6, pc}
    11a6:	46c0      	nop			; (mov r8, r8)
    11a8:	00001169 	.word	0x00001169
    11ac:	00001141 	.word	0x00001141

000011b0 <rtc_count_set_compare>:
 */
enum status_code rtc_count_set_compare(
		struct rtc_module *const module,
		const uint32_t comp_value,
		const enum rtc_count_compare comp_index)
{
    11b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    11b2:	b083      	sub	sp, #12
    11b4:	1c04      	adds	r4, r0, #0
    11b6:	9101      	str	r1, [sp, #4]
    11b8:	1c15      	adds	r5, r2, #0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    11ba:	6806      	ldr	r6, [r0, #0]

	while (rtc_count_is_syncing(module)) {
    11bc:	4f11      	ldr	r7, [pc, #68]	; (1204 <rtc_count_set_compare+0x54>)
    11be:	1c20      	adds	r0, r4, #0
    11c0:	47b8      	blx	r7
    11c2:	2800      	cmp	r0, #0
    11c4:	d1fb      	bne.n	11be <rtc_count_set_compare+0xe>
		/* Wait for synchronization */
	}

	/* Set compare values based on operation mode. */
	switch (module->mode) {
    11c6:	7923      	ldrb	r3, [r4, #4]
    11c8:	2b00      	cmp	r3, #0
    11ca:	d00a      	beq.n	11e2 <rtc_count_set_compare+0x32>
    11cc:	2b01      	cmp	r3, #1
    11ce:	d116      	bne.n	11fe <rtc_count_set_compare+0x4e>
		case RTC_COUNT_MODE_32BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP32) {
				return STATUS_ERR_INVALID_ARG;
    11d0:	3017      	adds	r0, #23

	/* Set compare values based on operation mode. */
	switch (module->mode) {
		case RTC_COUNT_MODE_32BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP32) {
    11d2:	2d01      	cmp	r5, #1
    11d4:	d814      	bhi.n	1200 <rtc_count_set_compare+0x50>
				return STATUS_ERR_INVALID_ARG;
			}

			/* Set compare value for COMP. */
			rtc_module->MODE0.COMP[comp_index].reg = comp_value;
    11d6:	3506      	adds	r5, #6
    11d8:	00ad      	lsls	r5, r5, #2
    11da:	9b01      	ldr	r3, [sp, #4]
    11dc:	51ab      	str	r3, [r5, r6]
			Assert(false);
			return STATUS_ERR_BAD_FORMAT;
	}

	/* Return status if everything is OK. */
	return STATUS_OK;
    11de:	2000      	movs	r0, #0
			}

			/* Set compare value for COMP. */
			rtc_module->MODE0.COMP[comp_index].reg = comp_value;

			break;
    11e0:	e00e      	b.n	1200 <rtc_count_set_compare+0x50>

		case RTC_COUNT_MODE_16BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP16) {
				return STATUS_ERR_INVALID_ARG;
    11e2:	2017      	movs	r0, #23

			break;

		case RTC_COUNT_MODE_16BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP16) {
    11e4:	2d02      	cmp	r5, #2
    11e6:	d80b      	bhi.n	1200 <rtc_count_set_compare+0x50>
				return STATUS_ERR_INVALID_ARG;
			}

			/* Check that 16-bit value is provided. */
			if (comp_value > 0xffff) {
    11e8:	4b07      	ldr	r3, [pc, #28]	; (1208 <rtc_count_set_compare+0x58>)
    11ea:	9a01      	ldr	r2, [sp, #4]
    11ec:	429a      	cmp	r2, r3
    11ee:	d807      	bhi.n	1200 <rtc_count_set_compare+0x50>
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
			}

			/* Set compare value for COMP. */
			rtc_module->MODE1.COMP[comp_index].reg = comp_value & 0xffff;
    11f0:	466b      	mov	r3, sp
    11f2:	889b      	ldrh	r3, [r3, #4]
    11f4:	350c      	adds	r5, #12
    11f6:	006d      	lsls	r5, r5, #1
    11f8:	53ab      	strh	r3, [r5, r6]
			Assert(false);
			return STATUS_ERR_BAD_FORMAT;
	}

	/* Return status if everything is OK. */
	return STATUS_OK;
    11fa:	2000      	movs	r0, #0
			}

			/* Set compare value for COMP. */
			rtc_module->MODE1.COMP[comp_index].reg = comp_value & 0xffff;

			break;
    11fc:	e000      	b.n	1200 <rtc_count_set_compare+0x50>

		default:
			Assert(false);
			return STATUS_ERR_BAD_FORMAT;
    11fe:	201a      	movs	r0, #26
	}

	/* Return status if everything is OK. */
	return STATUS_OK;
}
    1200:	b003      	add	sp, #12
    1202:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1204:	00001141 	.word	0x00001141
    1208:	0000ffff 	.word	0x0000ffff

0000120c <rtc_count_init>:
 */
enum status_code rtc_count_init(
		struct rtc_module *const module,
		Rtc *const hw,
		const struct rtc_count_config *const config)
{
    120c:	b5f0      	push	{r4, r5, r6, r7, lr}
    120e:	b083      	sub	sp, #12
    1210:	1c04      	adds	r4, r0, #0
    1212:	1c16      	adds	r6, r2, #0
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    1214:	6001      	str	r1, [r0, #0]
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    1216:	4a2f      	ldr	r2, [pc, #188]	; (12d4 <rtc_count_init+0xc8>)
    1218:	6991      	ldr	r1, [r2, #24]
    121a:	2320      	movs	r3, #32
    121c:	430b      	orrs	r3, r1
    121e:	6193      	str	r3, [r2, #24]
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_RTC);

	/* Set up GCLK */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
    1220:	a901      	add	r1, sp, #4
    1222:	2302      	movs	r3, #2
    1224:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
    1226:	2002      	movs	r0, #2
    1228:	4b2b      	ldr	r3, [pc, #172]	; (12d8 <rtc_count_init+0xcc>)
    122a:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
    122c:	2002      	movs	r0, #2
    122e:	4b2b      	ldr	r3, [pc, #172]	; (12dc <rtc_count_init+0xd0>)
    1230:	4798      	blx	r3

	/* Reset module to hardware defaults. */
	rtc_count_reset(module);
    1232:	1c20      	adds	r0, r4, #0
    1234:	4b2a      	ldr	r3, [pc, #168]	; (12e0 <rtc_count_init+0xd4>)
    1236:	4798      	blx	r3

	/* Save conf_struct internally for continued use. */
	module->mode                = config->mode;
    1238:	78b3      	ldrb	r3, [r6, #2]
    123a:	7123      	strb	r3, [r4, #4]
	module->continuously_update = config->continuously_update;
    123c:	7933      	ldrb	r3, [r6, #4]
    123e:	7163      	strb	r3, [r4, #5]

#  if (RTC_INST_NUM == 1)
	_rtc_instance[0] = module;
    1240:	4b28      	ldr	r3, [pc, #160]	; (12e4 <rtc_count_init+0xd8>)
    1242:	601c      	str	r4, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    1244:	6827      	ldr	r7, [r4, #0]

	rtc_module->MODE0.CTRL.reg = RTC_MODE0_CTRL_MODE(0) | config->prescaler;
    1246:	8833      	ldrh	r3, [r6, #0]
    1248:	803b      	strh	r3, [r7, #0]

	/* Set mode and clear on match if applicable. */
	switch (config->mode) {
    124a:	78b3      	ldrb	r3, [r6, #2]
    124c:	2b00      	cmp	r3, #0
    124e:	d017      	beq.n	1280 <rtc_count_init+0x74>
						(enum rtc_count_compare)i);
			}
			break;
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    1250:	2017      	movs	r0, #23
	Rtc *const rtc_module = module->hw;

	rtc_module->MODE0.CTRL.reg = RTC_MODE0_CTRL_MODE(0) | config->prescaler;

	/* Set mode and clear on match if applicable. */
	switch (config->mode) {
    1252:	2b01      	cmp	r3, #1
    1254:	d13c      	bne.n	12d0 <rtc_count_init+0xc4>
		case RTC_COUNT_MODE_32BIT:
			/* Set 32bit mode and clear on match if applicable. */
			rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MODE(0);
    1256:	883b      	ldrh	r3, [r7, #0]
    1258:	b29b      	uxth	r3, r3
    125a:	803b      	strh	r3, [r7, #0]

			/* Check if clear on compare match should be set. */
			if (config->clear_on_match) {
    125c:	78f3      	ldrb	r3, [r6, #3]
    125e:	2b00      	cmp	r3, #0
    1260:	d034      	beq.n	12cc <rtc_count_init+0xc0>
				/* Set clear on match. */
				rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MATCHCLR;
    1262:	883a      	ldrh	r2, [r7, #0]
    1264:	2380      	movs	r3, #128	; 0x80
    1266:	4313      	orrs	r3, r2
    1268:	803b      	strh	r3, [r7, #0]
    126a:	e02f      	b.n	12cc <rtc_count_init+0xc0>
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP32; i++) {
				while (rtc_count_is_syncing(module)) {
    126c:	1c20      	adds	r0, r4, #0
    126e:	47a8      	blx	r5
    1270:	2800      	cmp	r0, #0
    1272:	d1fb      	bne.n	126c <rtc_count_init+0x60>
					/* Wait for synchronization */
				}

				rtc_count_set_compare(module, config->compare_values[i],
    1274:	1c20      	adds	r0, r4, #0
    1276:	68b1      	ldr	r1, [r6, #8]
    1278:	2200      	movs	r2, #0
    127a:	4b1b      	ldr	r3, [pc, #108]	; (12e8 <rtc_count_init+0xdc>)
    127c:	4798      	blx	r3
    127e:	e01b      	b.n	12b8 <rtc_count_init+0xac>
			}
			break;

		case RTC_COUNT_MODE_16BIT:
			/* Set 16bit mode. */
			rtc_module->MODE1.CTRL.reg |= RTC_MODE1_CTRL_MODE(1);
    1280:	883a      	ldrh	r2, [r7, #0]
    1282:	2304      	movs	r3, #4
    1284:	4313      	orrs	r3, r2
    1286:	803b      	strh	r3, [r7, #0]

			/* Check if match on clear is set, and return invalid
			 * argument if set. */
			if (config->clear_on_match) {
    1288:	78f3      	ldrb	r3, [r6, #3]
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
    128a:	2017      	movs	r0, #23
			/* Set 16bit mode. */
			rtc_module->MODE1.CTRL.reg |= RTC_MODE1_CTRL_MODE(1);

			/* Check if match on clear is set, and return invalid
			 * argument if set. */
			if (config->clear_on_match) {
    128c:	2b00      	cmp	r3, #0
    128e:	d11f      	bne.n	12d0 <rtc_count_init+0xc4>
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
				while (rtc_count_is_syncing(module)) {
    1290:	4d16      	ldr	r5, [pc, #88]	; (12ec <rtc_count_init+0xe0>)
    1292:	1c20      	adds	r0, r4, #0
    1294:	47a8      	blx	r5
    1296:	2800      	cmp	r0, #0
    1298:	d1fb      	bne.n	1292 <rtc_count_init+0x86>
					/* Wait for synchronization */
				}

				rtc_count_set_compare(module, config->compare_values[i],
    129a:	1c20      	adds	r0, r4, #0
    129c:	68b1      	ldr	r1, [r6, #8]
    129e:	2200      	movs	r2, #0
    12a0:	4b11      	ldr	r3, [pc, #68]	; (12e8 <rtc_count_init+0xdc>)
    12a2:	4798      	blx	r3
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
				while (rtc_count_is_syncing(module)) {
    12a4:	4d11      	ldr	r5, [pc, #68]	; (12ec <rtc_count_init+0xe0>)
    12a6:	1c20      	adds	r0, r4, #0
    12a8:	47a8      	blx	r5
    12aa:	2800      	cmp	r0, #0
    12ac:	d1fb      	bne.n	12a6 <rtc_count_init+0x9a>
					/* Wait for synchronization */
				}

				rtc_count_set_compare(module, config->compare_values[i],
    12ae:	1c20      	adds	r0, r4, #0
    12b0:	68f1      	ldr	r1, [r6, #12]
    12b2:	2201      	movs	r2, #1
    12b4:	4b0c      	ldr	r3, [pc, #48]	; (12e8 <rtc_count_init+0xdc>)
    12b6:	4798      	blx	r3
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
	}

	/* Check to set continuously clock read update mode. */
	if (config->continuously_update) {
    12b8:	7933      	ldrb	r3, [r6, #4]
		/* Set continuously mode. */
		rtc_module->MODE0.READREQ.reg |= RTC_READREQ_RCONT;
	}

	/* Return status OK if everything was configured. */
	return STATUS_OK;
    12ba:	2000      	movs	r0, #0
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
	}

	/* Check to set continuously clock read update mode. */
	if (config->continuously_update) {
    12bc:	2b00      	cmp	r3, #0
    12be:	d007      	beq.n	12d0 <rtc_count_init+0xc4>
		/* Set continuously mode. */
		rtc_module->MODE0.READREQ.reg |= RTC_READREQ_RCONT;
    12c0:	887a      	ldrh	r2, [r7, #2]
    12c2:	2380      	movs	r3, #128	; 0x80
    12c4:	01db      	lsls	r3, r3, #7
    12c6:	4313      	orrs	r3, r2
    12c8:	807b      	strh	r3, [r7, #2]
    12ca:	e001      	b.n	12d0 <rtc_count_init+0xc4>
				/* Set clear on match. */
				rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MATCHCLR;
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP32; i++) {
				while (rtc_count_is_syncing(module)) {
    12cc:	4d07      	ldr	r5, [pc, #28]	; (12ec <rtc_count_init+0xe0>)
    12ce:	e7cd      	b.n	126c <rtc_count_init+0x60>
	_rtc_instance[_rtc_get_inst_index(hw)] = module;
#  endif

	/* Set config and return status. */
	return _rtc_count_set_config(module, config);
}
    12d0:	b003      	add	sp, #12
    12d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    12d4:	40000400 	.word	0x40000400
    12d8:	00001869 	.word	0x00001869
    12dc:	000017dd 	.word	0x000017dd
    12e0:	00001189 	.word	0x00001189
    12e4:	20000064 	.word	0x20000064
    12e8:	000011b1 	.word	0x000011b1
    12ec:	00001141 	.word	0x00001141

000012f0 <rtc_count_set_period>:
 * \retval STATUS_ERR_UNSUPPORTED_DEV  If module is not operated in 16-bit mode
 */
enum status_code rtc_count_set_period(
		struct rtc_module *const module,
		const uint16_t period_value)
{
    12f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    12f2:	1c04      	adds	r4, r0, #0
    12f4:	1c0e      	adds	r6, r1, #0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    12f6:	6807      	ldr	r7, [r0, #0]

	/* Check that correct mode is set. */
	if (module->mode != RTC_COUNT_MODE_16BIT) {
    12f8:	7903      	ldrb	r3, [r0, #4]
		return STATUS_ERR_UNSUPPORTED_DEV;
    12fa:	2015      	movs	r0, #21
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;

	/* Check that correct mode is set. */
	if (module->mode != RTC_COUNT_MODE_16BIT) {
    12fc:	2b00      	cmp	r3, #0
    12fe:	d105      	bne.n	130c <rtc_count_set_period+0x1c>
		return STATUS_ERR_UNSUPPORTED_DEV;
	}

	while (rtc_count_is_syncing(module)) {
    1300:	4d03      	ldr	r5, [pc, #12]	; (1310 <rtc_count_set_period+0x20>)
    1302:	1c20      	adds	r0, r4, #0
    1304:	47a8      	blx	r5
    1306:	2800      	cmp	r0, #0
    1308:	d1fb      	bne.n	1302 <rtc_count_set_period+0x12>
		/* Wait for synchronization */
	}

	/* Write value to register. */
	rtc_module->MODE1.PER.reg = period_value;
    130a:	82be      	strh	r6, [r7, #20]

	return STATUS_OK;
}
    130c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    130e:	46c0      	nop			; (mov r8, r8)
    1310:	00001141 	.word	0x00001141

00001314 <rtc_count_is_compare_match>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    1314:	6802      	ldr	r2, [r0, #0]

	/* Check sanity. */
	switch (module->mode) {
    1316:	7903      	ldrb	r3, [r0, #4]
    1318:	2b00      	cmp	r3, #0
    131a:	d006      	beq.n	132a <rtc_count_is_compare_match+0x16>

			break;

		default:
			Assert(false);
			return false;
    131c:	2000      	movs	r0, #0
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;

	/* Check sanity. */
	switch (module->mode) {
    131e:	2b01      	cmp	r3, #1
    1320:	d10c      	bne.n	133c <rtc_count_is_compare_match+0x28>
		case RTC_COUNT_MODE_32BIT:
			/* Check sanity for 32-bit mode. */
			if (comp_index > RTC_NUM_OF_COMP32) {
				return false;
    1322:	2000      	movs	r0, #0

	/* Check sanity. */
	switch (module->mode) {
		case RTC_COUNT_MODE_32BIT:
			/* Check sanity for 32-bit mode. */
			if (comp_index > RTC_NUM_OF_COMP32) {
    1324:	2901      	cmp	r1, #1
    1326:	d809      	bhi.n	133c <rtc_count_is_compare_match+0x28>
    1328:	e002      	b.n	1330 <rtc_count_is_compare_match+0x1c>
			break;

		case RTC_COUNT_MODE_16BIT:
			/* Check sanity for 16-bit mode. */
			if (comp_index > RTC_NUM_OF_COMP16) {
				return false;
    132a:	2000      	movs	r0, #0

			break;

		case RTC_COUNT_MODE_16BIT:
			/* Check sanity for 16-bit mode. */
			if (comp_index > RTC_NUM_OF_COMP16) {
    132c:	2902      	cmp	r1, #2
    132e:	d805      	bhi.n	133c <rtc_count_is_compare_match+0x28>
			Assert(false);
			return false;
	}

	/* Set status of INTFLAG as return argument. */
	return (rtc_module->MODE0.INTFLAG.reg & (1 << comp_index)) ? true : false;
    1330:	7a13      	ldrb	r3, [r2, #8]
    1332:	b2db      	uxtb	r3, r3
    1334:	410b      	asrs	r3, r1
    1336:	2001      	movs	r0, #1
    1338:	4018      	ands	r0, r3
    133a:	e7ff      	b.n	133c <rtc_count_is_compare_match+0x28>
}
    133c:	4770      	bx	lr
    133e:	46c0      	nop			; (mov r8, r8)

00001340 <rtc_count_clear_compare_match>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    1340:	6802      	ldr	r2, [r0, #0]

	/* Check sanity. */
	switch (module->mode){
    1342:	7903      	ldrb	r3, [r0, #4]
    1344:	2b00      	cmp	r3, #0
    1346:	d006      	beq.n	1356 <rtc_count_clear_compare_match+0x16>

			break;

		default:
			Assert(false);
			return STATUS_ERR_BAD_FORMAT;
    1348:	201a      	movs	r0, #26
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;

	/* Check sanity. */
	switch (module->mode){
    134a:	2b01      	cmp	r3, #1
    134c:	d10e      	bne.n	136c <rtc_count_clear_compare_match+0x2c>
		case RTC_COUNT_MODE_32BIT:
			/* Check sanity for 32-bit mode. */
			if (comp_index > RTC_NUM_OF_COMP32) {
				return STATUS_ERR_INVALID_ARG;
    134e:	2017      	movs	r0, #23

	/* Check sanity. */
	switch (module->mode){
		case RTC_COUNT_MODE_32BIT:
			/* Check sanity for 32-bit mode. */
			if (comp_index > RTC_NUM_OF_COMP32) {
    1350:	2901      	cmp	r1, #1
    1352:	d80b      	bhi.n	136c <rtc_count_clear_compare_match+0x2c>
    1354:	e002      	b.n	135c <rtc_count_clear_compare_match+0x1c>
			break;

		case RTC_COUNT_MODE_16BIT:
			/* Check sanity for 16-bit mode. */
			if (comp_index > RTC_NUM_OF_COMP16) {
				return STATUS_ERR_INVALID_ARG;
    1356:	2017      	movs	r0, #23

			break;

		case RTC_COUNT_MODE_16BIT:
			/* Check sanity for 16-bit mode. */
			if (comp_index > RTC_NUM_OF_COMP16) {
    1358:	2902      	cmp	r1, #2
    135a:	d807      	bhi.n	136c <rtc_count_clear_compare_match+0x2c>
			Assert(false);
			return STATUS_ERR_BAD_FORMAT;
	}

	/* Clear INTFLAG. */
	rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << comp_index);
    135c:	2301      	movs	r3, #1
    135e:	408b      	lsls	r3, r1
    1360:	1c19      	adds	r1, r3, #0
    1362:	2303      	movs	r3, #3
    1364:	4019      	ands	r1, r3
    1366:	7211      	strb	r1, [r2, #8]

	return STATUS_OK;
    1368:	2000      	movs	r0, #0
    136a:	e7ff      	b.n	136c <rtc_count_clear_compare_match+0x2c>
}
    136c:	4770      	bx	lr
    136e:	46c0      	nop			; (mov r8, r8)

00001370 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    1370:	b508      	push	{r3, lr}
	switch (clock_source) {
    1372:	2807      	cmp	r0, #7
    1374:	d803      	bhi.n	137e <system_clock_source_get_hz+0xe>
    1376:	0080      	lsls	r0, r0, #2
    1378:	4b17      	ldr	r3, [pc, #92]	; (13d8 <system_clock_source_get_hz+0x68>)
    137a:	581b      	ldr	r3, [r3, r0]
    137c:	469f      	mov	pc, r3
		}

		return 48000000UL;

	default:
		return 0;
    137e:	2000      	movs	r0, #0
    1380:	e028      	b.n	13d4 <system_clock_source_get_hz+0x64>
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    1382:	4b16      	ldr	r3, [pc, #88]	; (13dc <system_clock_source_get_hz+0x6c>)
    1384:	68d8      	ldr	r0, [r3, #12]
    1386:	e025      	b.n	13d4 <system_clock_source_get_hz+0x64>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    1388:	4b15      	ldr	r3, [pc, #84]	; (13e0 <system_clock_source_get_hz+0x70>)
    138a:	6a18      	ldr	r0, [r3, #32]
    138c:	0580      	lsls	r0, r0, #22
    138e:	0f80      	lsrs	r0, r0, #30
    1390:	4b14      	ldr	r3, [pc, #80]	; (13e4 <system_clock_source_get_hz+0x74>)
    1392:	40c3      	lsrs	r3, r0
    1394:	1c18      	adds	r0, r3, #0
    1396:	e01d      	b.n	13d4 <system_clock_source_get_hz+0x64>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    1398:	4b10      	ldr	r3, [pc, #64]	; (13dc <system_clock_source_get_hz+0x6c>)
    139a:	6918      	ldr	r0, [r3, #16]
    139c:	e01a      	b.n	13d4 <system_clock_source_get_hz+0x64>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    139e:	4b0f      	ldr	r3, [pc, #60]	; (13dc <system_clock_source_get_hz+0x6c>)
    13a0:	681b      	ldr	r3, [r3, #0]
    13a2:	2002      	movs	r0, #2
    13a4:	4018      	ands	r0, r3
    13a6:	d015      	beq.n	13d4 <system_clock_source_get_hz+0x64>
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    13a8:	490d      	ldr	r1, [pc, #52]	; (13e0 <system_clock_source_get_hz+0x70>)
    13aa:	2210      	movs	r2, #16
    13ac:	68cb      	ldr	r3, [r1, #12]
    13ae:	421a      	tst	r2, r3
    13b0:	d0fc      	beq.n	13ac <system_clock_source_get_hz+0x3c>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    13b2:	4b0a      	ldr	r3, [pc, #40]	; (13dc <system_clock_source_get_hz+0x6c>)
    13b4:	681b      	ldr	r3, [r3, #0]
    13b6:	075b      	lsls	r3, r3, #29
    13b8:	d50b      	bpl.n	13d2 <system_clock_source_get_hz+0x62>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    13ba:	2000      	movs	r0, #0
    13bc:	4b0a      	ldr	r3, [pc, #40]	; (13e8 <system_clock_source_get_hz+0x78>)
    13be:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    13c0:	4b06      	ldr	r3, [pc, #24]	; (13dc <system_clock_source_get_hz+0x6c>)
    13c2:	689b      	ldr	r3, [r3, #8]
    13c4:	041b      	lsls	r3, r3, #16
    13c6:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    13c8:	4358      	muls	r0, r3
    13ca:	e003      	b.n	13d4 <system_clock_source_get_hz+0x64>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    13cc:	2080      	movs	r0, #128	; 0x80
    13ce:	0200      	lsls	r0, r0, #8
    13d0:	e000      	b.n	13d4 <system_clock_source_get_hz+0x64>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    13d2:	4806      	ldr	r0, [pc, #24]	; (13ec <system_clock_source_get_hz+0x7c>)

	default:
		return 0;
	}
}
    13d4:	bd08      	pop	{r3, pc}
    13d6:	46c0      	nop			; (mov r8, r8)
    13d8:	00001d70 	.word	0x00001d70
    13dc:	20000040 	.word	0x20000040
    13e0:	40000800 	.word	0x40000800
    13e4:	007a1200 	.word	0x007a1200
    13e8:	00001885 	.word	0x00001885
    13ec:	02dc6c00 	.word	0x02dc6c00

000013f0 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    13f0:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    13f2:	4c0c      	ldr	r4, [pc, #48]	; (1424 <system_clock_source_osc8m_set_config+0x34>)
    13f4:	6a23      	ldr	r3, [r4, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    13f6:	7801      	ldrb	r1, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    13f8:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    13fa:	7842      	ldrb	r2, [r0, #1]
    13fc:	2001      	movs	r0, #1
    13fe:	4002      	ands	r2, r0
    1400:	0192      	lsls	r2, r2, #6
    1402:	2640      	movs	r6, #64	; 0x40
    1404:	43b3      	bics	r3, r6
    1406:	4313      	orrs	r3, r2
    1408:	1c02      	adds	r2, r0, #0
    140a:	402a      	ands	r2, r5
    140c:	01d2      	lsls	r2, r2, #7
    140e:	307f      	adds	r0, #127	; 0x7f
    1410:	4383      	bics	r3, r0
    1412:	4313      	orrs	r3, r2
    1414:	2203      	movs	r2, #3
    1416:	400a      	ands	r2, r1
    1418:	0212      	lsls	r2, r2, #8
    141a:	4903      	ldr	r1, [pc, #12]	; (1428 <system_clock_source_osc8m_set_config+0x38>)
    141c:	400b      	ands	r3, r1
    141e:	4313      	orrs	r3, r2
    1420:	6223      	str	r3, [r4, #32]
}
    1422:	bd70      	pop	{r4, r5, r6, pc}
    1424:	40000800 	.word	0x40000800
    1428:	fffffcff 	.word	0xfffffcff

0000142c <system_clock_source_osc32k_set_config>:
 *
 * \param[in] config  OSC32K configuration structure containing the new config
 */
void system_clock_source_osc32k_set_config(
		struct system_clock_source_osc32k_config *const config)
{
    142c:	b5f0      	push	{r4, r5, r6, r7, lr}
    142e:	4657      	mov	r7, sl
    1430:	464e      	mov	r6, r9
    1432:	4645      	mov	r5, r8
    1434:	b4e0      	push	{r5, r6, r7}
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
    1436:	4e1c      	ldr	r6, [pc, #112]	; (14a8 <system_clock_source_osc32k_set_config+0x7c>)
    1438:	69b3      	ldr	r3, [r6, #24]
    143a:	469c      	mov	ip, r3

	/* Update settings via a temporary struct to reduce register access */
	temp.bit.EN1K     = config->enable_1khz_output;
    143c:	7841      	ldrb	r1, [r0, #1]
	temp.bit.EN32K    = config->enable_32khz_output;
	temp.bit.STARTUP  = config->startup_time;
    143e:	7805      	ldrb	r5, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1440:	7907      	ldrb	r7, [r0, #4]
	temp.bit.RUNSTDBY = config->run_in_standby;
    1442:	78c3      	ldrb	r3, [r0, #3]
    1444:	4699      	mov	r9, r3
	temp.bit.WRTLOCK  = config->write_once;
    1446:	7944      	ldrb	r4, [r0, #5]

	SYSCTRL->OSC32K  = temp;
    1448:	7883      	ldrb	r3, [r0, #2]
    144a:	2001      	movs	r0, #1
    144c:	4003      	ands	r3, r0
    144e:	009b      	lsls	r3, r3, #2
    1450:	469a      	mov	sl, r3
    1452:	2204      	movs	r2, #4
    1454:	4690      	mov	r8, r2
    1456:	4662      	mov	r2, ip
    1458:	4643      	mov	r3, r8
    145a:	439a      	bics	r2, r3
    145c:	1c13      	adds	r3, r2, #0
    145e:	4652      	mov	r2, sl
    1460:	431a      	orrs	r2, r3
    1462:	1c13      	adds	r3, r2, #0
    1464:	4001      	ands	r1, r0
    1466:	00c9      	lsls	r1, r1, #3
    1468:	2208      	movs	r2, #8
    146a:	4393      	bics	r3, r2
    146c:	430b      	orrs	r3, r1
    146e:	464a      	mov	r2, r9
    1470:	4002      	ands	r2, r0
    1472:	0192      	lsls	r2, r2, #6
    1474:	2140      	movs	r1, #64	; 0x40
    1476:	438b      	bics	r3, r1
    1478:	4313      	orrs	r3, r2
    147a:	4007      	ands	r7, r0
    147c:	01ff      	lsls	r7, r7, #7
    147e:	2280      	movs	r2, #128	; 0x80
    1480:	4393      	bics	r3, r2
    1482:	433b      	orrs	r3, r7
    1484:	3a79      	subs	r2, #121	; 0x79
    1486:	4015      	ands	r5, r2
    1488:	022d      	lsls	r5, r5, #8
    148a:	4f08      	ldr	r7, [pc, #32]	; (14ac <system_clock_source_osc32k_set_config+0x80>)
    148c:	403b      	ands	r3, r7
    148e:	432b      	orrs	r3, r5
    1490:	4004      	ands	r4, r0
    1492:	0320      	lsls	r0, r4, #12
    1494:	4c06      	ldr	r4, [pc, #24]	; (14b0 <system_clock_source_osc32k_set_config+0x84>)
    1496:	401c      	ands	r4, r3
    1498:	4304      	orrs	r4, r0
    149a:	61b4      	str	r4, [r6, #24]
}
    149c:	bc1c      	pop	{r2, r3, r4}
    149e:	4690      	mov	r8, r2
    14a0:	4699      	mov	r9, r3
    14a2:	46a2      	mov	sl, r4
    14a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    14a6:	46c0      	nop			; (mov r8, r8)
    14a8:	40000800 	.word	0x40000800
    14ac:	fffff8ff 	.word	0xfffff8ff
    14b0:	ffffefff 	.word	0xffffefff

000014b4 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    14b4:	2807      	cmp	r0, #7
    14b6:	d803      	bhi.n	14c0 <system_clock_source_enable+0xc>
    14b8:	0080      	lsls	r0, r0, #2
    14ba:	4b1e      	ldr	r3, [pc, #120]	; (1534 <system_clock_source_enable+0x80>)
    14bc:	581b      	ldr	r3, [r3, r0]
    14be:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    14c0:	2017      	movs	r0, #23
    14c2:	e036      	b.n	1532 <system_clock_source_enable+0x7e>
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    14c4:	4a1c      	ldr	r2, [pc, #112]	; (1538 <system_clock_source_enable+0x84>)
    14c6:	6a11      	ldr	r1, [r2, #32]
    14c8:	2302      	movs	r3, #2
    14ca:	430b      	orrs	r3, r1
    14cc:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    14ce:	2000      	movs	r0, #0
    14d0:	e02f      	b.n	1532 <system_clock_source_enable+0x7e>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    14d2:	4a19      	ldr	r2, [pc, #100]	; (1538 <system_clock_source_enable+0x84>)
    14d4:	6991      	ldr	r1, [r2, #24]
    14d6:	2302      	movs	r3, #2
    14d8:	430b      	orrs	r3, r1
    14da:	6193      	str	r3, [r2, #24]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    14dc:	2000      	movs	r0, #0
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
		return STATUS_OK;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;
    14de:	e028      	b.n	1532 <system_clock_source_enable+0x7e>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    14e0:	4a15      	ldr	r2, [pc, #84]	; (1538 <system_clock_source_enable+0x84>)
    14e2:	8a11      	ldrh	r1, [r2, #16]
    14e4:	2302      	movs	r3, #2
    14e6:	430b      	orrs	r3, r1
    14e8:	8213      	strh	r3, [r2, #16]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    14ea:	2000      	movs	r0, #0
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;
    14ec:	e021      	b.n	1532 <system_clock_source_enable+0x7e>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    14ee:	4a12      	ldr	r2, [pc, #72]	; (1538 <system_clock_source_enable+0x84>)
    14f0:	8a91      	ldrh	r1, [r2, #20]
    14f2:	2302      	movs	r3, #2
    14f4:	430b      	orrs	r3, r1
    14f6:	8293      	strh	r3, [r2, #20]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    14f8:	2000      	movs	r0, #0
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
		break;
    14fa:	e01a      	b.n	1532 <system_clock_source_enable+0x7e>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    14fc:	4b0f      	ldr	r3, [pc, #60]	; (153c <system_clock_source_enable+0x88>)
    14fe:	6819      	ldr	r1, [r3, #0]
    1500:	2202      	movs	r2, #2
    1502:	430a      	orrs	r2, r1
    1504:	601a      	str	r2, [r3, #0]

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
    1506:	681a      	ldr	r2, [r3, #0]
    1508:	4b0d      	ldr	r3, [pc, #52]	; (1540 <system_clock_source_enable+0x8c>)
    150a:	4013      	ands	r3, r2
    150c:	4a0a      	ldr	r2, [pc, #40]	; (1538 <system_clock_source_enable+0x84>)
    150e:	8493      	strh	r3, [r2, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1510:	1c11      	adds	r1, r2, #0
    1512:	2210      	movs	r2, #16
    1514:	68cb      	ldr	r3, [r1, #12]
    1516:	421a      	tst	r2, r3
    1518:	d0fc      	beq.n	1514 <system_clock_source_enable+0x60>

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
	_system_dfll_wait_for_sync();

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    151a:	4a08      	ldr	r2, [pc, #32]	; (153c <system_clock_source_enable+0x88>)
    151c:	6891      	ldr	r1, [r2, #8]
    151e:	4b06      	ldr	r3, [pc, #24]	; (1538 <system_clock_source_enable+0x84>)
    1520:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1522:	6851      	ldr	r1, [r2, #4]
    1524:	6299      	str	r1, [r3, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    1526:	6812      	ldr	r2, [r2, #0]
    1528:	b292      	uxth	r2, r2
    152a:	849a      	strh	r2, [r3, #36]	; 0x24
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    152c:	2000      	movs	r0, #0
    152e:	e000      	b.n	1532 <system_clock_source_enable+0x7e>
		_system_clock_source_dfll_set_config_errata_9905();
		break;

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    1530:	2000      	movs	r0, #0
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
}
    1532:	4770      	bx	lr
    1534:	00001d90 	.word	0x00001d90
    1538:	40000800 	.word	0x40000800
    153c:	20000040 	.word	0x20000040
    1540:	0000ff7f 	.word	0x0000ff7f

00001544 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1544:	b5f0      	push	{r4, r5, r6, r7, lr}
    1546:	b087      	sub	sp, #28
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1548:	22c2      	movs	r2, #194	; 0xc2
    154a:	00d2      	lsls	r2, r2, #3
    154c:	4b2c      	ldr	r3, [pc, #176]	; (1600 <system_clock_init+0xbc>)
    154e:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1550:	4a2c      	ldr	r2, [pc, #176]	; (1604 <system_clock_init+0xc0>)
    1552:	6853      	ldr	r3, [r2, #4]
    1554:	211e      	movs	r1, #30
    1556:	438b      	bics	r3, r1
    1558:	6053      	str	r3, [r2, #4]
{
	uint32_t gclk_id;
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    155a:	2301      	movs	r3, #1
    155c:	466a      	mov	r2, sp
    155e:	7013      	strb	r3, [r2, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1560:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    1562:	4d29      	ldr	r5, [pc, #164]	; (1608 <system_clock_init+0xc4>)
    1564:	b2e0      	uxtb	r0, r4
    1566:	4669      	mov	r1, sp
    1568:	47a8      	blx	r5
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    156a:	3401      	adds	r4, #1
    156c:	2c1c      	cmp	r4, #28
    156e:	d1f9      	bne.n	1564 <system_clock_init+0x20>


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
			(*(uint32_t *)FUSES_OSC32KCAL_ADDR >> FUSES_OSC32KCAL_Pos);
    1570:	4b26      	ldr	r3, [pc, #152]	; (160c <system_clock_init+0xc8>)
    1572:	681b      	ldr	r3, [r3, #0]
#endif


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
    1574:	04db      	lsls	r3, r3, #19
    1576:	4922      	ldr	r1, [pc, #136]	; (1600 <system_clock_init+0xbc>)
    1578:	0e5b      	lsrs	r3, r3, #25
    157a:	041a      	lsls	r2, r3, #16
    157c:	6988      	ldr	r0, [r1, #24]
    157e:	4b24      	ldr	r3, [pc, #144]	; (1610 <system_clock_init+0xcc>)
    1580:	4003      	ands	r3, r0
    1582:	4313      	orrs	r3, r2
    1584:	618b      	str	r3, [r1, #24]
static inline void system_clock_source_osc32k_get_config_defaults(
		struct system_clock_source_osc32k_config *const config)
{
	Assert(config);

	config->enable_1khz_output  = true;
    1586:	a804      	add	r0, sp, #16
    1588:	2501      	movs	r5, #1
    158a:	7045      	strb	r5, [r0, #1]
	config->enable_32khz_output = true;
    158c:	7085      	strb	r5, [r0, #2]
	config->run_in_standby      = false;
    158e:	2400      	movs	r4, #0
    1590:	70c4      	strb	r4, [r0, #3]
	config->on_demand           = true;
    1592:	7105      	strb	r5, [r0, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
    1594:	2307      	movs	r3, #7
    1596:	7003      	strb	r3, [r0, #0]
	config->write_once          = false;
    1598:	7144      	strb	r4, [r0, #5]
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;

	system_clock_source_osc32k_set_config(&osc32k_conf);
    159a:	4b1e      	ldr	r3, [pc, #120]	; (1614 <system_clock_init+0xd0>)
    159c:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
    159e:	2004      	movs	r0, #4
    15a0:	4e1d      	ldr	r6, [pc, #116]	; (1618 <system_clock_init+0xd4>)
    15a2:	47b0      	blx	r6
		struct system_clock_source_osc8m_config *const config)
{
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
	config->run_in_standby  = false;
    15a4:	a803      	add	r0, sp, #12
    15a6:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    15a8:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    15aa:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    15ac:	4b1b      	ldr	r3, [pc, #108]	; (161c <system_clock_init+0xd8>)
    15ae:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    15b0:	2006      	movs	r0, #6
    15b2:	47b0      	blx	r6


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    15b4:	4b1a      	ldr	r3, [pc, #104]	; (1620 <system_clock_init+0xdc>)
    15b6:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
	config->high_when_disabled = false;
    15b8:	466b      	mov	r3, sp
    15ba:	705c      	strb	r4, [r3, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    15bc:	721c      	strb	r4, [r3, #8]
	config->output_enable      = false;
    15be:	725c      	strb	r4, [r3, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    15c0:	2304      	movs	r3, #4
    15c2:	466a      	mov	r2, sp
    15c4:	7013      	strb	r3, [r2, #0]
    15c6:	331c      	adds	r3, #28
    15c8:	9301      	str	r3, [sp, #4]
    15ca:	2002      	movs	r0, #2
    15cc:	4669      	mov	r1, sp
    15ce:	4f15      	ldr	r7, [pc, #84]	; (1624 <system_clock_init+0xe0>)
    15d0:	47b8      	blx	r7
    15d2:	2002      	movs	r0, #2
    15d4:	4e14      	ldr	r6, [pc, #80]	; (1628 <system_clock_init+0xe4>)
    15d6:	47b0      	blx	r6
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    15d8:	4b14      	ldr	r3, [pc, #80]	; (162c <system_clock_init+0xe8>)
    15da:	721c      	strb	r4, [r3, #8]
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    15dc:	725c      	strb	r4, [r3, #9]
			break;
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    15de:	729c      	strb	r4, [r3, #10]
			break;
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
    15e0:	72dc      	strb	r4, [r3, #11]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    15e2:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    15e4:	466b      	mov	r3, sp
    15e6:	705c      	strb	r4, [r3, #1]
#if SAML21 || SAML22
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    15e8:	2306      	movs	r3, #6
    15ea:	466a      	mov	r2, sp
    15ec:	7013      	strb	r3, [r2, #0]
#endif
	config->run_in_standby     = false;
    15ee:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
    15f0:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    15f2:	2000      	movs	r0, #0
    15f4:	4669      	mov	r1, sp
    15f6:	47b8      	blx	r7
    15f8:	2000      	movs	r0, #0
    15fa:	47b0      	blx	r6
#endif
}
    15fc:	b007      	add	sp, #28
    15fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1600:	40000800 	.word	0x40000800
    1604:	41004000 	.word	0x41004000
    1608:	00001869 	.word	0x00001869
    160c:	00806024 	.word	0x00806024
    1610:	ff80ffff 	.word	0xff80ffff
    1614:	0000142d 	.word	0x0000142d
    1618:	000014b5 	.word	0x000014b5
    161c:	000013f1 	.word	0x000013f1
    1620:	00001631 	.word	0x00001631
    1624:	00001655 	.word	0x00001655
    1628:	0000170d 	.word	0x0000170d
    162c:	40000400 	.word	0x40000400

00001630 <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    1630:	4a06      	ldr	r2, [pc, #24]	; (164c <system_gclk_init+0x1c>)
    1632:	6991      	ldr	r1, [r2, #24]
    1634:	2308      	movs	r3, #8
    1636:	430b      	orrs	r3, r1
    1638:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    163a:	2201      	movs	r2, #1
    163c:	4b04      	ldr	r3, [pc, #16]	; (1650 <system_gclk_init+0x20>)
    163e:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1640:	1c19      	adds	r1, r3, #0
    1642:	780b      	ldrb	r3, [r1, #0]
    1644:	4213      	tst	r3, r2
    1646:	d1fc      	bne.n	1642 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    1648:	4770      	bx	lr
    164a:	46c0      	nop			; (mov r8, r8)
    164c:	40000400 	.word	0x40000400
    1650:	40000c00 	.word	0x40000c00

00001654 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1654:	b570      	push	{r4, r5, r6, lr}
    1656:	1c06      	adds	r6, r0, #0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1658:	1c04      	adds	r4, r0, #0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    165a:	780d      	ldrb	r5, [r1, #0]
    165c:	022d      	lsls	r5, r5, #8
    165e:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1660:	784b      	ldrb	r3, [r1, #1]
    1662:	2b00      	cmp	r3, #0
    1664:	d002      	beq.n	166c <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1666:	2380      	movs	r3, #128	; 0x80
    1668:	02db      	lsls	r3, r3, #11
    166a:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    166c:	7a4b      	ldrb	r3, [r1, #9]
    166e:	2b00      	cmp	r3, #0
    1670:	d002      	beq.n	1678 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1672:	2380      	movs	r3, #128	; 0x80
    1674:	031b      	lsls	r3, r3, #12
    1676:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1678:	6848      	ldr	r0, [r1, #4]
    167a:	2801      	cmp	r0, #1
    167c:	d918      	bls.n	16b0 <system_gclk_gen_set_config+0x5c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    167e:	1e43      	subs	r3, r0, #1
    1680:	4218      	tst	r0, r3
    1682:	d110      	bne.n	16a6 <system_gclk_gen_set_config+0x52>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1684:	2802      	cmp	r0, #2
    1686:	d906      	bls.n	1696 <system_gclk_gen_set_config+0x42>
    1688:	2302      	movs	r3, #2
    168a:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    168c:	3201      	adds	r2, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    168e:	005b      	lsls	r3, r3, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1690:	4298      	cmp	r0, r3
    1692:	d8fb      	bhi.n	168c <system_gclk_gen_set_config+0x38>
    1694:	e000      	b.n	1698 <system_gclk_gen_set_config+0x44>
    1696:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    1698:	0212      	lsls	r2, r2, #8
    169a:	4332      	orrs	r2, r6
    169c:	1c14      	adds	r4, r2, #0
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    169e:	2380      	movs	r3, #128	; 0x80
    16a0:	035b      	lsls	r3, r3, #13
    16a2:	431d      	orrs	r5, r3
    16a4:	e004      	b.n	16b0 <system_gclk_gen_set_config+0x5c>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    16a6:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    16a8:	4334      	orrs	r4, r6
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    16aa:	2380      	movs	r3, #128	; 0x80
    16ac:	029b      	lsls	r3, r3, #10
    16ae:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    16b0:	7a0b      	ldrb	r3, [r1, #8]
    16b2:	2b00      	cmp	r3, #0
    16b4:	d002      	beq.n	16bc <system_gclk_gen_set_config+0x68>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    16b6:	2380      	movs	r3, #128	; 0x80
    16b8:	039b      	lsls	r3, r3, #14
    16ba:	431d      	orrs	r5, r3
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    16bc:	4a0f      	ldr	r2, [pc, #60]	; (16fc <system_gclk_gen_set_config+0xa8>)
    16be:	7853      	ldrb	r3, [r2, #1]
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing()) {
    16c0:	b25b      	sxtb	r3, r3
    16c2:	2b00      	cmp	r3, #0
    16c4:	dbfb      	blt.n	16be <system_gclk_gen_set_config+0x6a>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    16c6:	4b0e      	ldr	r3, [pc, #56]	; (1700 <system_gclk_gen_set_config+0xac>)
    16c8:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    16ca:	4b0e      	ldr	r3, [pc, #56]	; (1704 <system_gclk_gen_set_config+0xb0>)
    16cc:	701e      	strb	r6, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    16ce:	4a0b      	ldr	r2, [pc, #44]	; (16fc <system_gclk_gen_set_config+0xa8>)
    16d0:	7853      	ldrb	r3, [r2, #1]

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    16d2:	b25b      	sxtb	r3, r3
    16d4:	2b00      	cmp	r3, #0
    16d6:	dbfb      	blt.n	16d0 <system_gclk_gen_set_config+0x7c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    16d8:	4b08      	ldr	r3, [pc, #32]	; (16fc <system_gclk_gen_set_config+0xa8>)
    16da:	609c      	str	r4, [r3, #8]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    16dc:	1c1a      	adds	r2, r3, #0
    16de:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;

	while (system_gclk_is_syncing()) {
    16e0:	b25b      	sxtb	r3, r3
    16e2:	2b00      	cmp	r3, #0
    16e4:	dbfb      	blt.n	16de <system_gclk_gen_set_config+0x8a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    16e6:	4a05      	ldr	r2, [pc, #20]	; (16fc <system_gclk_gen_set_config+0xa8>)
    16e8:	6851      	ldr	r1, [r2, #4]
    16ea:	2380      	movs	r3, #128	; 0x80
    16ec:	025b      	lsls	r3, r3, #9
    16ee:	400b      	ands	r3, r1
    16f0:	431d      	orrs	r5, r3
    16f2:	6055      	str	r5, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    16f4:	4b04      	ldr	r3, [pc, #16]	; (1708 <system_gclk_gen_set_config+0xb4>)
    16f6:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    16f8:	bd70      	pop	{r4, r5, r6, pc}
    16fa:	46c0      	nop			; (mov r8, r8)
    16fc:	40000c00 	.word	0x40000c00
    1700:	00001075 	.word	0x00001075
    1704:	40000c08 	.word	0x40000c08
    1708:	000010b5 	.word	0x000010b5

0000170c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    170c:	b510      	push	{r4, lr}
    170e:	1c04      	adds	r4, r0, #0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1710:	4a0b      	ldr	r2, [pc, #44]	; (1740 <system_gclk_gen_enable+0x34>)
    1712:	7853      	ldrb	r3, [r2, #1]
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    1714:	b25b      	sxtb	r3, r3
    1716:	2b00      	cmp	r3, #0
    1718:	dbfb      	blt.n	1712 <system_gclk_gen_enable+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    171a:	4b0a      	ldr	r3, [pc, #40]	; (1744 <system_gclk_gen_enable+0x38>)
    171c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    171e:	4b0a      	ldr	r3, [pc, #40]	; (1748 <system_gclk_gen_enable+0x3c>)
    1720:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1722:	4a07      	ldr	r2, [pc, #28]	; (1740 <system_gclk_gen_enable+0x34>)
    1724:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    1726:	b25b      	sxtb	r3, r3
    1728:	2b00      	cmp	r3, #0
    172a:	dbfb      	blt.n	1724 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    172c:	4a04      	ldr	r2, [pc, #16]	; (1740 <system_gclk_gen_enable+0x34>)
    172e:	6853      	ldr	r3, [r2, #4]
    1730:	2180      	movs	r1, #128	; 0x80
    1732:	0249      	lsls	r1, r1, #9
    1734:	430b      	orrs	r3, r1
    1736:	6053      	str	r3, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1738:	4b04      	ldr	r3, [pc, #16]	; (174c <system_gclk_gen_enable+0x40>)
    173a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    173c:	bd10      	pop	{r4, pc}
    173e:	46c0      	nop			; (mov r8, r8)
    1740:	40000c00 	.word	0x40000c00
    1744:	00001075 	.word	0x00001075
    1748:	40000c04 	.word	0x40000c04
    174c:	000010b5 	.word	0x000010b5

00001750 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1750:	b570      	push	{r4, r5, r6, lr}
    1752:	1c04      	adds	r4, r0, #0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1754:	4a1a      	ldr	r2, [pc, #104]	; (17c0 <system_gclk_gen_get_hz+0x70>)
    1756:	7853      	ldrb	r3, [r2, #1]
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    1758:	b25b      	sxtb	r3, r3
    175a:	2b00      	cmp	r3, #0
    175c:	dbfb      	blt.n	1756 <system_gclk_gen_get_hz+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    175e:	4b19      	ldr	r3, [pc, #100]	; (17c4 <system_gclk_gen_get_hz+0x74>)
    1760:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1762:	4b19      	ldr	r3, [pc, #100]	; (17c8 <system_gclk_gen_get_hz+0x78>)
    1764:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1766:	4a16      	ldr	r2, [pc, #88]	; (17c0 <system_gclk_gen_get_hz+0x70>)
    1768:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    176a:	b25b      	sxtb	r3, r3
    176c:	2b00      	cmp	r3, #0
    176e:	dbfb      	blt.n	1768 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    1770:	4e13      	ldr	r6, [pc, #76]	; (17c0 <system_gclk_gen_get_hz+0x70>)
    1772:	6870      	ldr	r0, [r6, #4]
    1774:	04c0      	lsls	r0, r0, #19
    1776:	0ec0      	lsrs	r0, r0, #27
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1778:	4b14      	ldr	r3, [pc, #80]	; (17cc <system_gclk_gen_get_hz+0x7c>)
    177a:	4798      	blx	r3
    177c:	1c05      	adds	r5, r0, #0
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    177e:	4b12      	ldr	r3, [pc, #72]	; (17c8 <system_gclk_gen_get_hz+0x78>)
    1780:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    1782:	6876      	ldr	r6, [r6, #4]
    1784:	02f6      	lsls	r6, r6, #11
    1786:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1788:	4b11      	ldr	r3, [pc, #68]	; (17d0 <system_gclk_gen_get_hz+0x80>)
    178a:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    178c:	4a0c      	ldr	r2, [pc, #48]	; (17c0 <system_gclk_gen_get_hz+0x70>)
    178e:	7853      	ldrb	r3, [r2, #1]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
	while (system_gclk_is_syncing()) {
    1790:	b25b      	sxtb	r3, r3
    1792:	2b00      	cmp	r3, #0
    1794:	dbfb      	blt.n	178e <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    1796:	4b0a      	ldr	r3, [pc, #40]	; (17c0 <system_gclk_gen_get_hz+0x70>)
    1798:	689c      	ldr	r4, [r3, #8]
    179a:	0a24      	lsrs	r4, r4, #8
    179c:	b2a4      	uxth	r4, r4
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    179e:	4b0d      	ldr	r3, [pc, #52]	; (17d4 <system_gclk_gen_get_hz+0x84>)
    17a0:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    17a2:	2e00      	cmp	r6, #0
    17a4:	d107      	bne.n	17b6 <system_gclk_gen_get_hz+0x66>
    17a6:	2c01      	cmp	r4, #1
    17a8:	d907      	bls.n	17ba <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    17aa:	1c28      	adds	r0, r5, #0
    17ac:	1c21      	adds	r1, r4, #0
    17ae:	4b0a      	ldr	r3, [pc, #40]	; (17d8 <system_gclk_gen_get_hz+0x88>)
    17b0:	4798      	blx	r3
    17b2:	1c05      	adds	r5, r0, #0
    17b4:	e001      	b.n	17ba <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    17b6:	3401      	adds	r4, #1
    17b8:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    17ba:	1c28      	adds	r0, r5, #0
    17bc:	bd70      	pop	{r4, r5, r6, pc}
    17be:	46c0      	nop			; (mov r8, r8)
    17c0:	40000c00 	.word	0x40000c00
    17c4:	00001075 	.word	0x00001075
    17c8:	40000c04 	.word	0x40000c04
    17cc:	00001371 	.word	0x00001371
    17d0:	40000c08 	.word	0x40000c08
    17d4:	000010b5 	.word	0x000010b5
    17d8:	00001bd5 	.word	0x00001bd5

000017dc <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    17dc:	b510      	push	{r4, lr}
    17de:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    17e0:	4b06      	ldr	r3, [pc, #24]	; (17fc <system_gclk_chan_enable+0x20>)
    17e2:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    17e4:	4b06      	ldr	r3, [pc, #24]	; (1800 <system_gclk_chan_enable+0x24>)
    17e6:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    17e8:	4a06      	ldr	r2, [pc, #24]	; (1804 <system_gclk_chan_enable+0x28>)
    17ea:	8851      	ldrh	r1, [r2, #2]
    17ec:	2380      	movs	r3, #128	; 0x80
    17ee:	01db      	lsls	r3, r3, #7
    17f0:	430b      	orrs	r3, r1
    17f2:	8053      	strh	r3, [r2, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    17f4:	4b04      	ldr	r3, [pc, #16]	; (1808 <system_gclk_chan_enable+0x2c>)
    17f6:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    17f8:	bd10      	pop	{r4, pc}
    17fa:	46c0      	nop			; (mov r8, r8)
    17fc:	00001075 	.word	0x00001075
    1800:	40000c02 	.word	0x40000c02
    1804:	40000c00 	.word	0x40000c00
    1808:	000010b5 	.word	0x000010b5

0000180c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    180c:	b510      	push	{r4, lr}
    180e:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1810:	4b0f      	ldr	r3, [pc, #60]	; (1850 <system_gclk_chan_disable+0x44>)
    1812:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1814:	4b0f      	ldr	r3, [pc, #60]	; (1854 <system_gclk_chan_disable+0x48>)
    1816:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1818:	4b0f      	ldr	r3, [pc, #60]	; (1858 <system_gclk_chan_disable+0x4c>)
    181a:	885a      	ldrh	r2, [r3, #2]
    181c:	0512      	lsls	r2, r2, #20
    181e:	0f10      	lsrs	r0, r2, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    1820:	8859      	ldrh	r1, [r3, #2]
    1822:	4a0e      	ldr	r2, [pc, #56]	; (185c <system_gclk_chan_disable+0x50>)
    1824:	400a      	ands	r2, r1
    1826:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1828:	8859      	ldrh	r1, [r3, #2]
    182a:	4a0d      	ldr	r2, [pc, #52]	; (1860 <system_gclk_chan_disable+0x54>)
    182c:	400a      	ands	r2, r1
    182e:	805a      	strh	r2, [r3, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1830:	1c19      	adds	r1, r3, #0
    1832:	2280      	movs	r2, #128	; 0x80
    1834:	01d2      	lsls	r2, r2, #7
    1836:	884b      	ldrh	r3, [r1, #2]
    1838:	4213      	tst	r3, r2
    183a:	d1fc      	bne.n	1836 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    183c:	4906      	ldr	r1, [pc, #24]	; (1858 <system_gclk_chan_disable+0x4c>)
    183e:	0202      	lsls	r2, r0, #8
    1840:	8848      	ldrh	r0, [r1, #2]
    1842:	4b06      	ldr	r3, [pc, #24]	; (185c <system_gclk_chan_disable+0x50>)
    1844:	4003      	ands	r3, r0
    1846:	4313      	orrs	r3, r2
    1848:	804b      	strh	r3, [r1, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    184a:	4b06      	ldr	r3, [pc, #24]	; (1864 <system_gclk_chan_disable+0x58>)
    184c:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    184e:	bd10      	pop	{r4, pc}
    1850:	00001075 	.word	0x00001075
    1854:	40000c02 	.word	0x40000c02
    1858:	40000c00 	.word	0x40000c00
    185c:	fffff0ff 	.word	0xfffff0ff
    1860:	ffffbfff 	.word	0xffffbfff
    1864:	000010b5 	.word	0x000010b5

00001868 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    1868:	b510      	push	{r4, lr}

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    186a:	780c      	ldrb	r4, [r1, #0]
    186c:	0224      	lsls	r4, r4, #8
    186e:	4304      	orrs	r4, r0

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    1870:	4b02      	ldr	r3, [pc, #8]	; (187c <system_gclk_chan_set_config+0x14>)
    1872:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    1874:	b2a4      	uxth	r4, r4
    1876:	4b02      	ldr	r3, [pc, #8]	; (1880 <system_gclk_chan_set_config+0x18>)
    1878:	805c      	strh	r4, [r3, #2]
}
    187a:	bd10      	pop	{r4, pc}
    187c:	0000180d 	.word	0x0000180d
    1880:	40000c00 	.word	0x40000c00

00001884 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1884:	b510      	push	{r4, lr}
    1886:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1888:	4b06      	ldr	r3, [pc, #24]	; (18a4 <system_gclk_chan_get_hz+0x20>)
    188a:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    188c:	4b06      	ldr	r3, [pc, #24]	; (18a8 <system_gclk_chan_get_hz+0x24>)
    188e:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    1890:	4b06      	ldr	r3, [pc, #24]	; (18ac <system_gclk_chan_get_hz+0x28>)
    1892:	885c      	ldrh	r4, [r3, #2]
    1894:	0524      	lsls	r4, r4, #20
    1896:	0f24      	lsrs	r4, r4, #28
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1898:	4b05      	ldr	r3, [pc, #20]	; (18b0 <system_gclk_chan_get_hz+0x2c>)
    189a:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    189c:	1c20      	adds	r0, r4, #0
    189e:	4b05      	ldr	r3, [pc, #20]	; (18b4 <system_gclk_chan_get_hz+0x30>)
    18a0:	4798      	blx	r3
}
    18a2:	bd10      	pop	{r4, pc}
    18a4:	00001075 	.word	0x00001075
    18a8:	40000c02 	.word	0x40000c02
    18ac:	40000c00 	.word	0x40000c00
    18b0:	000010b5 	.word	0x000010b5
    18b4:	00001751 	.word	0x00001751

000018b8 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    18b8:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    18ba:	78d3      	ldrb	r3, [r2, #3]
    18bc:	2b00      	cmp	r3, #0
    18be:	d11e      	bne.n	18fe <_system_pinmux_config+0x46>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    18c0:	7814      	ldrb	r4, [r2, #0]
    18c2:	2c80      	cmp	r4, #128	; 0x80
    18c4:	d004      	beq.n	18d0 <_system_pinmux_config+0x18>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    18c6:	0624      	lsls	r4, r4, #24
    18c8:	2380      	movs	r3, #128	; 0x80
    18ca:	025b      	lsls	r3, r3, #9
    18cc:	431c      	orrs	r4, r3
    18ce:	e000      	b.n	18d2 <_system_pinmux_config+0x1a>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    18d0:	2400      	movs	r4, #0
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    18d2:	7853      	ldrb	r3, [r2, #1]
    18d4:	2502      	movs	r5, #2
    18d6:	43ab      	bics	r3, r5
    18d8:	d10a      	bne.n	18f0 <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    18da:	7893      	ldrb	r3, [r2, #2]
    18dc:	2b00      	cmp	r3, #0
    18de:	d103      	bne.n	18e8 <_system_pinmux_config+0x30>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    18e0:	2380      	movs	r3, #128	; 0x80
    18e2:	029b      	lsls	r3, r3, #10
    18e4:	431c      	orrs	r4, r3
    18e6:	e002      	b.n	18ee <_system_pinmux_config+0x36>

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    18e8:	23c0      	movs	r3, #192	; 0xc0
    18ea:	02db      	lsls	r3, r3, #11
    18ec:	431c      	orrs	r4, r3
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    18ee:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    18f0:	7853      	ldrb	r3, [r2, #1]
    18f2:	3b01      	subs	r3, #1
    18f4:	2b01      	cmp	r3, #1
    18f6:	d812      	bhi.n	191e <_system_pinmux_config+0x66>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    18f8:	4b18      	ldr	r3, [pc, #96]	; (195c <_system_pinmux_config+0xa4>)
    18fa:	401c      	ands	r4, r3
    18fc:	e00f      	b.n	191e <_system_pinmux_config+0x66>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    18fe:	6041      	str	r1, [r0, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1900:	040b      	lsls	r3, r1, #16
    1902:	0c1b      	lsrs	r3, r3, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1904:	24a0      	movs	r4, #160	; 0xa0
    1906:	05e4      	lsls	r4, r4, #23
    1908:	4323      	orrs	r3, r4
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    190a:	6283      	str	r3, [r0, #40]	; 0x28
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
	uint32_t upper_pin_mask = (pin_mask >> 16);
    190c:	0c0b      	lsrs	r3, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    190e:	24d0      	movs	r4, #208	; 0xd0
    1910:	0624      	lsls	r4, r4, #24
    1912:	4323      	orrs	r3, r4
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1914:	6283      	str	r3, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1916:	78d3      	ldrb	r3, [r2, #3]
    1918:	2b00      	cmp	r3, #0
    191a:	d018      	beq.n	194e <_system_pinmux_config+0x96>
    191c:	e01c      	b.n	1958 <_system_pinmux_config+0xa0>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    191e:	040b      	lsls	r3, r1, #16
    1920:	0c1b      	lsrs	r3, r3, #16
    1922:	25a0      	movs	r5, #160	; 0xa0
    1924:	05ed      	lsls	r5, r5, #23
    1926:	432b      	orrs	r3, r5

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1928:	4323      	orrs	r3, r4
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    192a:	6283      	str	r3, [r0, #40]	; 0x28
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
	uint32_t upper_pin_mask = (pin_mask >> 16);
    192c:	0c0b      	lsrs	r3, r1, #16
    192e:	25d0      	movs	r5, #208	; 0xd0
    1930:	062d      	lsls	r5, r5, #24
    1932:	432b      	orrs	r3, r5

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1934:	4323      	orrs	r3, r4
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1936:	6283      	str	r3, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1938:	78d3      	ldrb	r3, [r2, #3]
    193a:	2b00      	cmp	r3, #0
    193c:	d10c      	bne.n	1958 <_system_pinmux_config+0xa0>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    193e:	0363      	lsls	r3, r4, #13
    1940:	d505      	bpl.n	194e <_system_pinmux_config+0x96>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1942:	7893      	ldrb	r3, [r2, #2]
    1944:	2b01      	cmp	r3, #1
    1946:	d101      	bne.n	194c <_system_pinmux_config+0x94>
				port->OUTSET.reg = pin_mask;
    1948:	6181      	str	r1, [r0, #24]
    194a:	e000      	b.n	194e <_system_pinmux_config+0x96>
			} else {
				port->OUTCLR.reg = pin_mask;
    194c:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    194e:	7853      	ldrb	r3, [r2, #1]
    1950:	3b01      	subs	r3, #1
    1952:	2b01      	cmp	r3, #1
    1954:	d800      	bhi.n	1958 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    1956:	6081      	str	r1, [r0, #8]
		}
	}
}
    1958:	bd30      	pop	{r4, r5, pc}
    195a:	46c0      	nop			; (mov r8, r8)
    195c:	fffbffff 	.word	0xfffbffff

00001960 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1960:	b508      	push	{r3, lr}
    1962:	1c03      	adds	r3, r0, #0
    1964:	1c0a      	adds	r2, r1, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1966:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1968:	2000      	movs	r0, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    196a:	2900      	cmp	r1, #0
    196c:	d104      	bne.n	1978 <system_pinmux_pin_set_config+0x18>
		return &(ports[port_index]->Group[group_index]);
    196e:	0958      	lsrs	r0, r3, #5
    1970:	01c0      	lsls	r0, r0, #7
    1972:	4905      	ldr	r1, [pc, #20]	; (1988 <system_pinmux_pin_set_config+0x28>)
    1974:	468c      	mov	ip, r1
    1976:	4460      	add	r0, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1978:	211f      	movs	r1, #31
    197a:	400b      	ands	r3, r1
    197c:	391e      	subs	r1, #30
    197e:	4099      	lsls	r1, r3

	_system_pinmux_config(port, pin_mask, config);
    1980:	4b02      	ldr	r3, [pc, #8]	; (198c <system_pinmux_pin_set_config+0x2c>)
    1982:	4798      	blx	r3
}
    1984:	bd08      	pop	{r3, pc}
    1986:	46c0      	nop			; (mov r8, r8)
    1988:	41004400 	.word	0x41004400
    198c:	000018b9 	.word	0x000018b9

00001990 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1990:	4770      	bx	lr
    1992:	46c0      	nop			; (mov r8, r8)

00001994 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1994:	b508      	push	{r3, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    1996:	4b05      	ldr	r3, [pc, #20]	; (19ac <system_init+0x18>)
    1998:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    199a:	4b05      	ldr	r3, [pc, #20]	; (19b0 <system_init+0x1c>)
    199c:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    199e:	4b05      	ldr	r3, [pc, #20]	; (19b4 <system_init+0x20>)
    19a0:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    19a2:	4b05      	ldr	r3, [pc, #20]	; (19b8 <system_init+0x24>)
    19a4:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    19a6:	4b05      	ldr	r3, [pc, #20]	; (19bc <system_init+0x28>)
    19a8:	4798      	blx	r3
}
    19aa:	bd08      	pop	{r3, pc}
    19ac:	00001545 	.word	0x00001545
    19b0:	000010e5 	.word	0x000010e5
    19b4:	00001991 	.word	0x00001991
    19b8:	00001991 	.word	0x00001991
    19bc:	00001991 	.word	0x00001991

000019c0 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
        while (1) {
        }
    19c0:	e7fe      	b.n	19c0 <Dummy_Handler>
    19c2:	46c0      	nop			; (mov r8, r8)

000019c4 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    19c4:	b510      	push	{r4, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    19c6:	4b1d      	ldr	r3, [pc, #116]	; (1a3c <Reset_Handler+0x78>)
    19c8:	4a1d      	ldr	r2, [pc, #116]	; (1a40 <Reset_Handler+0x7c>)
    19ca:	429a      	cmp	r2, r3
    19cc:	d003      	beq.n	19d6 <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
    19ce:	4b1d      	ldr	r3, [pc, #116]	; (1a44 <Reset_Handler+0x80>)
    19d0:	4a1a      	ldr	r2, [pc, #104]	; (1a3c <Reset_Handler+0x78>)
    19d2:	429a      	cmp	r2, r3
    19d4:	d304      	bcc.n	19e0 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    19d6:	4b1c      	ldr	r3, [pc, #112]	; (1a48 <Reset_Handler+0x84>)
    19d8:	4a1c      	ldr	r2, [pc, #112]	; (1a4c <Reset_Handler+0x88>)
    19da:	429a      	cmp	r2, r3
    19dc:	d310      	bcc.n	1a00 <Reset_Handler+0x3c>
    19de:	e01e      	b.n	1a1e <Reset_Handler+0x5a>
    19e0:	4a1b      	ldr	r2, [pc, #108]	; (1a50 <Reset_Handler+0x8c>)
    19e2:	4b18      	ldr	r3, [pc, #96]	; (1a44 <Reset_Handler+0x80>)
    19e4:	3303      	adds	r3, #3
    19e6:	1a9b      	subs	r3, r3, r2
    19e8:	089b      	lsrs	r3, r3, #2
    19ea:	3301      	adds	r3, #1
    19ec:	009b      	lsls	r3, r3, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    19ee:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    19f0:	4812      	ldr	r0, [pc, #72]	; (1a3c <Reset_Handler+0x78>)
    19f2:	4913      	ldr	r1, [pc, #76]	; (1a40 <Reset_Handler+0x7c>)
    19f4:	588c      	ldr	r4, [r1, r2]
    19f6:	5084      	str	r4, [r0, r2]
    19f8:	3204      	adds	r2, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    19fa:	429a      	cmp	r2, r3
    19fc:	d1fa      	bne.n	19f4 <Reset_Handler+0x30>
    19fe:	e7ea      	b.n	19d6 <Reset_Handler+0x12>
    1a00:	4a14      	ldr	r2, [pc, #80]	; (1a54 <Reset_Handler+0x90>)
    1a02:	4b11      	ldr	r3, [pc, #68]	; (1a48 <Reset_Handler+0x84>)
    1a04:	3303      	adds	r3, #3
    1a06:	1a9b      	subs	r3, r3, r2
    1a08:	089b      	lsrs	r3, r3, #2
    1a0a:	3301      	adds	r3, #1
    1a0c:	009b      	lsls	r3, r3, #2
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    1a0e:	2200      	movs	r2, #0
                *pDest++ = 0;
    1a10:	480e      	ldr	r0, [pc, #56]	; (1a4c <Reset_Handler+0x88>)
    1a12:	2100      	movs	r1, #0
    1a14:	1814      	adds	r4, r2, r0
    1a16:	6021      	str	r1, [r4, #0]
    1a18:	3204      	adds	r2, #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    1a1a:	429a      	cmp	r2, r3
    1a1c:	d1fa      	bne.n	1a14 <Reset_Handler+0x50>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1a1e:	4a0e      	ldr	r2, [pc, #56]	; (1a58 <Reset_Handler+0x94>)
    1a20:	21ff      	movs	r1, #255	; 0xff
    1a22:	4b0e      	ldr	r3, [pc, #56]	; (1a5c <Reset_Handler+0x98>)
    1a24:	438b      	bics	r3, r1
    1a26:	6093      	str	r3, [r2, #8]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    1a28:	4a0d      	ldr	r2, [pc, #52]	; (1a60 <Reset_Handler+0x9c>)
    1a2a:	6851      	ldr	r1, [r2, #4]
    1a2c:	2380      	movs	r3, #128	; 0x80
    1a2e:	430b      	orrs	r3, r1
    1a30:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    1a32:	4b0c      	ldr	r3, [pc, #48]	; (1a64 <Reset_Handler+0xa0>)
    1a34:	4798      	blx	r3

        /* Branch to main function */
        main();
    1a36:	4b0c      	ldr	r3, [pc, #48]	; (1a68 <Reset_Handler+0xa4>)
    1a38:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    1a3a:	e7fe      	b.n	1a3a <Reset_Handler+0x76>
    1a3c:	20000000 	.word	0x20000000
    1a40:	00001dd8 	.word	0x00001dd8
    1a44:	20000018 	.word	0x20000018
    1a48:	20000070 	.word	0x20000070
    1a4c:	20000018 	.word	0x20000018
    1a50:	20000004 	.word	0x20000004
    1a54:	2000001c 	.word	0x2000001c
    1a58:	e000ed00 	.word	0xe000ed00
    1a5c:	00000000 	.word	0x00000000
    1a60:	41004000 	.word	0x41004000
    1a64:	00001cf9 	.word	0x00001cf9
    1a68:	00001afd 	.word	0x00001afd

00001a6c <configure_rtc_count>:
	0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12, 0x13
};

//! [initiate]
void configure_rtc_count(void)
{
    1a6c:	b510      	push	{r4, lr}
    1a6e:	b084      	sub	sp, #16
	Assert(config);

	/* Set default into configuration structure */
	config->prescaler           = RTC_COUNT_PRESCALER_DIV_1024;
	config->mode                = RTC_COUNT_MODE_32BIT;
	config->clear_on_match      = false;
    1a70:	2300      	movs	r3, #0
    1a72:	466a      	mov	r2, sp
    1a74:	70d3      	strb	r3, [r2, #3]
#if (SAML22)
	config->enable_read_sync    = true;
#endif

	for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
		config->compare_values[i] = 0;
    1a76:	9303      	str	r3, [sp, #12]
//! [get_default]
	rtc_count_get_config_defaults(&config_rtc_count);
//! [get_default]

//! [set_config]
	config_rtc_count.prescaler           = RTC_COUNT_PRESCALER_DIV_1;
    1a78:	8013      	strh	r3, [r2, #0]
	config_rtc_count.mode                = RTC_COUNT_MODE_16BIT;
    1a7a:	7093      	strb	r3, [r2, #2]
	//config_rtc_count.mode                = RTC_COUNT_MODE_32BIT;
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config_rtc_count.continuously_update = true;
    1a7c:	2301      	movs	r3, #1
    1a7e:	7113      	strb	r3, [r2, #4]
#endif
	//config_rtc_count.compare_values[0]   = 1000;
	config_rtc_count.compare_values[0]   = 1;
    1a80:	9302      	str	r3, [sp, #8]
//! [set_config]
//! [init_rtc]
	rtc_count_init(&rtc_instance, RTC, &config_rtc_count);
    1a82:	4c05      	ldr	r4, [pc, #20]	; (1a98 <configure_rtc_count+0x2c>)
    1a84:	1c20      	adds	r0, r4, #0
    1a86:	4905      	ldr	r1, [pc, #20]	; (1a9c <configure_rtc_count+0x30>)
    1a88:	4b05      	ldr	r3, [pc, #20]	; (1aa0 <configure_rtc_count+0x34>)
    1a8a:	4798      	blx	r3
//! [init_rtc]

//! [enable]
	rtc_count_enable(&rtc_instance);
    1a8c:	1c20      	adds	r0, r4, #0
    1a8e:	4b05      	ldr	r3, [pc, #20]	; (1aa4 <configure_rtc_count+0x38>)
    1a90:	4798      	blx	r3
//! [enable]
}
    1a92:	b004      	add	sp, #16
    1a94:	bd10      	pop	{r4, pc}
    1a96:	46c0      	nop			; (mov r8, r8)
    1a98:	20000068 	.word	0x20000068
    1a9c:	40001400 	.word	0x40001400
    1aa0:	0000120d 	.word	0x0000120d
    1aa4:	00001149 	.word	0x00001149

00001aa8 <Delay6us>:
		TempCounter++;
	}	
}

void Delay6us(void)
{
    1aa8:	b508      	push	{r3, lr}
	if (rtc_count_is_compare_match(&rtc_instance, RTC_COUNT_COMPARE_0)) 
    1aaa:	4805      	ldr	r0, [pc, #20]	; (1ac0 <Delay6us+0x18>)
    1aac:	2100      	movs	r1, #0
    1aae:	4b05      	ldr	r3, [pc, #20]	; (1ac4 <Delay6us+0x1c>)
    1ab0:	4798      	blx	r3
    1ab2:	2800      	cmp	r0, #0
    1ab4:	d003      	beq.n	1abe <Delay6us+0x16>
		/* Do something on RTC count match here */
		//port_pin_toggle_output_level(LED_0_PIN);
		//! [compare_match_action]

		//! [clear_compare_match]
		rtc_count_clear_compare_match(&rtc_instance, RTC_COUNT_COMPARE_0);
    1ab6:	4802      	ldr	r0, [pc, #8]	; (1ac0 <Delay6us+0x18>)
    1ab8:	2100      	movs	r1, #0
    1aba:	4b03      	ldr	r3, [pc, #12]	; (1ac8 <Delay6us+0x20>)
    1abc:	4798      	blx	r3
		//! [clear_compare_match]
	}
	
    1abe:	bd08      	pop	{r3, pc}
    1ac0:	20000068 	.word	0x20000068
    1ac4:	00001315 	.word	0x00001315
    1ac8:	00001341 	.word	0x00001341

00001acc <Delayms>:
		TempCounter++;
	}
}

void Delayms(void)
{
    1acc:	b538      	push	{r3, r4, r5, lr}
    1ace:	24a7      	movs	r4, #167	; 0xa7
	uint32_t TempCounter = 0;
	while(167 > TempCounter)
	{
		Delay6us();
    1ad0:	4d02      	ldr	r5, [pc, #8]	; (1adc <Delayms+0x10>)
    1ad2:	47a8      	blx	r5
    1ad4:	3c01      	subs	r4, #1
}

void Delayms(void)
{
	uint32_t TempCounter = 0;
	while(167 > TempCounter)
    1ad6:	2c00      	cmp	r4, #0
    1ad8:	d1fb      	bne.n	1ad2 <Delayms+0x6>
	{
		Delay6us();
		TempCounter++;
	}	
}
    1ada:	bd38      	pop	{r3, r4, r5, pc}
    1adc:	00001aa9 	.word	0x00001aa9

00001ae0 <DelayNms>:
//! [implementation_code]

}

void DelayNms(uint32_t N)
{
    1ae0:	b570      	push	{r4, r5, r6, lr}
	uint32_t TempCounter = 0;
	while(N > TempCounter)
    1ae2:	2800      	cmp	r0, #0
    1ae4:	d006      	beq.n	1af4 <DelayNms+0x14>
    1ae6:	1c05      	adds	r5, r0, #0
    1ae8:	2400      	movs	r4, #0
	{
		Delayms();
    1aea:	4e03      	ldr	r6, [pc, #12]	; (1af8 <DelayNms+0x18>)
    1aec:	47b0      	blx	r6
		TempCounter++;
    1aee:	3401      	adds	r4, #1
}

void DelayNms(uint32_t N)
{
	uint32_t TempCounter = 0;
	while(N > TempCounter)
    1af0:	42ac      	cmp	r4, r5
    1af2:	d1fb      	bne.n	1aec <DelayNms+0xc>
	{
		Delayms();
		TempCounter++;
	}
}
    1af4:	bd70      	pop	{r4, r5, r6, pc}
    1af6:	46c0      	nop			; (mov r8, r8)
    1af8:	00001acd 	.word	0x00001acd

00001afc <main>:
//! [enable]
}
//! [initiate]

int main(void)
{
    1afc:	b5f0      	push	{r4, r5, r6, r7, lr}
    1afe:	b083      	sub	sp, #12
	/* Initialize system. Must configure conf_clocks.h first. */
//! [system]
	system_init();
    1b00:	4b21      	ldr	r3, [pc, #132]	; (1b88 <main+0x8c>)
    1b02:	4798      	blx	r3
//! [system]

//! [add_main]
	configure_rtc_count();
    1b04:	4b21      	ldr	r3, [pc, #132]	; (1b8c <main+0x90>)
    1b06:	4798      	blx	r3
//! [add_main]

//! [implementation_code]
//! [period]
	//rtc_count_set_period(&rtc_instance, 2000);
	rtc_count_set_period(&rtc_instance, 1);
    1b08:	4821      	ldr	r0, [pc, #132]	; (1b90 <main+0x94>)
    1b0a:	2101      	movs	r1, #1
    1b0c:	4b21      	ldr	r3, [pc, #132]	; (1b94 <main+0x98>)
    1b0e:	4798      	blx	r3
//! [period]

	configure_spi_master();
    1b10:	4b21      	ldr	r3, [pc, #132]	; (1b98 <main+0x9c>)
    1b12:	4798      	blx	r3
	
//DelayNms
//(*Delay_ms)(100);

	Delay_ms = DelayNms;
    1b14:	4e21      	ldr	r6, [pc, #132]	; (1b9c <main+0xa0>)
    1b16:	4b22      	ldr	r3, [pc, #136]	; (1ba0 <main+0xa4>)
    1b18:	601e      	str	r6, [r3, #0]
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
    1b1a:	4c22      	ldr	r4, [pc, #136]	; (1ba4 <main+0xa8>)
    1b1c:	2580      	movs	r5, #128	; 0x80
    1b1e:	01ed      	lsls	r5, r5, #7
    1b20:	61e5      	str	r5, [r4, #28]
	port_pin_toggle_output_level(LED_0_PIN);
	DelayNms(100);
    1b22:	2064      	movs	r0, #100	; 0x64
    1b24:	47b0      	blx	r6
    1b26:	61e5      	str	r5, [r4, #28]
	port_pin_toggle_output_level(LED_0_PIN);
	
	Init_NRF24L_Reciever();
    1b28:	4b1f      	ldr	r3, [pc, #124]	; (1ba8 <main+0xac>)
    1b2a:	4798      	blx	r3
    1b2c:	61e5      	str	r5, [r4, #28]
	//Init_NRF24L_Transmitter();
	
	port_pin_toggle_output_level(LED_0_PIN);
	DelayNms(100);
    1b2e:	2064      	movs	r0, #100	; 0x64
    1b30:	47b0      	blx	r6
    1b32:	61e5      	str	r5, [r4, #28]
	port_pin_toggle_output_level(LED_0_PIN);
	
	unsigned char NRF_Recieve_Array[100];
	unsigned char ArrayIn[50];
	unsigned char ArrayOut[50];
	unsigned char PayloadOut[5] = {'J', 'U', 'S', 'T', 'I'};
    1b34:	4668      	mov	r0, sp
    1b36:	491d      	ldr	r1, [pc, #116]	; (1bac <main+0xb0>)
    1b38:	2205      	movs	r2, #5
    1b3a:	4b1d      	ldr	r3, [pc, #116]	; (1bb0 <main+0xb4>)
    1b3c:	4798      	blx	r3
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1b3e:	2380      	movs	r3, #128	; 0x80
    1b40:	035b      	lsls	r3, r3, #13
    1b42:	61a3      	str	r3, [r4, #24]
	
	CE_ON;
	
	if(1 == SendNotGet)
	{
		Set_NRF24L_Tx_Mode();
    1b44:	4b1b      	ldr	r3, [pc, #108]	; (1bb4 <main+0xb8>)
    1b46:	4798      	blx	r3
	while (true) 
	{
		//(*Delay_ms)(100);
		//Delay6us();
		//Delayms();
		DelayNms(500);
    1b48:	4f14      	ldr	r7, [pc, #80]	; (1b9c <main+0xa0>)
		port_pin_toggle_output_level(LED_0_PIN);
		
		//SendNewPayload(SendArray, 5);
		SendNewPayload(PayloadOut, 5);
    1b4a:	4e1b      	ldr	r6, [pc, #108]	; (1bb8 <main+0xbc>)
		Clear_NRF_Int_Flags();
    1b4c:	4d1b      	ldr	r5, [pc, #108]	; (1bbc <main+0xc0>)
	while (true) 
	{
		//(*Delay_ms)(100);
		//Delay6us();
		//Delayms();
		DelayNms(500);
    1b4e:	20fa      	movs	r0, #250	; 0xfa
    1b50:	0040      	lsls	r0, r0, #1
    1b52:	47b8      	blx	r7
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
    1b54:	4c13      	ldr	r4, [pc, #76]	; (1ba4 <main+0xa8>)
    1b56:	2380      	movs	r3, #128	; 0x80
    1b58:	01db      	lsls	r3, r3, #7
    1b5a:	61e3      	str	r3, [r4, #28]
		port_pin_toggle_output_level(LED_0_PIN);
		
		//SendNewPayload(SendArray, 5);
		SendNewPayload(PayloadOut, 5);
    1b5c:	4668      	mov	r0, sp
    1b5e:	2105      	movs	r1, #5
    1b60:	47b0      	blx	r6
		Clear_NRF_Int_Flags();
    1b62:	47a8      	blx	r5
		const uint8_t gpio_pin)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	return (port_base->IN.reg & pin_mask);
    1b64:	6a23      	ldr	r3, [r4, #32]
		//BLUE_RGB_ON;
		
		if(!port_pin_get_input_level(BUTTON_0_PIN)) 
    1b66:	041b      	lsls	r3, r3, #16
    1b68:	d4f1      	bmi.n	1b4e <main+0x52>
		{
			spi_select_slave(&spi_master_instance, &slave, true);
    1b6a:	4815      	ldr	r0, [pc, #84]	; (1bc0 <main+0xc4>)
    1b6c:	4915      	ldr	r1, [pc, #84]	; (1bc4 <main+0xc8>)
    1b6e:	2201      	movs	r2, #1
    1b70:	4c15      	ldr	r4, [pc, #84]	; (1bc8 <main+0xcc>)
    1b72:	47a0      	blx	r4
			spi_write_buffer_wait(&spi_master_instance, buffer, BUF_LENGTH);
    1b74:	4812      	ldr	r0, [pc, #72]	; (1bc0 <main+0xc4>)
    1b76:	4915      	ldr	r1, [pc, #84]	; (1bcc <main+0xd0>)
    1b78:	2214      	movs	r2, #20
    1b7a:	4b15      	ldr	r3, [pc, #84]	; (1bd0 <main+0xd4>)
    1b7c:	4798      	blx	r3
			spi_select_slave(&spi_master_instance, &slave, false);
    1b7e:	4810      	ldr	r0, [pc, #64]	; (1bc0 <main+0xc4>)
    1b80:	4910      	ldr	r1, [pc, #64]	; (1bc4 <main+0xc8>)
    1b82:	2200      	movs	r2, #0
    1b84:	47a0      	blx	r4
    1b86:	e7e2      	b.n	1b4e <main+0x52>
    1b88:	00001995 	.word	0x00001995
    1b8c:	00001a6d 	.word	0x00001a6d
    1b90:	20000068 	.word	0x20000068
    1b94:	000012f1 	.word	0x000012f1
    1b98:	00000385 	.word	0x00000385
    1b9c:	00001ae1 	.word	0x00001ae1
    1ba0:	20000054 	.word	0x20000054
    1ba4:	41004400 	.word	0x41004400
    1ba8:	0000065d 	.word	0x0000065d
    1bac:	00001db0 	.word	0x00001db0
    1bb0:	00001d45 	.word	0x00001d45
    1bb4:	00000601 	.word	0x00000601
    1bb8:	0000075d 	.word	0x0000075d
    1bbc:	00000579 	.word	0x00000579
    1bc0:	20000058 	.word	0x20000058
    1bc4:	20000060 	.word	0x20000060
    1bc8:	00000ad5 	.word	0x00000ad5
    1bcc:	20000004 	.word	0x20000004
    1bd0:	00000bc1 	.word	0x00000bc1

00001bd4 <__aeabi_uidiv>:
    1bd4:	2200      	movs	r2, #0
    1bd6:	0843      	lsrs	r3, r0, #1
    1bd8:	428b      	cmp	r3, r1
    1bda:	d374      	bcc.n	1cc6 <__aeabi_uidiv+0xf2>
    1bdc:	0903      	lsrs	r3, r0, #4
    1bde:	428b      	cmp	r3, r1
    1be0:	d35f      	bcc.n	1ca2 <__aeabi_uidiv+0xce>
    1be2:	0a03      	lsrs	r3, r0, #8
    1be4:	428b      	cmp	r3, r1
    1be6:	d344      	bcc.n	1c72 <__aeabi_uidiv+0x9e>
    1be8:	0b03      	lsrs	r3, r0, #12
    1bea:	428b      	cmp	r3, r1
    1bec:	d328      	bcc.n	1c40 <__aeabi_uidiv+0x6c>
    1bee:	0c03      	lsrs	r3, r0, #16
    1bf0:	428b      	cmp	r3, r1
    1bf2:	d30d      	bcc.n	1c10 <__aeabi_uidiv+0x3c>
    1bf4:	22ff      	movs	r2, #255	; 0xff
    1bf6:	0209      	lsls	r1, r1, #8
    1bf8:	ba12      	rev	r2, r2
    1bfa:	0c03      	lsrs	r3, r0, #16
    1bfc:	428b      	cmp	r3, r1
    1bfe:	d302      	bcc.n	1c06 <__aeabi_uidiv+0x32>
    1c00:	1212      	asrs	r2, r2, #8
    1c02:	0209      	lsls	r1, r1, #8
    1c04:	d065      	beq.n	1cd2 <__aeabi_uidiv+0xfe>
    1c06:	0b03      	lsrs	r3, r0, #12
    1c08:	428b      	cmp	r3, r1
    1c0a:	d319      	bcc.n	1c40 <__aeabi_uidiv+0x6c>
    1c0c:	e000      	b.n	1c10 <__aeabi_uidiv+0x3c>
    1c0e:	0a09      	lsrs	r1, r1, #8
    1c10:	0bc3      	lsrs	r3, r0, #15
    1c12:	428b      	cmp	r3, r1
    1c14:	d301      	bcc.n	1c1a <__aeabi_uidiv+0x46>
    1c16:	03cb      	lsls	r3, r1, #15
    1c18:	1ac0      	subs	r0, r0, r3
    1c1a:	4152      	adcs	r2, r2
    1c1c:	0b83      	lsrs	r3, r0, #14
    1c1e:	428b      	cmp	r3, r1
    1c20:	d301      	bcc.n	1c26 <__aeabi_uidiv+0x52>
    1c22:	038b      	lsls	r3, r1, #14
    1c24:	1ac0      	subs	r0, r0, r3
    1c26:	4152      	adcs	r2, r2
    1c28:	0b43      	lsrs	r3, r0, #13
    1c2a:	428b      	cmp	r3, r1
    1c2c:	d301      	bcc.n	1c32 <__aeabi_uidiv+0x5e>
    1c2e:	034b      	lsls	r3, r1, #13
    1c30:	1ac0      	subs	r0, r0, r3
    1c32:	4152      	adcs	r2, r2
    1c34:	0b03      	lsrs	r3, r0, #12
    1c36:	428b      	cmp	r3, r1
    1c38:	d301      	bcc.n	1c3e <__aeabi_uidiv+0x6a>
    1c3a:	030b      	lsls	r3, r1, #12
    1c3c:	1ac0      	subs	r0, r0, r3
    1c3e:	4152      	adcs	r2, r2
    1c40:	0ac3      	lsrs	r3, r0, #11
    1c42:	428b      	cmp	r3, r1
    1c44:	d301      	bcc.n	1c4a <__aeabi_uidiv+0x76>
    1c46:	02cb      	lsls	r3, r1, #11
    1c48:	1ac0      	subs	r0, r0, r3
    1c4a:	4152      	adcs	r2, r2
    1c4c:	0a83      	lsrs	r3, r0, #10
    1c4e:	428b      	cmp	r3, r1
    1c50:	d301      	bcc.n	1c56 <__aeabi_uidiv+0x82>
    1c52:	028b      	lsls	r3, r1, #10
    1c54:	1ac0      	subs	r0, r0, r3
    1c56:	4152      	adcs	r2, r2
    1c58:	0a43      	lsrs	r3, r0, #9
    1c5a:	428b      	cmp	r3, r1
    1c5c:	d301      	bcc.n	1c62 <__aeabi_uidiv+0x8e>
    1c5e:	024b      	lsls	r3, r1, #9
    1c60:	1ac0      	subs	r0, r0, r3
    1c62:	4152      	adcs	r2, r2
    1c64:	0a03      	lsrs	r3, r0, #8
    1c66:	428b      	cmp	r3, r1
    1c68:	d301      	bcc.n	1c6e <__aeabi_uidiv+0x9a>
    1c6a:	020b      	lsls	r3, r1, #8
    1c6c:	1ac0      	subs	r0, r0, r3
    1c6e:	4152      	adcs	r2, r2
    1c70:	d2cd      	bcs.n	1c0e <__aeabi_uidiv+0x3a>
    1c72:	09c3      	lsrs	r3, r0, #7
    1c74:	428b      	cmp	r3, r1
    1c76:	d301      	bcc.n	1c7c <__aeabi_uidiv+0xa8>
    1c78:	01cb      	lsls	r3, r1, #7
    1c7a:	1ac0      	subs	r0, r0, r3
    1c7c:	4152      	adcs	r2, r2
    1c7e:	0983      	lsrs	r3, r0, #6
    1c80:	428b      	cmp	r3, r1
    1c82:	d301      	bcc.n	1c88 <__aeabi_uidiv+0xb4>
    1c84:	018b      	lsls	r3, r1, #6
    1c86:	1ac0      	subs	r0, r0, r3
    1c88:	4152      	adcs	r2, r2
    1c8a:	0943      	lsrs	r3, r0, #5
    1c8c:	428b      	cmp	r3, r1
    1c8e:	d301      	bcc.n	1c94 <__aeabi_uidiv+0xc0>
    1c90:	014b      	lsls	r3, r1, #5
    1c92:	1ac0      	subs	r0, r0, r3
    1c94:	4152      	adcs	r2, r2
    1c96:	0903      	lsrs	r3, r0, #4
    1c98:	428b      	cmp	r3, r1
    1c9a:	d301      	bcc.n	1ca0 <__aeabi_uidiv+0xcc>
    1c9c:	010b      	lsls	r3, r1, #4
    1c9e:	1ac0      	subs	r0, r0, r3
    1ca0:	4152      	adcs	r2, r2
    1ca2:	08c3      	lsrs	r3, r0, #3
    1ca4:	428b      	cmp	r3, r1
    1ca6:	d301      	bcc.n	1cac <__aeabi_uidiv+0xd8>
    1ca8:	00cb      	lsls	r3, r1, #3
    1caa:	1ac0      	subs	r0, r0, r3
    1cac:	4152      	adcs	r2, r2
    1cae:	0883      	lsrs	r3, r0, #2
    1cb0:	428b      	cmp	r3, r1
    1cb2:	d301      	bcc.n	1cb8 <__aeabi_uidiv+0xe4>
    1cb4:	008b      	lsls	r3, r1, #2
    1cb6:	1ac0      	subs	r0, r0, r3
    1cb8:	4152      	adcs	r2, r2
    1cba:	0843      	lsrs	r3, r0, #1
    1cbc:	428b      	cmp	r3, r1
    1cbe:	d301      	bcc.n	1cc4 <__aeabi_uidiv+0xf0>
    1cc0:	004b      	lsls	r3, r1, #1
    1cc2:	1ac0      	subs	r0, r0, r3
    1cc4:	4152      	adcs	r2, r2
    1cc6:	1a41      	subs	r1, r0, r1
    1cc8:	d200      	bcs.n	1ccc <__aeabi_uidiv+0xf8>
    1cca:	4601      	mov	r1, r0
    1ccc:	4152      	adcs	r2, r2
    1cce:	4610      	mov	r0, r2
    1cd0:	4770      	bx	lr
    1cd2:	e7ff      	b.n	1cd4 <__aeabi_uidiv+0x100>
    1cd4:	b501      	push	{r0, lr}
    1cd6:	2000      	movs	r0, #0
    1cd8:	f000 f80c 	bl	1cf4 <__aeabi_idiv0>
    1cdc:	bd02      	pop	{r1, pc}
    1cde:	46c0      	nop			; (mov r8, r8)

00001ce0 <__aeabi_uidivmod>:
    1ce0:	2900      	cmp	r1, #0
    1ce2:	d0f7      	beq.n	1cd4 <__aeabi_uidiv+0x100>
    1ce4:	b503      	push	{r0, r1, lr}
    1ce6:	f7ff ff75 	bl	1bd4 <__aeabi_uidiv>
    1cea:	bc0e      	pop	{r1, r2, r3}
    1cec:	4342      	muls	r2, r0
    1cee:	1a89      	subs	r1, r1, r2
    1cf0:	4718      	bx	r3
    1cf2:	46c0      	nop			; (mov r8, r8)

00001cf4 <__aeabi_idiv0>:
    1cf4:	4770      	bx	lr
    1cf6:	46c0      	nop			; (mov r8, r8)

00001cf8 <__libc_init_array>:
    1cf8:	4b0e      	ldr	r3, [pc, #56]	; (1d34 <__libc_init_array+0x3c>)
    1cfa:	b570      	push	{r4, r5, r6, lr}
    1cfc:	2500      	movs	r5, #0
    1cfe:	1c1e      	adds	r6, r3, #0
    1d00:	4c0d      	ldr	r4, [pc, #52]	; (1d38 <__libc_init_array+0x40>)
    1d02:	1ae4      	subs	r4, r4, r3
    1d04:	10a4      	asrs	r4, r4, #2
    1d06:	42a5      	cmp	r5, r4
    1d08:	d004      	beq.n	1d14 <__libc_init_array+0x1c>
    1d0a:	00ab      	lsls	r3, r5, #2
    1d0c:	58f3      	ldr	r3, [r6, r3]
    1d0e:	4798      	blx	r3
    1d10:	3501      	adds	r5, #1
    1d12:	e7f8      	b.n	1d06 <__libc_init_array+0xe>
    1d14:	f000 f850 	bl	1db8 <_init>
    1d18:	4b08      	ldr	r3, [pc, #32]	; (1d3c <__libc_init_array+0x44>)
    1d1a:	2500      	movs	r5, #0
    1d1c:	1c1e      	adds	r6, r3, #0
    1d1e:	4c08      	ldr	r4, [pc, #32]	; (1d40 <__libc_init_array+0x48>)
    1d20:	1ae4      	subs	r4, r4, r3
    1d22:	10a4      	asrs	r4, r4, #2
    1d24:	42a5      	cmp	r5, r4
    1d26:	d004      	beq.n	1d32 <__libc_init_array+0x3a>
    1d28:	00ab      	lsls	r3, r5, #2
    1d2a:	58f3      	ldr	r3, [r6, r3]
    1d2c:	4798      	blx	r3
    1d2e:	3501      	adds	r5, #1
    1d30:	e7f8      	b.n	1d24 <__libc_init_array+0x2c>
    1d32:	bd70      	pop	{r4, r5, r6, pc}
    1d34:	00001dc4 	.word	0x00001dc4
    1d38:	00001dc4 	.word	0x00001dc4
    1d3c:	00001dc4 	.word	0x00001dc4
    1d40:	00001dc8 	.word	0x00001dc8

00001d44 <memcpy>:
    1d44:	2300      	movs	r3, #0
    1d46:	b510      	push	{r4, lr}
    1d48:	4293      	cmp	r3, r2
    1d4a:	d003      	beq.n	1d54 <memcpy+0x10>
    1d4c:	5ccc      	ldrb	r4, [r1, r3]
    1d4e:	54c4      	strb	r4, [r0, r3]
    1d50:	3301      	adds	r3, #1
    1d52:	e7f9      	b.n	1d48 <memcpy+0x4>
    1d54:	bd10      	pop	{r4, pc}
    1d56:	0000      	movs	r0, r0
    1d58:	42000800 	.word	0x42000800
    1d5c:	42000c00 	.word	0x42000c00
    1d60:	42001000 	.word	0x42001000
    1d64:	42001400 	.word	0x42001400
    1d68:	42001800 	.word	0x42001800
    1d6c:	42001c00 	.word	0x42001c00
    1d70:	00001382 	.word	0x00001382
    1d74:	0000137e 	.word	0x0000137e
    1d78:	0000137e 	.word	0x0000137e
    1d7c:	000013cc 	.word	0x000013cc
    1d80:	000013cc 	.word	0x000013cc
    1d84:	00001398 	.word	0x00001398
    1d88:	00001388 	.word	0x00001388
    1d8c:	0000139e 	.word	0x0000139e
    1d90:	000014e0 	.word	0x000014e0
    1d94:	000014c0 	.word	0x000014c0
    1d98:	000014c0 	.word	0x000014c0
    1d9c:	00001530 	.word	0x00001530
    1da0:	000014d2 	.word	0x000014d2
    1da4:	000014ee 	.word	0x000014ee
    1da8:	000014c4 	.word	0x000014c4
    1dac:	000014fc 	.word	0x000014fc
    1db0:	5453554a 	.word	0x5453554a
    1db4:	00000049 	.word	0x00000049

00001db8 <_init>:
    1db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1dba:	46c0      	nop			; (mov r8, r8)
    1dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1dbe:	bc08      	pop	{r3}
    1dc0:	469e      	mov	lr, r3
    1dc2:	4770      	bx	lr

00001dc4 <__init_array_start>:
    1dc4:	000000cd 	.word	0x000000cd

00001dc8 <_fini>:
    1dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1dca:	46c0      	nop			; (mov r8, r8)
    1dcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1dce:	bc08      	pop	{r3}
    1dd0:	469e      	mov	lr, r3
    1dd2:	4770      	bx	lr

00001dd4 <__fini_array_start>:
    1dd4:	000000a5 	.word	0x000000a5
